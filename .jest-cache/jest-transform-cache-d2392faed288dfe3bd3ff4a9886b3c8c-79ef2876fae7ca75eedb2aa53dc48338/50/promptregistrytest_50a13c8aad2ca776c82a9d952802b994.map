{"file":"C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\tests\\unit\\prompt-registry.test.tsx","mappings":"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","names":[],"sources":["C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\tests\\unit\\prompt-registry.test.tsx"],"sourcesContent":["/**\r\n * Unit tests for PromptRegistry\r\n * Tests prompt template registration, compilation, and management\r\n */\r\n\r\nimport { describe, it, expect, beforeEach, vi } from 'vitest';\r\nimport { PromptRegistry } from '../../src/prompts/registry';\r\nimport { PromptBuilder } from '../../src/prompts/builder';\r\nimport { \r\n  PromptTemplate, \r\n  PromptNotFoundError, \r\n  PromptValidationError,\r\n  PromptCompilationError \r\n} from '../../src/prompts/types';\r\n\r\ndescribe('PromptRegistry', () => {\r\n  let registry: PromptRegistry;\r\n\r\n  const samplePrompt: PromptTemplate = {\r\n    id: 'test.basic',\r\n    name: 'Basic Test Prompt',\r\n    category: 'user',\r\n    template: 'Hello {{name}}, welcome to {{service}}!',\r\n    variables: ['name', 'service'],\r\n    version: '1.0.0',\r\n    metadata: {\r\n      author: 'test',\r\n      lastModified: new Date(),\r\n      description: 'Basic test prompt',\r\n      tags: ['test']\r\n    }\r\n  };\r\n\r\n  beforeEach(() => {\r\n    registry = new PromptRegistry({\r\n      enableLogging: false // Disable logging for tests\r\n    });\r\n  });\r\n\r\n  describe('register()', () => {\r\n    it('should register a valid prompt template', () => {\r\n      expect(() => registry.register(samplePrompt)).not.toThrow();\r\n      expect(registry.has('test.basic')).toBe(true);\r\n    });\r\n\r\n    it('should throw error for duplicate prompt IDs', () => {\r\n      registry.register(samplePrompt);\r\n      \r\n      expect(() => registry.register(samplePrompt)).toThrow(/already exists/);\r\n    });\r\n\r\n    it('should validate prompt structure', () => {\r\n      const invalidPrompt = {\r\n        ...samplePrompt,\r\n        id: '', // Invalid empty ID\r\n      };\r\n\r\n      expect(() => registry.register(invalidPrompt as PromptTemplate)).toThrow(PromptValidationError);\r\n    });\r\n\r\n    it('should validate that template variables are declared', () => {\r\n      const invalidPrompt = {\r\n        ...samplePrompt,\r\n        template: 'Hello {{name}}, welcome to {{undeclaredVar}}!',\r\n        variables: ['name'] // Missing 'undeclaredVar'\r\n      };\r\n\r\n      expect(() => registry.register(invalidPrompt)).toThrow(PromptValidationError);\r\n    });\r\n  });\r\n\r\n  describe('get()', () => {\r\n    beforeEach(() => {\r\n      registry.register(samplePrompt);\r\n    });\r\n\r\n    it('should retrieve registered prompt', () => {\r\n      const prompt = registry.get('test.basic');\r\n      expect(prompt.id).toBe('test.basic');\r\n      expect(prompt.name).toBe('Basic Test Prompt');\r\n    });\r\n\r\n    it('should throw error for non-existent prompt', () => {\r\n      expect(() => registry.get('non.existent')).toThrow(PromptNotFoundError);\r\n    });\r\n\r\n    it('should return model-specific version when available', () => {\r\n      const promptWithVariants = {\r\n        ...samplePrompt,\r\n        id: 'test.variants',\r\n        modelSpecific: {\r\n          anthropic: 'Human: {{message}}\\nAssistant:',\r\n          openai: 'System: {{message}}'\r\n        }\r\n      };\r\n\r\n      registry.register(promptWithVariants);\r\n\r\n      const anthropicVersion = registry.get('test.variants', 'anthropic');\r\n      const openaiVersion = registry.get('test.variants', 'openai');\r\n\r\n      expect(anthropicVersion.template).toBe('Human: {{message}}\\nAssistant:');\r\n      expect(openaiVersion.template).toBe('System: {{message}}');\r\n    });\r\n  });\r\n\r\n  describe('compile()', () => {\r\n    beforeEach(() => {\r\n      registry.register(samplePrompt);\r\n    });\r\n\r\n    it('should compile prompt with variables', () => {\r\n      const compiled = registry.compile('test.basic', {\r\n        name: 'John',\r\n        service: 'CCH Intelligence'\r\n      });\r\n\r\n      expect(compiled.text).toBe('Hello John, welcome to CCH Intelligence!');\r\n      expect(compiled.templateId).toBe('test.basic');\r\n      expect(compiled.variables).toEqual({\r\n        name: 'John',\r\n        service: 'CCH Intelligence'\r\n      });\r\n    });\r\n\r\n    it('should validate required variables', () => {\r\n      expect(() => {\r\n        registry.compile('test.basic', {\r\n          name: 'John'\r\n          // Missing 'service' variable\r\n        });\r\n      }).toThrow(PromptValidationError);\r\n    });\r\n\r\n    it('should handle missing variables gracefully when validation disabled', () => {\r\n      const compiled = registry.compile('test.basic', {\r\n        name: 'John'\r\n        // Missing 'service' variable\r\n      }, { validate: false });\r\n\r\n      expect(compiled.text).toBe('Hello John, welcome to {{service}}!');\r\n    });\r\n\r\n    it('should use cache when enabled', () => {\r\n      const variables = { name: 'John', service: 'CCH Intelligence' };\r\n      \r\n      const compiled1 = registry.compile('test.basic', variables, { useCache: true });\r\n      const compiled2 = registry.compile('test.basic', variables, { useCache: true });\r\n\r\n      // Should return same result (cached)\r\n      expect(compiled1.text).toBe(compiled2.text);\r\n      expect(compiled1.metadata.compiledAt).toEqual(compiled2.metadata.compiledAt);\r\n    });\r\n\r\n    it('should handle different providers', () => {\r\n      const promptWithVariants = {\r\n        ...samplePrompt,\r\n        id: 'test.provider',\r\n        modelSpecific: {\r\n          anthropic: 'Human: Hello {{name}}\\nAssistant:',\r\n          openai: 'Hello {{name}}'\r\n        }\r\n      };\r\n\r\n      registry.register(promptWithVariants);\r\n\r\n      const anthropicCompiled = registry.compile('test.provider', \r\n        { name: 'John' }, \r\n        { provider: 'anthropic' }\r\n      );\r\n      \r\n      const openaiCompiled = registry.compile('test.provider', \r\n        { name: 'John' }, \r\n        { provider: 'openai' }\r\n      );\r\n\r\n      expect(anthropicCompiled.text).toBe('Human: Hello John\\nAssistant:');\r\n      expect(openaiCompiled.text).toBe('Hello John');\r\n    });\r\n  });\r\n\r\n  describe('search()', () => {\r\n    beforeEach(() => {\r\n      registry.register(samplePrompt);\r\n      registry.register({\r\n        ...samplePrompt,\r\n        id: 'test.system',\r\n        category: 'system',\r\n        metadata: {\r\n          ...samplePrompt.metadata,\r\n          tags: ['system', 'core']\r\n        }\r\n      });\r\n    });\r\n\r\n    it('should search by category', () => {\r\n      const systemPrompts = registry.search({ category: 'system' });\r\n      expect(systemPrompts).toHaveLength(1);\r\n      expect(systemPrompts[0].id).toBe('test.system');\r\n    });\r\n\r\n    it('should search by tags', () => {\r\n      const corePrompts = registry.search({ tags: ['core'] });\r\n      expect(corePrompts).toHaveLength(1);\r\n      expect(corePrompts[0].id).toBe('test.system');\r\n    });\r\n\r\n    it('should search by text query', () => {\r\n      const results = registry.search({ query: 'Basic' });\r\n      expect(results).toHaveLength(1);\r\n      expect(results[0].id).toBe('test.basic');\r\n    });\r\n  });\r\n\r\n  describe('registerBatch()', () => {\r\n    it('should register multiple prompts', () => {\r\n      const prompts = [\r\n        { ...samplePrompt, id: 'batch.1' },\r\n        { ...samplePrompt, id: 'batch.2' },\r\n        { ...samplePrompt, id: 'batch.3' }\r\n      ];\r\n\r\n      registry.registerBatch(prompts);\r\n\r\n      expect(registry.has('batch.1')).toBe(true);\r\n      expect(registry.has('batch.2')).toBe(true);\r\n      expect(registry.has('batch.3')).toBe(true);\r\n    });\r\n\r\n    it('should handle partial failures gracefully', () => {\r\n      const prompts = [\r\n        { ...samplePrompt, id: 'batch.valid' },\r\n        { ...samplePrompt, id: '' }, // Invalid\r\n        { ...samplePrompt, id: 'batch.valid2' }\r\n      ];\r\n\r\n      // Should not throw but log warnings\r\n      expect(() => registry.registerBatch(prompts)).not.toThrow();\r\n      \r\n      expect(registry.has('batch.valid')).toBe(true);\r\n      expect(registry.has('batch.valid2')).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('usage statistics', () => {\r\n    beforeEach(() => {\r\n      registry.register(samplePrompt);\r\n    });\r\n\r\n    it('should track usage statistics', () => {\r\n      registry.compile('test.basic', { name: 'John', service: 'Test' });\r\n      registry.compile('test.basic', { name: 'Jane', service: 'Test' });\r\n\r\n      const stats = registry.getUsageStats('test.basic');\r\n      expect(stats?.usageCount).toBe(2);\r\n      expect(stats?.templateId).toBe('test.basic');\r\n    });\r\n\r\n    it('should track error statistics', () => {\r\n      try {\r\n        registry.compile('test.basic', {}); // Missing variables\r\n      } catch (error) {\r\n        // Expected error\r\n      }\r\n\r\n      const stats = registry.getUsageStats('test.basic');\r\n      expect(stats?.errorCount).toBe(1);\r\n    });\r\n  });\r\n\r\n  describe('cache management', () => {\r\n    beforeEach(() => {\r\n      registry.register(samplePrompt);\r\n    });\r\n\r\n    it('should clear cache', () => {\r\n      registry.compile('test.basic', { name: 'John', service: 'Test' });\r\n      \r\n      expect(() => registry.clearCache()).not.toThrow();\r\n    });\r\n\r\n    it('should clear cache for specific prompt when unregistered', () => {\r\n      registry.compile('test.basic', { name: 'John', service: 'Test' });\r\n      \r\n      const removed = registry.unregister('test.basic');\r\n      expect(removed).toBe(true);\r\n      expect(registry.has('test.basic')).toBe(false);\r\n    });\r\n  });\r\n\r\n  describe('registry statistics', () => {\r\n    beforeEach(() => {\r\n      registry.register(samplePrompt);\r\n      registry.register({\r\n        ...samplePrompt,\r\n        id: 'test.system',\r\n        category: 'system'\r\n      });\r\n    });\r\n\r\n    it('should provide registry statistics', () => {\r\n      const stats = registry.getRegistryStats();\r\n      \r\n      expect(stats.totalPrompts).toBe(2);\r\n      expect(stats.categories.user).toBe(1);\r\n      expect(stats.categories.system).toBe(1);\r\n    });\r\n  });\r\n\r\n  describe('PromptBuilder integration', () => {\r\n    it('should work with PromptBuilder', () => {\r\n      const prompt = PromptBuilder.create()\r\n        .id('builder.test')\r\n        .name('Builder Test')\r\n        .category('user')\r\n        .template('Hello {{name}}!')\r\n        .author('test-author')\r\n        .tags('test', 'builder')\r\n        .build();\r\n\r\n      registry.register(prompt);\r\n\r\n      const compiled = registry.compile('builder.test', { name: 'Builder' });\r\n      expect(compiled.text).toBe('Hello Builder!');\r\n    });\r\n  });\r\n});"],"version":3}