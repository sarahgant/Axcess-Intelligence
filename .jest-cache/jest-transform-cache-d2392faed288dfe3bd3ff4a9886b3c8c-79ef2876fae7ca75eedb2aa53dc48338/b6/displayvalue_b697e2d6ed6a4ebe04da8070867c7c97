b0cf84f9291ce4c7c671c7bbd7cbd8c7
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.queryByDisplayValue = exports.queryAllByDisplayValue = exports.getByDisplayValue = exports.getAllByDisplayValue = exports.findByDisplayValue = exports.findAllByDisplayValue = void 0;
var _queryHelpers = require("../query-helpers");
var _helpers = require("../helpers");
var _allUtils = require("./all-utils");
const queryAllByDisplayValue = (container, value, {
  exact = true,
  collapseWhitespace,
  trim,
  normalizer
} = {}) => {
  (0, _helpers.checkContainerType)(container);
  const matcher = exact ? _allUtils.matches : _allUtils.fuzzyMatches;
  const matchNormalizer = (0, _allUtils.makeNormalizer)({
    collapseWhitespace,
    trim,
    normalizer
  });
  return Array.from(container.querySelectorAll(`input,textarea,select`)).filter(node => {
    if (node.tagName === 'SELECT') {
      const selectedOptions = Array.from(node.options).filter(option => option.selected);
      return selectedOptions.some(optionNode => matcher((0, _allUtils.getNodeText)(optionNode), optionNode, value, matchNormalizer));
    } else {
      return matcher(node.value, node, value, matchNormalizer);
    }
  });
};
const getMultipleError = (c, value) => `Found multiple elements with the display value: ${value}.`;
const getMissingError = (c, value) => `Unable to find an element with the display value: ${value}.`;
const queryAllByDisplayValueWithSuggestions = exports.queryAllByDisplayValue = (0, _queryHelpers.wrapAllByQueryWithSuggestion)(queryAllByDisplayValue, queryAllByDisplayValue.name, 'queryAll');
const [queryByDisplayValue, getAllByDisplayValue, getByDisplayValue, findAllByDisplayValue, findByDisplayValue] = (0, _allUtils.buildQueries)(queryAllByDisplayValue, getMultipleError, getMissingError);
exports.findByDisplayValue = findByDisplayValue;
exports.findAllByDisplayValue = findAllByDisplayValue;
exports.getByDisplayValue = getByDisplayValue;
exports.getAllByDisplayValue = getAllByDisplayValue;
exports.queryByDisplayValue = queryByDisplayValue;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInF1ZXJ5QnlEaXNwbGF5VmFsdWUiLCJxdWVyeUFsbEJ5RGlzcGxheVZhbHVlIiwiZ2V0QnlEaXNwbGF5VmFsdWUiLCJnZXRBbGxCeURpc3BsYXlWYWx1ZSIsImZpbmRCeURpc3BsYXlWYWx1ZSIsImZpbmRBbGxCeURpc3BsYXlWYWx1ZSIsIl9xdWVyeUhlbHBlcnMiLCJyZXF1aXJlIiwiX2hlbHBlcnMiLCJfYWxsVXRpbHMiLCJjb250YWluZXIiLCJleGFjdCIsImNvbGxhcHNlV2hpdGVzcGFjZSIsInRyaW0iLCJub3JtYWxpemVyIiwiY2hlY2tDb250YWluZXJUeXBlIiwibWF0Y2hlciIsIm1hdGNoZXMiLCJmdXp6eU1hdGNoZXMiLCJtYXRjaE5vcm1hbGl6ZXIiLCJtYWtlTm9ybWFsaXplciIsIkFycmF5IiwiZnJvbSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmaWx0ZXIiLCJub2RlIiwidGFnTmFtZSIsInNlbGVjdGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJvcHRpb24iLCJzZWxlY3RlZCIsInNvbWUiLCJvcHRpb25Ob2RlIiwiZ2V0Tm9kZVRleHQiLCJnZXRNdWx0aXBsZUVycm9yIiwiYyIsImdldE1pc3NpbmdFcnJvciIsInF1ZXJ5QWxsQnlEaXNwbGF5VmFsdWVXaXRoU3VnZ2VzdGlvbnMiLCJ3cmFwQWxsQnlRdWVyeVdpdGhTdWdnZXN0aW9uIiwibmFtZSIsImJ1aWxkUXVlcmllcyJdLCJzb3VyY2VzIjpbImRpc3BsYXktdmFsdWUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnF1ZXJ5QnlEaXNwbGF5VmFsdWUgPSBleHBvcnRzLnF1ZXJ5QWxsQnlEaXNwbGF5VmFsdWUgPSBleHBvcnRzLmdldEJ5RGlzcGxheVZhbHVlID0gZXhwb3J0cy5nZXRBbGxCeURpc3BsYXlWYWx1ZSA9IGV4cG9ydHMuZmluZEJ5RGlzcGxheVZhbHVlID0gZXhwb3J0cy5maW5kQWxsQnlEaXNwbGF5VmFsdWUgPSB2b2lkIDA7XG52YXIgX3F1ZXJ5SGVscGVycyA9IHJlcXVpcmUoXCIuLi9xdWVyeS1oZWxwZXJzXCIpO1xudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4uL2hlbHBlcnNcIik7XG52YXIgX2FsbFV0aWxzID0gcmVxdWlyZShcIi4vYWxsLXV0aWxzXCIpO1xuY29uc3QgcXVlcnlBbGxCeURpc3BsYXlWYWx1ZSA9IChjb250YWluZXIsIHZhbHVlLCB7XG4gIGV4YWN0ID0gdHJ1ZSxcbiAgY29sbGFwc2VXaGl0ZXNwYWNlLFxuICB0cmltLFxuICBub3JtYWxpemVyXG59ID0ge30pID0+IHtcbiAgKDAsIF9oZWxwZXJzLmNoZWNrQ29udGFpbmVyVHlwZSkoY29udGFpbmVyKTtcbiAgY29uc3QgbWF0Y2hlciA9IGV4YWN0ID8gX2FsbFV0aWxzLm1hdGNoZXMgOiBfYWxsVXRpbHMuZnV6enlNYXRjaGVzO1xuICBjb25zdCBtYXRjaE5vcm1hbGl6ZXIgPSAoMCwgX2FsbFV0aWxzLm1ha2VOb3JtYWxpemVyKSh7XG4gICAgY29sbGFwc2VXaGl0ZXNwYWNlLFxuICAgIHRyaW0sXG4gICAgbm9ybWFsaXplclxuICB9KTtcbiAgcmV0dXJuIEFycmF5LmZyb20oY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoYGlucHV0LHRleHRhcmVhLHNlbGVjdGApKS5maWx0ZXIobm9kZSA9PiB7XG4gICAgaWYgKG5vZGUudGFnTmFtZSA9PT0gJ1NFTEVDVCcpIHtcbiAgICAgIGNvbnN0IHNlbGVjdGVkT3B0aW9ucyA9IEFycmF5LmZyb20obm9kZS5vcHRpb25zKS5maWx0ZXIob3B0aW9uID0+IG9wdGlvbi5zZWxlY3RlZCk7XG4gICAgICByZXR1cm4gc2VsZWN0ZWRPcHRpb25zLnNvbWUob3B0aW9uTm9kZSA9PiBtYXRjaGVyKCgwLCBfYWxsVXRpbHMuZ2V0Tm9kZVRleHQpKG9wdGlvbk5vZGUpLCBvcHRpb25Ob2RlLCB2YWx1ZSwgbWF0Y2hOb3JtYWxpemVyKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBtYXRjaGVyKG5vZGUudmFsdWUsIG5vZGUsIHZhbHVlLCBtYXRjaE5vcm1hbGl6ZXIpO1xuICAgIH1cbiAgfSk7XG59O1xuY29uc3QgZ2V0TXVsdGlwbGVFcnJvciA9IChjLCB2YWx1ZSkgPT4gYEZvdW5kIG11bHRpcGxlIGVsZW1lbnRzIHdpdGggdGhlIGRpc3BsYXkgdmFsdWU6ICR7dmFsdWV9LmA7XG5jb25zdCBnZXRNaXNzaW5nRXJyb3IgPSAoYywgdmFsdWUpID0+IGBVbmFibGUgdG8gZmluZCBhbiBlbGVtZW50IHdpdGggdGhlIGRpc3BsYXkgdmFsdWU6ICR7dmFsdWV9LmA7XG5jb25zdCBxdWVyeUFsbEJ5RGlzcGxheVZhbHVlV2l0aFN1Z2dlc3Rpb25zID0gZXhwb3J0cy5xdWVyeUFsbEJ5RGlzcGxheVZhbHVlID0gKDAsIF9xdWVyeUhlbHBlcnMud3JhcEFsbEJ5UXVlcnlXaXRoU3VnZ2VzdGlvbikocXVlcnlBbGxCeURpc3BsYXlWYWx1ZSwgcXVlcnlBbGxCeURpc3BsYXlWYWx1ZS5uYW1lLCAncXVlcnlBbGwnKTtcbmNvbnN0IFtxdWVyeUJ5RGlzcGxheVZhbHVlLCBnZXRBbGxCeURpc3BsYXlWYWx1ZSwgZ2V0QnlEaXNwbGF5VmFsdWUsIGZpbmRBbGxCeURpc3BsYXlWYWx1ZSwgZmluZEJ5RGlzcGxheVZhbHVlXSA9ICgwLCBfYWxsVXRpbHMuYnVpbGRRdWVyaWVzKShxdWVyeUFsbEJ5RGlzcGxheVZhbHVlLCBnZXRNdWx0aXBsZUVycm9yLCBnZXRNaXNzaW5nRXJyb3IpO1xuZXhwb3J0cy5maW5kQnlEaXNwbGF5VmFsdWUgPSBmaW5kQnlEaXNwbGF5VmFsdWU7XG5leHBvcnRzLmZpbmRBbGxCeURpc3BsYXlWYWx1ZSA9IGZpbmRBbGxCeURpc3BsYXlWYWx1ZTtcbmV4cG9ydHMuZ2V0QnlEaXNwbGF5VmFsdWUgPSBnZXRCeURpc3BsYXlWYWx1ZTtcbmV4cG9ydHMuZ2V0QWxsQnlEaXNwbGF5VmFsdWUgPSBnZXRBbGxCeURpc3BsYXlWYWx1ZTtcbmV4cG9ydHMucXVlcnlCeURpc3BsYXlWYWx1ZSA9IHF1ZXJ5QnlEaXNwbGF5VmFsdWU7Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0UsbUJBQW1CLEdBQUdGLE9BQU8sQ0FBQ0csc0JBQXNCLEdBQUdILE9BQU8sQ0FBQ0ksaUJBQWlCLEdBQUdKLE9BQU8sQ0FBQ0ssb0JBQW9CLEdBQUdMLE9BQU8sQ0FBQ00sa0JBQWtCLEdBQUdOLE9BQU8sQ0FBQ08scUJBQXFCLEdBQUcsS0FBSyxDQUFDO0FBQzdMLElBQUlDLGFBQWEsR0FBR0MsT0FBTyxDQUFDLGtCQUFrQixDQUFDO0FBQy9DLElBQUlDLFFBQVEsR0FBR0QsT0FBTyxDQUFDLFlBQVksQ0FBQztBQUNwQyxJQUFJRSxTQUFTLEdBQUdGLE9BQU8sQ0FBQyxhQUFhLENBQUM7QUFDdEMsTUFBTU4sc0JBQXNCLEdBQUdBLENBQUNTLFNBQVMsRUFBRVgsS0FBSyxFQUFFO0VBQ2hEWSxLQUFLLEdBQUcsSUFBSTtFQUNaQyxrQkFBa0I7RUFDbEJDLElBQUk7RUFDSkM7QUFDRixDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUs7RUFDVCxDQUFDLENBQUMsRUFBRU4sUUFBUSxDQUFDTyxrQkFBa0IsRUFBRUwsU0FBUyxDQUFDO0VBQzNDLE1BQU1NLE9BQU8sR0FBR0wsS0FBSyxHQUFHRixTQUFTLENBQUNRLE9BQU8sR0FBR1IsU0FBUyxDQUFDUyxZQUFZO0VBQ2xFLE1BQU1DLGVBQWUsR0FBRyxDQUFDLENBQUMsRUFBRVYsU0FBUyxDQUFDVyxjQUFjLEVBQUU7SUFDcERSLGtCQUFrQjtJQUNsQkMsSUFBSTtJQUNKQztFQUNGLENBQUMsQ0FBQztFQUNGLE9BQU9PLEtBQUssQ0FBQ0MsSUFBSSxDQUFDWixTQUFTLENBQUNhLGdCQUFnQixDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQ0MsTUFBTSxDQUFDQyxJQUFJLElBQUk7SUFDcEYsSUFBSUEsSUFBSSxDQUFDQyxPQUFPLEtBQUssUUFBUSxFQUFFO01BQzdCLE1BQU1DLGVBQWUsR0FBR04sS0FBSyxDQUFDQyxJQUFJLENBQUNHLElBQUksQ0FBQ0csT0FBTyxDQUFDLENBQUNKLE1BQU0sQ0FBQ0ssTUFBTSxJQUFJQSxNQUFNLENBQUNDLFFBQVEsQ0FBQztNQUNsRixPQUFPSCxlQUFlLENBQUNJLElBQUksQ0FBQ0MsVUFBVSxJQUFJaEIsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFUCxTQUFTLENBQUN3QixXQUFXLEVBQUVELFVBQVUsQ0FBQyxFQUFFQSxVQUFVLEVBQUVqQyxLQUFLLEVBQUVvQixlQUFlLENBQUMsQ0FBQztJQUNoSSxDQUFDLE1BQU07TUFDTCxPQUFPSCxPQUFPLENBQUNTLElBQUksQ0FBQzFCLEtBQUssRUFBRTBCLElBQUksRUFBRTFCLEtBQUssRUFBRW9CLGVBQWUsQ0FBQztJQUMxRDtFQUNGLENBQUMsQ0FBQztBQUNKLENBQUM7QUFDRCxNQUFNZSxnQkFBZ0IsR0FBR0EsQ0FBQ0MsQ0FBQyxFQUFFcEMsS0FBSyxLQUFLLG1EQUFtREEsS0FBSyxHQUFHO0FBQ2xHLE1BQU1xQyxlQUFlLEdBQUdBLENBQUNELENBQUMsRUFBRXBDLEtBQUssS0FBSyxxREFBcURBLEtBQUssR0FBRztBQUNuRyxNQUFNc0MscUNBQXFDLEdBQUd2QyxPQUFPLENBQUNHLHNCQUFzQixHQUFHLENBQUMsQ0FBQyxFQUFFSyxhQUFhLENBQUNnQyw0QkFBNEIsRUFBRXJDLHNCQUFzQixFQUFFQSxzQkFBc0IsQ0FBQ3NDLElBQUksRUFBRSxVQUFVLENBQUM7QUFDL0wsTUFBTSxDQUFDdkMsbUJBQW1CLEVBQUVHLG9CQUFvQixFQUFFRCxpQkFBaUIsRUFBRUcscUJBQXFCLEVBQUVELGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUVLLFNBQVMsQ0FBQytCLFlBQVksRUFBRXZDLHNCQUFzQixFQUFFaUMsZ0JBQWdCLEVBQUVFLGVBQWUsQ0FBQztBQUN4TXRDLE9BQU8sQ0FBQ00sa0JBQWtCLEdBQUdBLGtCQUFrQjtBQUMvQ04sT0FBTyxDQUFDTyxxQkFBcUIsR0FBR0EscUJBQXFCO0FBQ3JEUCxPQUFPLENBQUNJLGlCQUFpQixHQUFHQSxpQkFBaUI7QUFDN0NKLE9BQU8sQ0FBQ0ssb0JBQW9CLEdBQUdBLG9CQUFvQjtBQUNuREwsT0FBTyxDQUFDRSxtQkFBbUIsR0FBR0EsbUJBQW1CIiwiaWdub3JlTGlzdCI6W119