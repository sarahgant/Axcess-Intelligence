4d1a38f1ead27bc990a5e7dad6af7ce4
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getUserCodeFrame = getUserCodeFrame;
// We try to load node dependencies
let chalk = null;
let readFileSync = null;
let codeFrameColumns = null;
try {
  const nodeRequire = module && module.require;
  readFileSync = nodeRequire.call(module, 'fs').readFileSync;
  codeFrameColumns = nodeRequire.call(module, '@babel/code-frame').codeFrameColumns;
  chalk = nodeRequire.call(module, 'chalk');
} catch {
  // We're in a browser environment
}

// frame has the form "at myMethod (location/to/my/file.js:10:2)"
function getCodeFrame(frame) {
  const locationStart = frame.indexOf('(') + 1;
  const locationEnd = frame.indexOf(')');
  const frameLocation = frame.slice(locationStart, locationEnd);
  const frameLocationElements = frameLocation.split(':');
  const [filename, line, column] = [frameLocationElements[0], parseInt(frameLocationElements[1], 10), parseInt(frameLocationElements[2], 10)];
  let rawFileContents = '';
  try {
    rawFileContents = readFileSync(filename, 'utf-8');
  } catch {
    return '';
  }
  const codeFrame = codeFrameColumns(rawFileContents, {
    start: {
      line,
      column
    }
  }, {
    highlightCode: true,
    linesBelow: 0
  });
  return `${chalk.dim(frameLocation)}\n${codeFrame}\n`;
}
function getUserCodeFrame() {
  // If we couldn't load dependencies, we can't generate the user trace
  /* istanbul ignore next */
  if (!readFileSync || !codeFrameColumns) {
    return '';
  }
  const err = new Error();
  const firstClientCodeFrame = err.stack.split('\n').slice(1) // Remove first line which has the form "Error: TypeError"
  .find(frame => !frame.includes('node_modules/')); // Ignore frames from 3rd party libraries

  return getCodeFrame(firstClientCodeFrame);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldFVzZXJDb2RlRnJhbWUiLCJjaGFsayIsInJlYWRGaWxlU3luYyIsImNvZGVGcmFtZUNvbHVtbnMiLCJub2RlUmVxdWlyZSIsIm1vZHVsZSIsInJlcXVpcmUiLCJjYWxsIiwiZ2V0Q29kZUZyYW1lIiwiZnJhbWUiLCJsb2NhdGlvblN0YXJ0IiwiaW5kZXhPZiIsImxvY2F0aW9uRW5kIiwiZnJhbWVMb2NhdGlvbiIsInNsaWNlIiwiZnJhbWVMb2NhdGlvbkVsZW1lbnRzIiwic3BsaXQiLCJmaWxlbmFtZSIsImxpbmUiLCJjb2x1bW4iLCJwYXJzZUludCIsInJhd0ZpbGVDb250ZW50cyIsImNvZGVGcmFtZSIsInN0YXJ0IiwiaGlnaGxpZ2h0Q29kZSIsImxpbmVzQmVsb3ciLCJkaW0iLCJlcnIiLCJFcnJvciIsImZpcnN0Q2xpZW50Q29kZUZyYW1lIiwic3RhY2siLCJmaW5kIiwiaW5jbHVkZXMiXSwic291cmNlcyI6WyJnZXQtdXNlci1jb2RlLWZyYW1lLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5nZXRVc2VyQ29kZUZyYW1lID0gZ2V0VXNlckNvZGVGcmFtZTtcbi8vIFdlIHRyeSB0byBsb2FkIG5vZGUgZGVwZW5kZW5jaWVzXG5sZXQgY2hhbGsgPSBudWxsO1xubGV0IHJlYWRGaWxlU3luYyA9IG51bGw7XG5sZXQgY29kZUZyYW1lQ29sdW1ucyA9IG51bGw7XG50cnkge1xuICBjb25zdCBub2RlUmVxdWlyZSA9IG1vZHVsZSAmJiBtb2R1bGUucmVxdWlyZTtcbiAgcmVhZEZpbGVTeW5jID0gbm9kZVJlcXVpcmUuY2FsbChtb2R1bGUsICdmcycpLnJlYWRGaWxlU3luYztcbiAgY29kZUZyYW1lQ29sdW1ucyA9IG5vZGVSZXF1aXJlLmNhbGwobW9kdWxlLCAnQGJhYmVsL2NvZGUtZnJhbWUnKS5jb2RlRnJhbWVDb2x1bW5zO1xuICBjaGFsayA9IG5vZGVSZXF1aXJlLmNhbGwobW9kdWxlLCAnY2hhbGsnKTtcbn0gY2F0Y2gge1xuICAvLyBXZSdyZSBpbiBhIGJyb3dzZXIgZW52aXJvbm1lbnRcbn1cblxuLy8gZnJhbWUgaGFzIHRoZSBmb3JtIFwiYXQgbXlNZXRob2QgKGxvY2F0aW9uL3RvL215L2ZpbGUuanM6MTA6MilcIlxuZnVuY3Rpb24gZ2V0Q29kZUZyYW1lKGZyYW1lKSB7XG4gIGNvbnN0IGxvY2F0aW9uU3RhcnQgPSBmcmFtZS5pbmRleE9mKCcoJykgKyAxO1xuICBjb25zdCBsb2NhdGlvbkVuZCA9IGZyYW1lLmluZGV4T2YoJyknKTtcbiAgY29uc3QgZnJhbWVMb2NhdGlvbiA9IGZyYW1lLnNsaWNlKGxvY2F0aW9uU3RhcnQsIGxvY2F0aW9uRW5kKTtcbiAgY29uc3QgZnJhbWVMb2NhdGlvbkVsZW1lbnRzID0gZnJhbWVMb2NhdGlvbi5zcGxpdCgnOicpO1xuICBjb25zdCBbZmlsZW5hbWUsIGxpbmUsIGNvbHVtbl0gPSBbZnJhbWVMb2NhdGlvbkVsZW1lbnRzWzBdLCBwYXJzZUludChmcmFtZUxvY2F0aW9uRWxlbWVudHNbMV0sIDEwKSwgcGFyc2VJbnQoZnJhbWVMb2NhdGlvbkVsZW1lbnRzWzJdLCAxMCldO1xuICBsZXQgcmF3RmlsZUNvbnRlbnRzID0gJyc7XG4gIHRyeSB7XG4gICAgcmF3RmlsZUNvbnRlbnRzID0gcmVhZEZpbGVTeW5jKGZpbGVuYW1lLCAndXRmLTgnKTtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIGNvbnN0IGNvZGVGcmFtZSA9IGNvZGVGcmFtZUNvbHVtbnMocmF3RmlsZUNvbnRlbnRzLCB7XG4gICAgc3RhcnQ6IHtcbiAgICAgIGxpbmUsXG4gICAgICBjb2x1bW5cbiAgICB9XG4gIH0sIHtcbiAgICBoaWdobGlnaHRDb2RlOiB0cnVlLFxuICAgIGxpbmVzQmVsb3c6IDBcbiAgfSk7XG4gIHJldHVybiBgJHtjaGFsay5kaW0oZnJhbWVMb2NhdGlvbil9XFxuJHtjb2RlRnJhbWV9XFxuYDtcbn1cbmZ1bmN0aW9uIGdldFVzZXJDb2RlRnJhbWUoKSB7XG4gIC8vIElmIHdlIGNvdWxkbid0IGxvYWQgZGVwZW5kZW5jaWVzLCB3ZSBjYW4ndCBnZW5lcmF0ZSB0aGUgdXNlciB0cmFjZVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBpZiAoIXJlYWRGaWxlU3luYyB8fCAhY29kZUZyYW1lQ29sdW1ucykge1xuICAgIHJldHVybiAnJztcbiAgfVxuICBjb25zdCBlcnIgPSBuZXcgRXJyb3IoKTtcbiAgY29uc3QgZmlyc3RDbGllbnRDb2RlRnJhbWUgPSBlcnIuc3RhY2suc3BsaXQoJ1xcbicpLnNsaWNlKDEpIC8vIFJlbW92ZSBmaXJzdCBsaW5lIHdoaWNoIGhhcyB0aGUgZm9ybSBcIkVycm9yOiBUeXBlRXJyb3JcIlxuICAuZmluZChmcmFtZSA9PiAhZnJhbWUuaW5jbHVkZXMoJ25vZGVfbW9kdWxlcy8nKSk7IC8vIElnbm9yZSBmcmFtZXMgZnJvbSAzcmQgcGFydHkgbGlicmFyaWVzXG5cbiAgcmV0dXJuIGdldENvZGVGcmFtZShmaXJzdENsaWVudENvZGVGcmFtZSk7XG59Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0UsZ0JBQWdCLEdBQUdBLGdCQUFnQjtBQUMzQztBQUNBLElBQUlDLEtBQUssR0FBRyxJQUFJO0FBQ2hCLElBQUlDLFlBQVksR0FBRyxJQUFJO0FBQ3ZCLElBQUlDLGdCQUFnQixHQUFHLElBQUk7QUFDM0IsSUFBSTtFQUNGLE1BQU1DLFdBQVcsR0FBR0MsTUFBTSxJQUFJQSxNQUFNLENBQUNDLE9BQU87RUFDNUNKLFlBQVksR0FBR0UsV0FBVyxDQUFDRyxJQUFJLENBQUNGLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQ0gsWUFBWTtFQUMxREMsZ0JBQWdCLEdBQUdDLFdBQVcsQ0FBQ0csSUFBSSxDQUFDRixNQUFNLEVBQUUsbUJBQW1CLENBQUMsQ0FBQ0YsZ0JBQWdCO0VBQ2pGRixLQUFLLEdBQUdHLFdBQVcsQ0FBQ0csSUFBSSxDQUFDRixNQUFNLEVBQUUsT0FBTyxDQUFDO0FBQzNDLENBQUMsQ0FBQyxNQUFNO0VBQ047QUFBQTs7QUFHRjtBQUNBLFNBQVNHLFlBQVlBLENBQUNDLEtBQUssRUFBRTtFQUMzQixNQUFNQyxhQUFhLEdBQUdELEtBQUssQ0FBQ0UsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7RUFDNUMsTUFBTUMsV0FBVyxHQUFHSCxLQUFLLENBQUNFLE9BQU8sQ0FBQyxHQUFHLENBQUM7RUFDdEMsTUFBTUUsYUFBYSxHQUFHSixLQUFLLENBQUNLLEtBQUssQ0FBQ0osYUFBYSxFQUFFRSxXQUFXLENBQUM7RUFDN0QsTUFBTUcscUJBQXFCLEdBQUdGLGFBQWEsQ0FBQ0csS0FBSyxDQUFDLEdBQUcsQ0FBQztFQUN0RCxNQUFNLENBQUNDLFFBQVEsRUFBRUMsSUFBSSxFQUFFQyxNQUFNLENBQUMsR0FBRyxDQUFDSixxQkFBcUIsQ0FBQyxDQUFDLENBQUMsRUFBRUssUUFBUSxDQUFDTCxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRUssUUFBUSxDQUFDTCxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztFQUMzSSxJQUFJTSxlQUFlLEdBQUcsRUFBRTtFQUN4QixJQUFJO0lBQ0ZBLGVBQWUsR0FBR25CLFlBQVksQ0FBQ2UsUUFBUSxFQUFFLE9BQU8sQ0FBQztFQUNuRCxDQUFDLENBQUMsTUFBTTtJQUNOLE9BQU8sRUFBRTtFQUNYO0VBQ0EsTUFBTUssU0FBUyxHQUFHbkIsZ0JBQWdCLENBQUNrQixlQUFlLEVBQUU7SUFDbERFLEtBQUssRUFBRTtNQUNMTCxJQUFJO01BQ0pDO0lBQ0Y7RUFDRixDQUFDLEVBQUU7SUFDREssYUFBYSxFQUFFLElBQUk7SUFDbkJDLFVBQVUsRUFBRTtFQUNkLENBQUMsQ0FBQztFQUNGLE9BQU8sR0FBR3hCLEtBQUssQ0FBQ3lCLEdBQUcsQ0FBQ2IsYUFBYSxDQUFDLEtBQUtTLFNBQVMsSUFBSTtBQUN0RDtBQUNBLFNBQVN0QixnQkFBZ0JBLENBQUEsRUFBRztFQUMxQjtFQUNBO0VBQ0EsSUFBSSxDQUFDRSxZQUFZLElBQUksQ0FBQ0MsZ0JBQWdCLEVBQUU7SUFDdEMsT0FBTyxFQUFFO0VBQ1g7RUFDQSxNQUFNd0IsR0FBRyxHQUFHLElBQUlDLEtBQUssQ0FBQyxDQUFDO0VBQ3ZCLE1BQU1DLG9CQUFvQixHQUFHRixHQUFHLENBQUNHLEtBQUssQ0FBQ2QsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDRixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFBQSxDQUMzRGlCLElBQUksQ0FBQ3RCLEtBQUssSUFBSSxDQUFDQSxLQUFLLENBQUN1QixRQUFRLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDOztFQUVsRCxPQUFPeEIsWUFBWSxDQUFDcUIsb0JBQW9CLENBQUM7QUFDM0MiLCJpZ25vcmVMaXN0IjpbXX0=