c7b5ca7327ddf73b088e052ddaf9e8e9
'use strict';

var FileList = require('./FileList.js');
function _define_property(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
// DataTransfer is not implemented in jsdom.
// DataTransfer with FileList is being created by the browser on certain events.
class DataTransferItemStub {
  getAsFile() {
    return this.file;
  }
  getAsString(callback) {
    if (typeof this.data === 'string') {
      callback(this.data);
    }
  }
  /* istanbul ignore next */
  webkitGetAsEntry() {
    throw new Error('not implemented');
  }
  constructor(dataOrFile, type) {
    _define_property(this, "kind", undefined);
    _define_property(this, "type", undefined);
    _define_property(this, "file", null);
    _define_property(this, "data", undefined);
    if (typeof dataOrFile === 'string') {
      this.kind = 'string';
      this.type = String(type);
      this.data = dataOrFile;
    } else {
      this.kind = 'file';
      this.type = dataOrFile.type;
      this.file = dataOrFile;
    }
  }
}
class DataTransferItemListStub extends Array {
  add(...args) {
    const item = new DataTransferItemStub(args[0], args[1]);
    this.push(item);
    return item;
  }
  clear() {
    this.splice(0, this.length);
  }
  remove(index) {
    this.splice(index, 1);
  }
}
function getTypeMatcher(type, exact) {
  const [group, sub] = type.split('/');
  const isGroup = !sub || sub === '*';
  return item => {
    return exact ? item.type === (isGroup ? group : type) : isGroup ? item.type.startsWith(`${group}/`) : item.type === group;
  };
}
function createDataTransferStub(window) {
  return new class DataTransferStub {
    getData(format) {
      var _this_items_find;
      const match = (_this_items_find = this.items.find(getTypeMatcher(format, true))) !== null && _this_items_find !== undefined ? _this_items_find : this.items.find(getTypeMatcher(format, false));
      let text = '';
      match === null || match === undefined ? undefined : match.getAsString(t => {
        text = t;
      });
      return text;
    }
    setData(format, data) {
      const matchIndex = this.items.findIndex(getTypeMatcher(format, true));
      const item = new DataTransferItemStub(data, format);
      if (matchIndex >= 0) {
        this.items.splice(matchIndex, 1, item);
      } else {
        this.items.push(item);
      }
    }
    clearData(format) {
      if (format) {
        const matchIndex = this.items.findIndex(getTypeMatcher(format, true));
        if (matchIndex >= 0) {
          this.items.remove(matchIndex);
        }
      } else {
        this.items.clear();
      }
    }
    get types() {
      const t = [];
      if (this.files.length) {
        t.push('Files');
      }
      this.items.forEach(i => t.push(i.type));
      Object.freeze(t);
      return t;
    }
    /* istanbul ignore next */
    setDragImage() {}
    constructor() {
      _define_property(this, "dropEffect", 'none');
      _define_property(this, "effectAllowed", 'uninitialized');
      _define_property(this, "items", new DataTransferItemListStub());
      _define_property(this, "files", FileList.createFileList(window, []));
    }
  }();
}
function createDataTransfer(window, files = []) {
  // Use real DataTransfer if available
  const dt = typeof window.DataTransfer === 'undefined' ? createDataTransferStub(window) : /* istanbul ignore next */new window.DataTransfer();
  Object.defineProperty(dt, 'files', {
    get: () => FileList.createFileList(window, files)
  });
  return dt;
}
async function getBlobFromDataTransferItem(window, item) {
  if (item.kind === 'file') {
    return item.getAsFile();
  }
  return new window.Blob([await new Promise(r => item.getAsString(r))], {
    type: item.type
  });
}
exports.createDataTransfer = createDataTransfer;
exports.getBlobFromDataTransferItem = getBlobFromDataTransferItem;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJGaWxlTGlzdCIsInJlcXVpcmUiLCJfZGVmaW5lX3Byb3BlcnR5Iiwib2JqIiwia2V5IiwidmFsdWUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIkRhdGFUcmFuc2Zlckl0ZW1TdHViIiwiZ2V0QXNGaWxlIiwiZmlsZSIsImdldEFzU3RyaW5nIiwiY2FsbGJhY2siLCJkYXRhIiwid2Via2l0R2V0QXNFbnRyeSIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJkYXRhT3JGaWxlIiwidHlwZSIsInVuZGVmaW5lZCIsImtpbmQiLCJTdHJpbmciLCJEYXRhVHJhbnNmZXJJdGVtTGlzdFN0dWIiLCJBcnJheSIsImFkZCIsImFyZ3MiLCJpdGVtIiwicHVzaCIsImNsZWFyIiwic3BsaWNlIiwibGVuZ3RoIiwicmVtb3ZlIiwiaW5kZXgiLCJnZXRUeXBlTWF0Y2hlciIsImV4YWN0IiwiZ3JvdXAiLCJzdWIiLCJzcGxpdCIsImlzR3JvdXAiLCJzdGFydHNXaXRoIiwiY3JlYXRlRGF0YVRyYW5zZmVyU3R1YiIsIndpbmRvdyIsIkRhdGFUcmFuc2ZlclN0dWIiLCJnZXREYXRhIiwiZm9ybWF0IiwiX3RoaXNfaXRlbXNfZmluZCIsIm1hdGNoIiwiaXRlbXMiLCJmaW5kIiwidGV4dCIsInQiLCJzZXREYXRhIiwibWF0Y2hJbmRleCIsImZpbmRJbmRleCIsImNsZWFyRGF0YSIsInR5cGVzIiwiZmlsZXMiLCJmb3JFYWNoIiwiaSIsImZyZWV6ZSIsInNldERyYWdJbWFnZSIsImNyZWF0ZUZpbGVMaXN0IiwiY3JlYXRlRGF0YVRyYW5zZmVyIiwiZHQiLCJEYXRhVHJhbnNmZXIiLCJnZXQiLCJnZXRCbG9iRnJvbURhdGFUcmFuc2Zlckl0ZW0iLCJCbG9iIiwiUHJvbWlzZSIsInIiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiRGF0YVRyYW5zZmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIEZpbGVMaXN0ID0gcmVxdWlyZSgnLi9GaWxlTGlzdC5qcycpO1xuXG5mdW5jdGlvbiBfZGVmaW5lX3Byb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG9ialtrZXldID0gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG59XG4vLyBEYXRhVHJhbnNmZXIgaXMgbm90IGltcGxlbWVudGVkIGluIGpzZG9tLlxuLy8gRGF0YVRyYW5zZmVyIHdpdGggRmlsZUxpc3QgaXMgYmVpbmcgY3JlYXRlZCBieSB0aGUgYnJvd3NlciBvbiBjZXJ0YWluIGV2ZW50cy5cbmNsYXNzIERhdGFUcmFuc2Zlckl0ZW1TdHViIHtcbiAgICBnZXRBc0ZpbGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbGU7XG4gICAgfVxuICAgIGdldEFzU3RyaW5nKGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5kYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY2FsbGJhY2sodGhpcy5kYXRhKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyB3ZWJraXRHZXRBc0VudHJ5KCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBpbXBsZW1lbnRlZCcpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihkYXRhT3JGaWxlLCB0eXBlKXtcbiAgICAgICAgX2RlZmluZV9wcm9wZXJ0eSh0aGlzLCBcImtpbmRcIiwgdW5kZWZpbmVkKTtcbiAgICAgICAgX2RlZmluZV9wcm9wZXJ0eSh0aGlzLCBcInR5cGVcIiwgdW5kZWZpbmVkKTtcbiAgICAgICAgX2RlZmluZV9wcm9wZXJ0eSh0aGlzLCBcImZpbGVcIiwgbnVsbCk7XG4gICAgICAgIF9kZWZpbmVfcHJvcGVydHkodGhpcywgXCJkYXRhXCIsIHVuZGVmaW5lZCk7XG4gICAgICAgIGlmICh0eXBlb2YgZGF0YU9yRmlsZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRoaXMua2luZCA9ICdzdHJpbmcnO1xuICAgICAgICAgICAgdGhpcy50eXBlID0gU3RyaW5nKHR5cGUpO1xuICAgICAgICAgICAgdGhpcy5kYXRhID0gZGF0YU9yRmlsZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMua2luZCA9ICdmaWxlJztcbiAgICAgICAgICAgIHRoaXMudHlwZSA9IGRhdGFPckZpbGUudHlwZTtcbiAgICAgICAgICAgIHRoaXMuZmlsZSA9IGRhdGFPckZpbGU7XG4gICAgICAgIH1cbiAgICB9XG59XG5jbGFzcyBEYXRhVHJhbnNmZXJJdGVtTGlzdFN0dWIgZXh0ZW5kcyBBcnJheSB7XG4gICAgYWRkKC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IG5ldyBEYXRhVHJhbnNmZXJJdGVtU3R1YihhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgdGhpcy5wdXNoKGl0ZW0pO1xuICAgICAgICByZXR1cm4gaXRlbTtcbiAgICB9XG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMuc3BsaWNlKDAsIHRoaXMubGVuZ3RoKTtcbiAgICB9XG4gICAgcmVtb3ZlKGluZGV4KSB7XG4gICAgICAgIHRoaXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRUeXBlTWF0Y2hlcih0eXBlLCBleGFjdCkge1xuICAgIGNvbnN0IFtncm91cCwgc3ViXSA9IHR5cGUuc3BsaXQoJy8nKTtcbiAgICBjb25zdCBpc0dyb3VwID0gIXN1YiB8fCBzdWIgPT09ICcqJztcbiAgICByZXR1cm4gKGl0ZW0pPT57XG4gICAgICAgIHJldHVybiBleGFjdCA/IGl0ZW0udHlwZSA9PT0gKGlzR3JvdXAgPyBncm91cCA6IHR5cGUpIDogaXNHcm91cCA/IGl0ZW0udHlwZS5zdGFydHNXaXRoKGAke2dyb3VwfS9gKSA6IGl0ZW0udHlwZSA9PT0gZ3JvdXA7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZURhdGFUcmFuc2ZlclN0dWIod2luZG93KSB7XG4gICAgcmV0dXJuIG5ldyBjbGFzcyBEYXRhVHJhbnNmZXJTdHViIHtcbiAgICAgICAgZ2V0RGF0YShmb3JtYXQpIHtcbiAgICAgICAgICAgIHZhciBfdGhpc19pdGVtc19maW5kO1xuICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSAoX3RoaXNfaXRlbXNfZmluZCA9IHRoaXMuaXRlbXMuZmluZChnZXRUeXBlTWF0Y2hlcihmb3JtYXQsIHRydWUpKSkgIT09IG51bGwgJiYgX3RoaXNfaXRlbXNfZmluZCAhPT0gdW5kZWZpbmVkID8gX3RoaXNfaXRlbXNfZmluZCA6IHRoaXMuaXRlbXMuZmluZChnZXRUeXBlTWF0Y2hlcihmb3JtYXQsIGZhbHNlKSk7XG4gICAgICAgICAgICBsZXQgdGV4dCA9ICcnO1xuICAgICAgICAgICAgbWF0Y2ggPT09IG51bGwgfHwgbWF0Y2ggPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IG1hdGNoLmdldEFzU3RyaW5nKCh0KT0+e1xuICAgICAgICAgICAgICAgIHRleHQgPSB0O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdGV4dDtcbiAgICAgICAgfVxuICAgICAgICBzZXREYXRhKGZvcm1hdCwgZGF0YSkge1xuICAgICAgICAgICAgY29uc3QgbWF0Y2hJbmRleCA9IHRoaXMuaXRlbXMuZmluZEluZGV4KGdldFR5cGVNYXRjaGVyKGZvcm1hdCwgdHJ1ZSkpO1xuICAgICAgICAgICAgY29uc3QgaXRlbSA9IG5ldyBEYXRhVHJhbnNmZXJJdGVtU3R1YihkYXRhLCBmb3JtYXQpO1xuICAgICAgICAgICAgaWYgKG1hdGNoSW5kZXggPj0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaXRlbXMuc3BsaWNlKG1hdGNoSW5kZXgsIDEsIGl0ZW0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1zLnB1c2goaXRlbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2xlYXJEYXRhKGZvcm1hdCkge1xuICAgICAgICAgICAgaWYgKGZvcm1hdCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoSW5kZXggPSB0aGlzLml0ZW1zLmZpbmRJbmRleChnZXRUeXBlTWF0Y2hlcihmb3JtYXQsIHRydWUpKTtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2hJbmRleCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXRlbXMucmVtb3ZlKG1hdGNoSW5kZXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtcy5jbGVhcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGdldCB0eXBlcygpIHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSBbXTtcbiAgICAgICAgICAgIGlmICh0aGlzLmZpbGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHQucHVzaCgnRmlsZXMnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuaXRlbXMuZm9yRWFjaCgoaSk9PnQucHVzaChpLnR5cGUpKTtcbiAgICAgICAgICAgIE9iamVjdC5mcmVlemUodCk7XG4gICAgICAgICAgICByZXR1cm4gdDtcbiAgICAgICAgfVxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyBzZXREcmFnSW1hZ2UoKSB7fVxuICAgICAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICAgICAgX2RlZmluZV9wcm9wZXJ0eSh0aGlzLCBcImRyb3BFZmZlY3RcIiwgJ25vbmUnKTtcbiAgICAgICAgICAgIF9kZWZpbmVfcHJvcGVydHkodGhpcywgXCJlZmZlY3RBbGxvd2VkXCIsICd1bmluaXRpYWxpemVkJyk7XG4gICAgICAgICAgICBfZGVmaW5lX3Byb3BlcnR5KHRoaXMsIFwiaXRlbXNcIiwgbmV3IERhdGFUcmFuc2Zlckl0ZW1MaXN0U3R1YigpKTtcbiAgICAgICAgICAgIF9kZWZpbmVfcHJvcGVydHkodGhpcywgXCJmaWxlc1wiLCBGaWxlTGlzdC5jcmVhdGVGaWxlTGlzdCh3aW5kb3csIFtdKSk7XG4gICAgICAgIH1cbiAgICB9KCk7XG59XG5mdW5jdGlvbiBjcmVhdGVEYXRhVHJhbnNmZXIod2luZG93LCBmaWxlcyA9IFtdKSB7XG4gICAgLy8gVXNlIHJlYWwgRGF0YVRyYW5zZmVyIGlmIGF2YWlsYWJsZVxuICAgIGNvbnN0IGR0ID0gdHlwZW9mIHdpbmRvdy5EYXRhVHJhbnNmZXIgPT09ICd1bmRlZmluZWQnID8gY3JlYXRlRGF0YVRyYW5zZmVyU3R1Yih3aW5kb3cpIDogLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gbmV3IHdpbmRvdy5EYXRhVHJhbnNmZXIoKTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZHQsICdmaWxlcycsIHtcbiAgICAgICAgZ2V0OiAoKT0+RmlsZUxpc3QuY3JlYXRlRmlsZUxpc3Qod2luZG93LCBmaWxlcylcbiAgICB9KTtcbiAgICByZXR1cm4gZHQ7XG59XG5hc3luYyBmdW5jdGlvbiBnZXRCbG9iRnJvbURhdGFUcmFuc2Zlckl0ZW0od2luZG93LCBpdGVtKSB7XG4gICAgaWYgKGl0ZW0ua2luZCA9PT0gJ2ZpbGUnKSB7XG4gICAgICAgIHJldHVybiBpdGVtLmdldEFzRmlsZSgpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IHdpbmRvdy5CbG9iKFtcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHIpPT5pdGVtLmdldEFzU3RyaW5nKHIpKVxuICAgIF0sIHtcbiAgICAgICAgdHlwZTogaXRlbS50eXBlXG4gICAgfSk7XG59XG5cbmV4cG9ydHMuY3JlYXRlRGF0YVRyYW5zZmVyID0gY3JlYXRlRGF0YVRyYW5zZmVyO1xuZXhwb3J0cy5nZXRCbG9iRnJvbURhdGFUcmFuc2Zlckl0ZW0gPSBnZXRCbG9iRnJvbURhdGFUcmFuc2Zlckl0ZW07XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVosSUFBSUEsUUFBUSxHQUFHQyxPQUFPLENBQUMsZUFBZSxDQUFDO0FBRXZDLFNBQVNDLGdCQUFnQkEsQ0FBQ0MsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLEtBQUssRUFBRTtFQUN2QyxJQUFJRCxHQUFHLElBQUlELEdBQUcsRUFBRTtJQUNaRyxNQUFNLENBQUNDLGNBQWMsQ0FBQ0osR0FBRyxFQUFFQyxHQUFHLEVBQUU7TUFDNUJDLEtBQUssRUFBRUEsS0FBSztNQUNaRyxVQUFVLEVBQUUsSUFBSTtNQUNoQkMsWUFBWSxFQUFFLElBQUk7TUFDbEJDLFFBQVEsRUFBRTtJQUNkLENBQUMsQ0FBQztFQUNOLENBQUMsTUFBTTtJQUNIUCxHQUFHLENBQUNDLEdBQUcsQ0FBQyxHQUFHQyxLQUFLO0VBQ3BCO0VBQ0EsT0FBT0YsR0FBRztBQUNkO0FBQ0E7QUFDQTtBQUNBLE1BQU1RLG9CQUFvQixDQUFDO0VBQ3ZCQyxTQUFTQSxDQUFBLEVBQUc7SUFDUixPQUFPLElBQUksQ0FBQ0MsSUFBSTtFQUNwQjtFQUNBQyxXQUFXQSxDQUFDQyxRQUFRLEVBQUU7SUFDbEIsSUFBSSxPQUFPLElBQUksQ0FBQ0MsSUFBSSxLQUFLLFFBQVEsRUFBRTtNQUMvQkQsUUFBUSxDQUFDLElBQUksQ0FBQ0MsSUFBSSxDQUFDO0lBQ3ZCO0VBQ0o7RUFDQTtFQUEyQkMsZ0JBQWdCQSxDQUFBLEVBQUc7SUFDMUMsTUFBTSxJQUFJQyxLQUFLLENBQUMsaUJBQWlCLENBQUM7RUFDdEM7RUFDQUMsV0FBV0EsQ0FBQ0MsVUFBVSxFQUFFQyxJQUFJLEVBQUM7SUFDekJuQixnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFb0IsU0FBUyxDQUFDO0lBQ3pDcEIsZ0JB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QUFDVCxDQUFDLENBQUM7TUFDaEIsT0FBT0EsQ0FBQztJQUNaO0lBQ0E7SUFBMkJVLFlBQVlBLENBQUEsRUFBRyxDQUFDO0lBQzNDNUMsV0FBV0EsQ0FBQSxFQUFFO01BQ1RqQixnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsWUFBWSxFQUFFLE1BQU0sQ0FBQztNQUM1Q0EsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLGVBQWUsRUFBRSxlQUFlLENBQUM7TUFDeERBLGdCQUFnQixDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSXVCLHdCQUF3QixDQUFDLENBQUMsQ0FBQztNQUMvRHZCLGdCQUFnQixDQUFDLElBQUksRUFBRSxPQUFPLEVBQUVGLFFBQVEsQ0FBQ2dFLGNBQWMsQ0FBQ3BCLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN4RTtFQUNKLENBQUMsQ0FBQyxDQUFDO0FBQ1A7QUFDQSxTQUFTcUIsa0JBQWtCQSxDQUFDckIsTUFBTSxFQUFFZSxLQUFLLEdBQUcsRUFBRSxFQUFFO0VBQzVDO0VBQ0EsTUFBTU8sRUFBRSxHQUFHLE9BQU90QixNQUFNLENBQUN1QixZQUFZLEtBQUssV0FBVyxHQUFHeEIsc0JBQXNCLENBQUNDLE1BQU0sQ0FBQyxHQUFHLDBCQUEyQixJQUFJQSxNQUFNLENBQUN1QixZQUFZLENBQUMsQ0FBQztFQUM3STdELE1BQU0sQ0FBQ0MsY0FBYyxDQUFDMkQsRUFBRSxFQUFFLE9BQU8sRUFBRTtJQUMvQkUsR0FBRyxFQUFFQSxDQUFBLEtBQUlwRSxRQUFRLENBQUNnRSxjQUFjLENBQUNwQixNQUFNLEVBQUVlLEtBQUs7RUFDbEQsQ0FBQyxDQUFDO0VBQ0YsT0FBT08sRUFBRTtBQUNiO0FBQ0EsZUFBZUcsMkJBQTJCQSxDQUFDekIsTUFBTSxFQUFFZixJQUFJLEVBQUU7RUFDckQsSUFBSUEsSUFBSSxDQUFDTixJQUFJLEtBQUssTUFBTSxFQUFFO0lBQ3RCLE9BQU9NLElBQUksQ0FBQ2pCLFNBQVMsQ0FBQyxDQUFDO0VBQzNCO0VBQ0EsT0FBTyxJQUFJZ0MsTUFBTSxDQUFDMEIsSUFBSSxDQUFDLENBQ25CLE1BQU0sSUFBSUMsT0FBTyxDQUFFQyxDQUFDLElBQUczQyxJQUFJLENBQUNmLFdBQVcsQ0FBQzBELENBQUMsQ0FBQyxDQUFDLENBQzlDLEVBQUU7SUFDQ25ELElBQUksRUFBRVEsSUFBSSxDQUFDUjtFQUNmLENBQUMsQ0FBQztBQUNOO0FBRUFvRCxPQUFPLENBQUNSLGtCQUFrQixHQUFHQSxrQkFBa0I7QUFDL0NRLE9BQU8sQ0FBQ0osMkJBQTJCLEdBQUdBLDJCQUEyQiIsImlnbm9yZUxpc3QiOltdfQ==