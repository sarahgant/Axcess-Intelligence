b11be09c925919a909743053fabb1497
'use strict';

var UI = require('../../document/UI.js');
require('../../utils/dataTransfer/Clipboard.js');
var resolveCaretPosition = require('./resolveCaretPosition.js');
function modifySelectionPerMouseMove(selectionRange, {
  document,
  target,
  node,
  offset
}) {
  const selectionFocus = resolveCaretPosition.resolveCaretPosition({
    target,
    node,
    offset
  });
  if ('node' in selectionRange) {
    // When the mouse is dragged outside of an input/textarea,
    // the selection is extended to the beginning or end of the input
    // depending on pointer position.
    // TODO: extend selection according to pointer position
    /* istanbul ignore else */
    if (selectionFocus.node === selectionRange.node) {
      const anchorOffset = selectionFocus.offset < selectionRange.start ? selectionRange.end : selectionRange.start;
      const focusOffset = selectionFocus.offset > selectionRange.end || selectionFocus.offset < selectionRange.start ? selectionFocus.offset : selectionRange.end;
      UI.setUISelection(selectionRange.node, {
        anchorOffset,
        focusOffset
      });
    }
  } else {
    const range = selectionRange.cloneRange();
    const cmp = range.comparePoint(selectionFocus.node, selectionFocus.offset);
    if (cmp < 0) {
      range.setStart(selectionFocus.node, selectionFocus.offset);
    } else if (cmp > 0) {
      range.setEnd(selectionFocus.node, selectionFocus.offset);
    }
    const selection = document.getSelection();
    selection === null || selection === undefined ? undefined : selection.removeAllRanges();
    selection === null || selection === undefined ? undefined : selection.addRange(range.cloneRange());
  }
}
exports.modifySelectionPerMouseMove = modifySelectionPerMouseMove;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVSSIsInJlcXVpcmUiLCJyZXNvbHZlQ2FyZXRQb3NpdGlvbiIsIm1vZGlmeVNlbGVjdGlvblBlck1vdXNlTW92ZSIsInNlbGVjdGlvblJhbmdlIiwiZG9jdW1lbnQiLCJ0YXJnZXQiLCJub2RlIiwib2Zmc2V0Iiwic2VsZWN0aW9uRm9jdXMiLCJhbmNob3JPZmZzZXQiLCJzdGFydCIsImVuZCIsImZvY3VzT2Zmc2V0Iiwic2V0VUlTZWxlY3Rpb24iLCJyYW5nZSIsImNsb25lUmFuZ2UiLCJjbXAiLCJjb21wYXJlUG9pbnQiLCJzZXRTdGFydCIsInNldEVuZCIsInNlbGVjdGlvbiIsImdldFNlbGVjdGlvbiIsInVuZGVmaW5lZCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIm1vZGlmeVNlbGVjdGlvblBlck1vdXNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIFVJID0gcmVxdWlyZSgnLi4vLi4vZG9jdW1lbnQvVUkuanMnKTtcbnJlcXVpcmUoJy4uLy4uL3V0aWxzL2RhdGFUcmFuc2Zlci9DbGlwYm9hcmQuanMnKTtcbnZhciByZXNvbHZlQ2FyZXRQb3NpdGlvbiA9IHJlcXVpcmUoJy4vcmVzb2x2ZUNhcmV0UG9zaXRpb24uanMnKTtcblxuZnVuY3Rpb24gbW9kaWZ5U2VsZWN0aW9uUGVyTW91c2VNb3ZlKHNlbGVjdGlvblJhbmdlLCB7IGRvY3VtZW50LCB0YXJnZXQsIG5vZGUsIG9mZnNldCB9KSB7XG4gICAgY29uc3Qgc2VsZWN0aW9uRm9jdXMgPSByZXNvbHZlQ2FyZXRQb3NpdGlvbi5yZXNvbHZlQ2FyZXRQb3NpdGlvbih7XG4gICAgICAgIHRhcmdldCxcbiAgICAgICAgbm9kZSxcbiAgICAgICAgb2Zmc2V0XG4gICAgfSk7XG4gICAgaWYgKCdub2RlJyBpbiBzZWxlY3Rpb25SYW5nZSkge1xuICAgICAgICAvLyBXaGVuIHRoZSBtb3VzZSBpcyBkcmFnZ2VkIG91dHNpZGUgb2YgYW4gaW5wdXQvdGV4dGFyZWEsXG4gICAgICAgIC8vIHRoZSBzZWxlY3Rpb24gaXMgZXh0ZW5kZWQgdG8gdGhlIGJlZ2lubmluZyBvciBlbmQgb2YgdGhlIGlucHV0XG4gICAgICAgIC8vIGRlcGVuZGluZyBvbiBwb2ludGVyIHBvc2l0aW9uLlxuICAgICAgICAvLyBUT0RPOiBleHRlbmQgc2VsZWN0aW9uIGFjY29yZGluZyB0byBwb2ludGVyIHBvc2l0aW9uXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovIGlmIChzZWxlY3Rpb25Gb2N1cy5ub2RlID09PSBzZWxlY3Rpb25SYW5nZS5ub2RlKSB7XG4gICAgICAgICAgICBjb25zdCBhbmNob3JPZmZzZXQgPSBzZWxlY3Rpb25Gb2N1cy5vZmZzZXQgPCBzZWxlY3Rpb25SYW5nZS5zdGFydCA/IHNlbGVjdGlvblJhbmdlLmVuZCA6IHNlbGVjdGlvblJhbmdlLnN0YXJ0O1xuICAgICAgICAgICAgY29uc3QgZm9jdXNPZmZzZXQgPSBzZWxlY3Rpb25Gb2N1cy5vZmZzZXQgPiBzZWxlY3Rpb25SYW5nZS5lbmQgfHwgc2VsZWN0aW9uRm9jdXMub2Zmc2V0IDwgc2VsZWN0aW9uUmFuZ2Uuc3RhcnQgPyBzZWxlY3Rpb25Gb2N1cy5vZmZzZXQgOiBzZWxlY3Rpb25SYW5nZS5lbmQ7XG4gICAgICAgICAgICBVSS5zZXRVSVNlbGVjdGlvbihzZWxlY3Rpb25SYW5nZS5ub2RlLCB7XG4gICAgICAgICAgICAgICAgYW5jaG9yT2Zmc2V0LFxuICAgICAgICAgICAgICAgIGZvY3VzT2Zmc2V0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHJhbmdlID0gc2VsZWN0aW9uUmFuZ2UuY2xvbmVSYW5nZSgpO1xuICAgICAgICBjb25zdCBjbXAgPSByYW5nZS5jb21wYXJlUG9pbnQoc2VsZWN0aW9uRm9jdXMubm9kZSwgc2VsZWN0aW9uRm9jdXMub2Zmc2V0KTtcbiAgICAgICAgaWYgKGNtcCA8IDApIHtcbiAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0KHNlbGVjdGlvbkZvY3VzLm5vZGUsIHNlbGVjdGlvbkZvY3VzLm9mZnNldCk7XG4gICAgICAgIH0gZWxzZSBpZiAoY21wID4gMCkge1xuICAgICAgICAgICAgcmFuZ2Uuc2V0RW5kKHNlbGVjdGlvbkZvY3VzLm5vZGUsIHNlbGVjdGlvbkZvY3VzLm9mZnNldCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2VsZWN0aW9uID0gZG9jdW1lbnQuZ2V0U2VsZWN0aW9uKCk7XG4gICAgICAgIHNlbGVjdGlvbiA9PT0gbnVsbCB8fCBzZWxlY3Rpb24gPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlbGVjdGlvbi5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICAgICAgc2VsZWN0aW9uID09PSBudWxsIHx8IHNlbGVjdGlvbiA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VsZWN0aW9uLmFkZFJhbmdlKHJhbmdlLmNsb25lUmFuZ2UoKSk7XG4gICAgfVxufVxuXG5leHBvcnRzLm1vZGlmeVNlbGVjdGlvblBlck1vdXNlTW92ZSA9IG1vZGlmeVNlbGVjdGlvblBlck1vdXNlTW92ZTtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWixJQUFJQSxFQUFFLEdBQUdDLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQztBQUN4Q0EsT0FBTyxDQUFDLHVDQUF1QyxDQUFDO0FBQ2hELElBQUlDLG9CQUFvQixHQUFHRCxPQUFPLENBQUMsMkJBQTJCLENBQUM7QUFFL0QsU0FBU0UsMkJBQTJCQSxDQUFDQyxjQUFjLEVBQUU7RUFBRUMsUUFBUTtFQUFFQyxNQUFNO0VBQUVDLElBQUk7RUFBRUM7QUFBTyxDQUFDLEVBQUU7RUFDckYsTUFBTUMsY0FBYyxHQUFHUCxvQkFBb0IsQ0FBQ0Esb0JBQW9CLENBQUM7SUFDN0RJLE1BQU07SUFDTkMsSUFBSTtJQUNKQztFQUNKLENBQUMsQ0FBQztFQUNGLElBQUksTUFBTSxJQUFJSixjQUFjLEVBQUU7SUFDMUI7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUEyQixJQUFJSyxjQUFjLENBQUNGLElBQUksS0FBS0gsY0FBYyxDQUFDRyxJQUFJLEVBQUU7TUFDeEUsTUFBTUcsWUFBWSxHQUFHRCxjQUFjLENBQUNELE1BQU0sR0FBR0osY0FBYyxDQUFDTyxLQUFLLEdBQUdQLGNBQWMsQ0FBQ1EsR0FBRyxHQUFHUixjQUFjLENBQUNPLEtBQUs7TUFDN0csTUFBTUUsV0FBVyxHQUFHSixjQUFjLENBQUNELE1BQU0sR0FBR0osY0FBYyxDQUFDUSxHQUFHLElBQUlILGNBQWMsQ0FBQ0QsTUFBTSxHQUFHSixjQUFjLENBQUNPLEtBQUssR0FBR0YsY0FBYyxDQUFDRCxNQUFNLEdBQUdKLGNBQWMsQ0FBQ1EsR0FBRztNQUMzSlosRUFBRSxDQUFDYyxjQUFjLENBQUNWLGNBQWMsQ0FBQ0csSUFBSSxFQUFFO1FBQ25DRyxZQUFZO1FBQ1pHO01BQ0osQ0FBQyxDQUFDO0lBQ047RUFDSixDQUFDLE1BQU07SUFDSCxNQUFNRSxLQUFLLEdBQUdYLGNBQWMsQ0FBQ1ksVUFBVSxDQUFDLENBQUM7SUFDekMsTUFBTUMsR0FBRyxHQUFHRixLQUFLLENBQUNHLFlBQVksQ0FBQ1QsY0FBYyxDQUFDRixJQUFJLEVBQUVFLGNBQWMsQ0FBQ0QsTUFBTSxDQUFDO0lBQzFFLElBQUlTLEdBQUcsR0FBRyxDQUFDLEVBQUU7TUFDVEYsS0FBSyxDQUFDSSxRQUFRLENBQUNWLGNBQWMsQ0FBQ0YsSUFBSSxFQUFFRSxjQUFjLENBQUNELE1BQU0sQ0FBQztJQUM5RCxDQUFDLE1BQU0sSUFBSVMsR0FBRyxHQUFHLENBQUMsRUFBRTtNQUNoQkYsS0FBSyxDQUFDSyxNQUFNLENBQUNYLGNBQWMsQ0FBQ0YsSUFBSSxFQUFFRSxjQUFjLENBQUNELE1BQU0sQ0FBQztJQUM1RDtJQUNBLE1BQU1hLFNBQVMsR0FBR2hCLFFBQVEsQ0FBQ2lCLFlBQVksQ0FBQyxDQUFDO0lBQ3pDRCxTQUFTLEtBQUssSUFBSSxJQUFJQSxTQUFTLEtBQUtFLFNBQVMsR0FBR0EsU0FBUyxHQUFHRixTQUFTLENBQUNHLGVBQWUsQ0FBQyxDQUFDO0lBQ3ZGSCxTQUFTLEtBQUssSUFBSSxJQUFJQSxTQUFTLEtBQUtFLFNBQVMsR0FBR0EsU0FBUyxHQUFHRixTQUFTLENBQUNJLFFBQVEsQ0FBQ1YsS0FBSyxDQUFDQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0VBQ3RHO0FBQ0o7QUFFQVUsT0FBTyxDQUFDdkIsMkJBQTJCLEdBQUdBLDJCQUEyQiIsImlnbm9yZUxpc3QiOltdfQ==