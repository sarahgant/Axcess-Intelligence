8054b975e5d748da99530b3c8d0b98db
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
const user_event_1 = __importDefault(require("@testing-library/user-event"));
/**
 * Test suite for message functionality features
 * Tests copy, reload/regenerate, and thumbs up/down features
 */
describe("Message Features", () => {
    // Mock clipboard API
    const mockClipboard = {
        writeText: jest.fn(),
    };
    // Mock DOM methods
    const mockExecCommand = jest.fn();
    beforeEach(() => {
        jest.clearAllMocks();
        // Setup DOM container
        document.body.innerHTML = '<div id="root"></div>';
        // Mock clipboard API
        Object.assign(navigator, {
            clipboard: mockClipboard,
        });
        // Mock document.execCommand for fallback
        document.execCommand = mockExecCommand;
        // Mock window.isSecureContext
        Object.defineProperty(window, 'isSecureContext', {
            writable: true,
            value: true,
        });
    });
    afterEach(() => {
        // Clean up DOM
        document.body.innerHTML = '';
    });
    describe("Copy Functionality", () => {
        it("should copy message text using modern clipboard API", async () => {
            const testMessage = "This is a test message";
            mockClipboard.writeText.mockResolvedValue(undefined);
            // Create a simple button that mimics the copy functionality from Home.tsx
            const TestCopyComponent = () => {
                const handleCopy = async () => {
                    try {
                        if (navigator.clipboard && window.isSecureContext) {
                            await navigator.clipboard.writeText(testMessage);
                        }
                    }
                    catch (error) {
                        console.error('Failed to copy text:', error);
                    }
                };
                return ((0, jsx_runtime_1.jsx)("button", { onClick: handleCopy, title: "Copy message", children: "Copy" }));
            };
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestCopyComponent, {}));
            const copyButton = react_2.screen.getByTitle("Copy message");
            await user_event_1.default.click(copyButton);
            expect(mockClipboard.writeText).toHaveBeenCalledWith(testMessage);
        });
        it("should fallback to execCommand when clipboard API is not available", async () => {
            const testMessage = "Test message for fallback";
            // Mock clipboard API as unavailable
            Object.assign(navigator, {
                clipboard: undefined,
            });
            // Mock DOM manipulation
            const mockTextArea = {
                value: '',
                style: { position: '', left: '', top: '' },
                focus: jest.fn(),
                select: jest.fn(),
                remove: jest.fn(),
            };
            const mockCreateElement = jest.fn(() => mockTextArea);
            const mockAppendChild = jest.fn();
            document.createElement = mockCreateElement;
            document.body.appendChild = mockAppendChild;
            mockExecCommand.mockReturnValue(true);
            const TestCopyFallbackComponent = () => {
                const handleCopy = async () => {
                    try {
                        if (navigator.clipboard && window.isSecureContext) {
                            await navigator.clipboard.writeText(testMessage);
                        }
                        else {
                            // Fallback implementation
                            const textArea = document.createElement('textarea');
                            textArea.value = testMessage;
                            textArea.style.position = 'fixed';
                            textArea.style.left = '-999999px';
                            textArea.style.top = '-999999px';
                            document.body.appendChild(textArea);
                            textArea.focus();
                            textArea.select();
                            document.execCommand('copy');
                            textArea.remove();
                        }
                    }
                    catch (error) {
                        console.error('Failed to copy text:', error);
                    }
                };
                return ((0, jsx_runtime_1.jsx)("button", { onClick: handleCopy, title: "Copy message", children: "Copy" }));
            };
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestCopyFallbackComponent, {}));
            const copyButton = react_2.screen.getByTitle("Copy message");
            await user_event_1.default.click(copyButton);
            expect(mockCreateElement).toHaveBeenCalledWith('textarea');
            expect(mockTextArea.value).toBe(testMessage);
            expect(mockExecCommand).toHaveBeenCalledWith('copy');
        });
    });
    describe("Regenerate/Reload Functionality", () => {
        it("should regenerate AI response when reload button is clicked", async () => {
            let messageText = "Original AI response";
            const mockUpdateMessage = jest.fn();
            const mockGenerateResponse = jest.fn(() => "New regenerated response");
            const TestRegenerateComponent = () => {
                const [isLoading, setIsLoading] = react_1.default.useState(false);
                const handleRegenerate = async () => {
                    setIsLoading(true);
                    try {
                        // Simulate API delay
                        await new Promise(resolve => setTimeout(resolve, 100));
                        const newResponse = mockGenerateResponse("user message");
                        mockUpdateMessage("message-id", { text: newResponse, timestamp: new Date() });
                        messageText = newResponse;
                    }
                    catch (error) {
                        console.error('Regeneration failed:', error);
                    }
                    finally {
                        setIsLoading(false);
                    }
                };
                return ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("div", { "data-testid": "message-text", children: messageText }), (0, jsx_runtime_1.jsx)("button", { onClick: handleRegenerate, title: "Regenerate response", disabled: isLoading, children: isLoading ? 'Regenerating...' : 'Regenerate' })] }));
            };
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestRegenerateComponent, {}));
            const regenerateButton = react_2.screen.getByTitle("Regenerate response");
            await user_event_1.default.click(regenerateButton);
            // Wait for async operation
            await (0, react_2.waitFor)(() => {
                expect(mockGenerateResponse).toHaveBeenCalledWith("user message");
                expect(mockUpdateMessage).toHaveBeenCalledWith("message-id", expect.objectContaining({
                    text: "New regenerated response",
                    timestamp: expect.any(Date)
                }));
            });
        });
    });
    describe("Thumbs Up/Down Feedback", () => {
        it("should handle positive feedback (thumbs up)", async () => {
            const mockLogFeedback = jest.fn();
            const TestThumbsUpComponent = () => {
                const handleFeedback = (isPositive) => {
                    mockLogFeedback({
                        messageId: "test-message-id",
                        isPositive,
                        action: isPositive ? 'feedback_positive' : 'feedback_negative'
                    });
                };
                return ((0, jsx_runtime_1.jsx)("button", { onClick: () => handleFeedback(true), title: "Good response", children: "\uD83D\uDC4D" }));
            };
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestThumbsUpComponent, {}));
            const thumbsUpButton = react_2.screen.getByTitle("Good response");
            await user_event_1.default.click(thumbsUpButton);
            expect(mockLogFeedback).toHaveBeenCalledWith({
                messageId: "test-message-id",
                isPositive: true,
                action: 'feedback_positive'
            });
        });
        it("should handle negative feedback (thumbs down)", async () => {
            const mockLogFeedback = jest.fn();
            const mockShowFeedbackModal = jest.fn();
            const TestThumbsDownComponent = () => {
                const handleFeedback = (isPositive) => {
                    mockLogFeedback({
                        messageId: "test-message-id",
                        isPositive,
                        action: isPositive ? 'feedback_positive' : 'feedback_negative'
                    });
                    if (!isPositive) {
                        mockShowFeedbackModal(true);
                    }
                };
                return ((0, jsx_runtime_1.jsx)("button", { onClick: () => handleFeedback(false), title: "Poor response", children: "\uD83D\uDC4E" }));
            };
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestThumbsDownComponent, {}));
            const thumbsDownButton = react_2.screen.getByTitle("Poor response");
            await user_event_1.default.click(thumbsDownButton);
            expect(mockLogFeedback).toHaveBeenCalledWith({
                messageId: "test-message-id",
                isPositive: false,
                action: 'feedback_negative'
            });
            expect(mockShowFeedbackModal).toHaveBeenCalledWith(true);
        });
        it("should provide visual feedback when buttons are clicked", async () => {
            const TestVisualFeedbackComponent = () => {
                const handleClick = (e) => {
                    const button = e.currentTarget;
                    button.style.backgroundColor = '#dcfce7';
                    button.style.transform = 'scale(1.1)';
                    setTimeout(() => {
                        button.style.backgroundColor = '';
                        button.style.transform = '';
                    }, 1000);
                };
                return ((0, jsx_runtime_1.jsx)("button", { onClick: handleClick, "data-testid": "feedback-button", children: "Feedback" }));
            };
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestVisualFeedbackComponent, {}));
            const button = react_2.screen.getByTestId("feedback-button");
            await user_event_1.default.click(button);
            // Check that styles were applied
            expect(button.style.backgroundColor).toBe('rgb(220, 252, 231)');
            expect(button.style.transform).toBe('scale(1.1)');
        });
    });
    describe("Error Handling", () => {
        it("should handle copy failures gracefully", async () => {
            const consoleSpy = jest.spyOn(console, 'error').mockImplementation();
            mockClipboard.writeText.mockRejectedValue(new Error('Clipboard not available'));
            const TestCopyErrorComponent = () => {
                const handleCopy = async () => {
                    try {
                        await navigator.clipboard.writeText("test message");
                    }
                    catch (error) {
                        console.error('Failed to copy text:', error);
                    }
                };
                return ((0, jsx_runtime_1.jsx)("button", { onClick: handleCopy, title: "Copy message", children: "Copy" }));
            };
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestCopyErrorComponent, {}));
            const copyButton = react_2.screen.getByTitle("Copy message");
            await user_event_1.default.click(copyButton);
            expect(consoleSpy).toHaveBeenCalledWith('Failed to copy text:', expect.any(Error));
            consoleSpy.mockRestore();
        });
        it("should handle regeneration failures gracefully", async () => {
            const consoleSpy = jest.spyOn(console, 'error').mockImplementation();
            const mockFailingRegenerate = jest.fn(() => {
                throw new Error('API Error');
            });
            const TestRegenerateErrorComponent = () => {
                const handleRegenerate = async () => {
                    try {
                        await mockFailingRegenerate();
                    }
                    catch (error) {
                        console.error('Regeneration failed:', error);
                    }
                };
                return ((0, jsx_runtime_1.jsx)("button", { onClick: handleRegenerate, title: "Regenerate response", children: "Regenerate" }));
            };
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestRegenerateErrorComponent, {}));
            const regenerateButton = react_2.screen.getByTitle("Regenerate response");
            await user_event_1.default.click(regenerateButton);
            expect(consoleSpy).toHaveBeenCalledWith('Regeneration failed:', expect.any(Error));
            consoleSpy.mockRestore();
        });
    });
    describe("Accessibility", () => {
        it("should have proper ARIA labels for all buttons", () => {
            const TestAccessibilityComponent = () => ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("button", { title: "Copy message", "aria-label": "Copy message to clipboard", children: "Copy" }), (0, jsx_runtime_1.jsx)("button", { title: "Regenerate response", "aria-label": "Regenerate AI response", children: "Regenerate" }), (0, jsx_runtime_1.jsx)("button", { title: "Good response", "aria-label": "Mark response as helpful", children: "\uD83D\uDC4D" }), (0, jsx_runtime_1.jsx)("button", { title: "Poor response", "aria-label": "Mark response as unhelpful", children: "\uD83D\uDC4E" })] }));
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestAccessibilityComponent, {}));
            expect(react_2.screen.getByLabelText("Copy message to clipboard")).toBeInTheDocument();
            expect(react_2.screen.getByLabelText("Regenerate AI response")).toBeInTheDocument();
            expect(react_2.screen.getByLabelText("Mark response as helpful")).toBeInTheDocument();
            expect(react_2.screen.getByLabelText("Mark response as unhelpful")).toBeInTheDocument();
        });
        it("should support keyboard navigation", async () => {
            const TestKeyboardComponent = () => ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("button", { title: "Copy message", children: "Copy" }), (0, jsx_runtime_1.jsx)("button", { title: "Regenerate response", children: "Regenerate" }), (0, jsx_runtime_1.jsx)("button", { title: "Good response", children: "\uD83D\uDC4D" }), (0, jsx_runtime_1.jsx)("button", { title: "Poor response", children: "\uD83D\uDC4E" })] }));
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestKeyboardComponent, {}));
            const copyButton = react_2.screen.getByTitle("Copy message");
            const regenerateButton = react_2.screen.getByTitle("Regenerate response");
            // Tab navigation
            copyButton.focus();
            expect(copyButton).toHaveFocus();
            await user_event_1.default.keyboard("{Tab}");
            expect(regenerateButton).toHaveFocus();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,