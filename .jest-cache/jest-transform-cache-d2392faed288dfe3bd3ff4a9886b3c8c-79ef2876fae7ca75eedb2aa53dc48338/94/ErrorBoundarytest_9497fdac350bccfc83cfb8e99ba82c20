a709bfb3db353819923246219aebcbd3
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
const ErrorBoundary_1 = require("../../src/components/ErrorBoundary");
const ScreenErrorBoundary_1 = require("../../src/components/ScreenErrorBoundary");
// Mock console.error to avoid noise in tests
const originalConsoleError = console.error;
beforeAll(() => {
    console.error = jest.fn();
});
afterAll(() => {
    console.error = originalConsoleError;
});
// Component that throws an error for testing
const ThrowError = ({ shouldThrow = false }) => {
    if (shouldThrow) {
        throw new Error('Test error message');
    }
    return (0, jsx_runtime_1.jsx)("div", { children: "Normal content" });
};
describe('ErrorBoundary', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });
    it('renders children when there is no error', () => {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(ErrorBoundary_1.ErrorBoundary, { children: (0, jsx_runtime_1.jsx)("div", { children: "Test content" }) }));
        expect(react_2.screen.getByText('Test content')).toBeInTheDocument();
    });
    it('renders error fallback when child throws error', () => {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(ErrorBoundary_1.ErrorBoundary, { children: (0, jsx_runtime_1.jsx)(ThrowError, { shouldThrow: true }) }));
        expect(react_2.screen.getByText('Something went wrong')).toBeInTheDocument();
        expect(react_2.screen.getByText('We encountered an unexpected error. Please try again or reload the page.')).toBeInTheDocument();
        expect(react_2.screen.getByText('Try Again')).toBeInTheDocument();
        expect(react_2.screen.getByText('Reload Page')).toBeInTheDocument();
    });
    it('calls onError callback when error occurs', () => {
        const onError = jest.fn();
        (0, react_2.render)((0, jsx_runtime_1.jsx)(ErrorBoundary_1.ErrorBoundary, { onError: onError, children: (0, jsx_runtime_1.jsx)(ThrowError, { shouldThrow: true }) }));
        expect(onError).toHaveBeenCalledWith(expect.any(Error), expect.objectContaining({
            componentStack: expect.any(String)
        }));
    });
    it('resets error state when Try Again is clicked', () => {
        const { rerender } = (0, react_2.render)((0, jsx_runtime_1.jsx)(ErrorBoundary_1.ErrorBoundary, { children: (0, jsx_runtime_1.jsx)(ThrowError, { shouldThrow: true }) }));
        expect(react_2.screen.getByText('Something went wrong')).toBeInTheDocument();
        // Click Try Again
        react_2.fireEvent.click(react_2.screen.getByText('Try Again'));
        // Re-render with no error
        rerender((0, jsx_runtime_1.jsx)(ErrorBoundary_1.ErrorBoundary, { children: (0, jsx_runtime_1.jsx)(ThrowError, { shouldThrow: false }) }));
        expect(react_2.screen.getByText('Normal content')).toBeInTheDocument();
    });
    it('reloads page when Reload Page is clicked', () => {
        const reloadMock = jest.fn();
        Object.defineProperty(window, 'location', {
            value: { reload: reloadMock },
            writable: true
        });
        (0, react_2.render)((0, jsx_runtime_1.jsx)(ErrorBoundary_1.ErrorBoundary, { children: (0, jsx_runtime_1.jsx)(ThrowError, { shouldThrow: true }) }));
        react_2.fireEvent.click(react_2.screen.getByText('Reload Page'));
        expect(reloadMock).toHaveBeenCalled();
    });
    it('renders custom fallback when provided', () => {
        const customFallback = (0, jsx_runtime_1.jsx)("div", { children: "Custom error message" });
        (0, react_2.render)((0, jsx_runtime_1.jsx)(ErrorBoundary_1.ErrorBoundary, { fallback: customFallback, children: (0, jsx_runtime_1.jsx)(ThrowError, { shouldThrow: true }) }));
        expect(react_2.screen.getByText('Custom error message')).toBeInTheDocument();
        expect(react_2.screen.queryByText('Something went wrong')).not.toBeInTheDocument();
    });
    it('shows error details in development mode', () => {
        const originalEnv = process.env.NODE_ENV;
        process.env.NODE_ENV = 'development';
        (0, react_2.render)((0, jsx_runtime_1.jsx)(ErrorBoundary_1.ErrorBoundary, { children: (0, jsx_runtime_1.jsx)(ThrowError, { shouldThrow: true }) }));
        expect(react_2.screen.getByText('Error Details (Development)')).toBeInTheDocument();
        process.env.NODE_ENV = originalEnv;
    });
    it('does not show error details in production mode', () => {
        const originalEnv = process.env.NODE_ENV;
        process.env.NODE_ENV = 'production';
        (0, react_2.render)((0, jsx_runtime_1.jsx)(ErrorBoundary_1.ErrorBoundary, { children: (0, jsx_runtime_1.jsx)(ThrowError, { shouldThrow: true }) }));
        expect(react_2.screen.queryByText('Error Details (Development)')).not.toBeInTheDocument();
        process.env.NODE_ENV = originalEnv;
    });
});
describe('ScreenErrorBoundary', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });
    it('renders children when there is no error', () => {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(ScreenErrorBoundary_1.ScreenErrorBoundary, { screenName: "TestScreen", children: (0, jsx_runtime_1.jsx)("div", { children: "Screen content" }) }));
        expect(react_2.screen.getByText('Screen content')).toBeInTheDocument();
    });
    it('renders screen-specific error fallback when child throws error', () => {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(ScreenErrorBoundary_1.ScreenErrorBoundary, { screenName: "TestScreen", children: (0, jsx_runtime_1.jsx)(ThrowError, { shouldThrow: true }) }));
        expect(react_2.screen.getByText('TestScreen Error')).toBeInTheDocument();
        expect(react_2.screen.getByText('We encountered an issue with the TestScreen screen. You can try again or return to the home screen.')).toBeInTheDocument();
        expect(react_2.screen.getByText('Try Again')).toBeInTheDocument();
        expect(react_2.screen.getByText('Go to Home')).toBeInTheDocument();
    });
    it('calls onError callback when error occurs', () => {
        const onError = jest.fn();
        (0, react_2.render)((0, jsx_runtime_1.jsx)(ScreenErrorBoundary_1.ScreenErrorBoundary, { screenName: "TestScreen", onError: onError, children: (0, jsx_runtime_1.jsx)(ThrowError, { shouldThrow: true }) }));
        expect(onError).toHaveBeenCalledWith(expect.any(Error), expect.objectContaining({
            componentStack: expect.any(String)
        }));
    });
    it('resets error state when Try Again is clicked', () => {
        const { rerender } = (0, react_2.render)((0, jsx_runtime_1.jsx)(ScreenErrorBoundary_1.ScreenErrorBoundary, { screenName: "TestScreen", children: (0, jsx_runtime_1.jsx)(ThrowError, { shouldThrow: true }) }));
        expect(react_2.screen.getByText('TestScreen Error')).toBeInTheDocument();
        // Click Try Again
        react_2.fireEvent.click(react_2.screen.getByText('Try Again'));
        // Re-render with no error
        rerender((0, jsx_runtime_1.jsx)(ScreenErrorBoundary_1.ScreenErrorBoundary, { screenName: "TestScreen", children: (0, jsx_runtime_1.jsx)(ThrowError, { shouldThrow: false }) }));
        expect(react_2.screen.getByText('Normal content')).toBeInTheDocument();
    });
    it('navigates to home when Go to Home is clicked', () => {
        const locationMock = jest.fn();
        Object.defineProperty(window, 'location', {
            value: { href: locationMock },
            writable: true
        });
        (0, react_2.render)((0, jsx_runtime_1.jsx)(ScreenErrorBoundary_1.ScreenErrorBoundary, { screenName: "TestScreen", children: (0, jsx_runtime_1.jsx)(ThrowError, { shouldThrow: true }) }));
        react_2.fireEvent.click(react_2.screen.getByText('Go to Home'));
        expect(window.location.href).toBe('/');
    });
    it('logs screen-specific error information', () => {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(ScreenErrorBoundary_1.ScreenErrorBoundary, { screenName: "TestScreen", children: (0, jsx_runtime_1.jsx)(ThrowError, { shouldThrow: true }) }));
        expect(console.error).toHaveBeenCalledWith('Screen Error Boundary (TestScreen):', expect.objectContaining({
            error: expect.any(String),
            componentStack: expect.any(String),
            screenName: 'TestScreen',
            timestamp: expect.any(String),
            url: expect.any(String)
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,