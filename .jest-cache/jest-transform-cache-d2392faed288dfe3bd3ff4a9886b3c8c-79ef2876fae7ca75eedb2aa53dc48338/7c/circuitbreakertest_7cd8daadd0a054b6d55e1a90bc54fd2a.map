{"file":"C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\tests\\unit\\circuit-breaker.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\tests\\unit\\circuit-breaker.test.ts"],"sourcesContent":["import { CircuitBreaker, defaultCircuitBreaker, aggressiveCircuitBreaker, conservativeCircuitBreaker } from '../../src/core/utils/circuit-breaker';\r\n\r\n// Mock the logger to avoid console output during tests\r\njest.mock('../../src/core/logging/logger', () => ({\r\n  logger: {\r\n    debug: jest.fn(),\r\n    info: jest.fn(),\r\n    warn: jest.fn(),\r\n    error: jest.fn(),\r\n    fatal: jest.fn()\r\n  }\r\n}));\r\n\r\ndescribe('CircuitBreaker', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    jest.useFakeTimers();\r\n  });\r\n\r\n  afterEach(() => {\r\n    jest.useRealTimers();\r\n  });\r\n\r\n  describe('Configuration', () => {\r\n    it('should use default configuration when no config provided', () => {\r\n      const circuitBreaker = new CircuitBreaker();\r\n      const config = circuitBreaker.getConfig();\r\n\r\n      expect(config.failureThreshold).toBe(5);\r\n      expect(config.resetTimeout).toBe(60000);\r\n      expect(config.monitoringPeriod).toBe(10000);\r\n      expect(config.successThreshold).toBe(2);\r\n      expect(config.volumeThreshold).toBe(10);\r\n    });\r\n\r\n    it('should merge custom configuration with defaults', () => {\r\n      const circuitBreaker = new CircuitBreaker({\r\n        failureThreshold: 3,\r\n        resetTimeout: 30000\r\n      });\r\n      const config = circuitBreaker.getConfig();\r\n\r\n      expect(config.failureThreshold).toBe(3);\r\n      expect(config.resetTimeout).toBe(30000);\r\n      expect(config.monitoringPeriod).toBe(10000); // Default\r\n      expect(config.successThreshold).toBe(2); // Default\r\n    });\r\n\r\n    it('should update configuration after creation', () => {\r\n      const circuitBreaker = new CircuitBreaker();\r\n      circuitBreaker.updateConfig({ failureThreshold: 10 });\r\n\r\n      expect(circuitBreaker.getConfig().failureThreshold).toBe(10);\r\n    });\r\n  });\r\n\r\n  describe('State transitions', () => {\r\n    it('should start in CLOSED state', () => {\r\n      const circuitBreaker = new CircuitBreaker();\r\n      expect(circuitBreaker.getState()).toBe('CLOSED');\r\n    });\r\n\r\n    it('should transition to OPEN after failure threshold', async () => {\r\n      const circuitBreaker = new CircuitBreaker({ failureThreshold: 2 });\r\n      const mockFn = jest.fn().mockRejectedValue(new Error('Service error'));\r\n\r\n      // First failure\r\n      await expect(circuitBreaker.execute(mockFn)).rejects.toThrow('Service error');\r\n      expect(circuitBreaker.getState()).toBe('CLOSED');\r\n\r\n      // Second failure - should open circuit\r\n      await expect(circuitBreaker.execute(mockFn)).rejects.toThrow('Service error');\r\n      expect(circuitBreaker.getState()).toBe('OPEN');\r\n    });\r\n\r\n    it('should transition to HALF_OPEN after reset timeout', async () => {\r\n      const circuitBreaker = new CircuitBreaker({\r\n        failureThreshold: 1,\r\n        resetTimeout: 1000\r\n      });\r\n      const mockFn = jest.fn().mockRejectedValue(new Error('Service error'));\r\n\r\n      // Trigger OPEN state\r\n      await expect(circuitBreaker.execute(mockFn)).rejects.toThrow('Service error');\r\n      expect(circuitBreaker.getState()).toBe('OPEN');\r\n\r\n      // Advance time past reset timeout\r\n      jest.advanceTimersByTime(1000);\r\n\r\n      // Next execution should be HALF_OPEN\r\n      const successFn = jest.fn().mockResolvedValue('success');\r\n      await circuitBreaker.execute(successFn);\r\n      expect(circuitBreaker.getState()).toBe('HALF_OPEN');\r\n    });\r\n\r\n    it('should transition back to CLOSED after success threshold in HALF_OPEN', async () => {\r\n      const circuitBreaker = new CircuitBreaker({\r\n        failureThreshold: 1,\r\n        resetTimeout: 1000,\r\n        successThreshold: 2\r\n      });\r\n      const mockFn = jest.fn().mockRejectedValue(new Error('Service error'));\r\n\r\n      // Trigger OPEN state\r\n      await expect(circuitBreaker.execute(mockFn)).rejects.toThrow('Service error');\r\n      expect(circuitBreaker.getState()).toBe('OPEN');\r\n\r\n      // Advance time past reset timeout\r\n      jest.advanceTimersByTime(1000);\r\n\r\n      // First success in HALF_OPEN\r\n      const successFn = jest.fn().mockResolvedValue('success');\r\n      await circuitBreaker.execute(successFn);\r\n      expect(circuitBreaker.getState()).toBe('HALF_OPEN');\r\n\r\n      // Second success should close circuit\r\n      await circuitBreaker.execute(successFn);\r\n      expect(circuitBreaker.getState()).toBe('CLOSED');\r\n    });\r\n  });\r\n\r\n  describe('Fallback behavior', () => {\r\n    it('should use fallback when circuit is OPEN', async () => {\r\n      const circuitBreaker = new CircuitBreaker({ failureThreshold: 1 });\r\n      const mockFn = jest.fn().mockRejectedValue(new Error('Service error'));\r\n      const fallbackFn = jest.fn().mockResolvedValue('fallback result');\r\n\r\n      // Trigger OPEN state\r\n      await expect(circuitBreaker.execute(mockFn)).rejects.toThrow('Service error');\r\n      expect(circuitBreaker.getState()).toBe('OPEN');\r\n\r\n      // Should use fallback\r\n      const result = await circuitBreaker.execute(mockFn, fallbackFn);\r\n      expect(result).toBe('fallback result');\r\n      expect(fallbackFn).toHaveBeenCalledTimes(1);\r\n      expect(mockFn).not.toHaveBeenCalledTimes(2); // Should not call original function\r\n    });\r\n\r\n    it('should throw error when circuit is OPEN and no fallback provided', async () => {\r\n      const circuitBreaker = new CircuitBreaker({ failureThreshold: 1 });\r\n      const mockFn = jest.fn().mockRejectedValue(new Error('Service error'));\r\n\r\n      // Trigger OPEN state\r\n      await expect(circuitBreaker.execute(mockFn)).rejects.toThrow('Service error');\r\n      expect(circuitBreaker.getState()).toBe('OPEN');\r\n\r\n      // Should throw error without fallback\r\n      await expect(circuitBreaker.execute(mockFn)).rejects.toThrow('Circuit breaker is OPEN');\r\n    });\r\n\r\n    it('should handle fallback errors', async () => {\r\n      const circuitBreaker = new CircuitBreaker({ failureThreshold: 1 });\r\n      const mockFn = jest.fn().mockRejectedValue(new Error('Service error'));\r\n      const fallbackFn = jest.fn().mockRejectedValue(new Error('Fallback error'));\r\n\r\n      // Trigger OPEN state\r\n      await expect(circuitBreaker.execute(mockFn)).rejects.toThrow('Service error');\r\n      expect(circuitBreaker.getState()).toBe('OPEN');\r\n\r\n      // Should throw fallback error\r\n      await expect(circuitBreaker.execute(mockFn, fallbackFn)).rejects.toThrow('Fallback error');\r\n    });\r\n  });\r\n\r\n  describe('Metrics', () => {\r\n    it('should track request metrics correctly', async () => {\r\n      const circuitBreaker = new CircuitBreaker({ failureThreshold: 3 });\r\n      const successFn = jest.fn().mockResolvedValue('success');\r\n      const failureFn = jest.fn().mockRejectedValue(new Error('Service error'));\r\n\r\n      // Successful requests\r\n      await circuitBreaker.execute(successFn);\r\n      await circuitBreaker.execute(successFn);\r\n\r\n      // Failed requests\r\n      await expect(circuitBreaker.execute(failureFn)).rejects.toThrow('Service error');\r\n      await expect(circuitBreaker.execute(failureFn)).rejects.toThrow('Service error');\r\n\r\n      const metrics = circuitBreaker.getMetrics();\r\n\r\n      expect(metrics.totalRequests).toBe(4);\r\n      expect(metrics.successfulRequests).toBe(2);\r\n      expect(metrics.failedRequests).toBe(2);\r\n      expect(metrics.failureRate).toBe(50);\r\n    });\r\n\r\n    it('should track timing information', async () => {\r\n      const circuitBreaker = new CircuitBreaker();\r\n      const mockFn = jest.fn().mockResolvedValue('success');\r\n\r\n      await circuitBreaker.execute(mockFn);\r\n\r\n      const metrics = circuitBreaker.getMetrics();\r\n\r\n      expect(metrics.lastSuccessTime).toBeInstanceOf(Date);\r\n      expect(metrics.lastFailureTime).toBeUndefined();\r\n    });\r\n  });\r\n\r\n  describe('executeWithResult', () => {\r\n    it('should return detailed result on success', async () => {\r\n      const circuitBreaker = new CircuitBreaker();\r\n      const mockFn = jest.fn().mockResolvedValue('success');\r\n\r\n      const result = await circuitBreaker.executeWithResult(mockFn);\r\n\r\n      expect(result.success).toBe(true);\r\n      expect(result.data).toBe('success');\r\n      expect(result.usedFallback).toBe(false);\r\n      expect(result.circuitState).toBe('CLOSED');\r\n      expect(result.error).toBeUndefined();\r\n    });\r\n\r\n    it('should return detailed result on failure', async () => {\r\n      const circuitBreaker = new CircuitBreaker({ failureThreshold: 1 });\r\n      const mockFn = jest.fn().mockRejectedValue(new Error('Service error'));\r\n\r\n      const result = await circuitBreaker.executeWithResult(mockFn);\r\n\r\n      expect(result.success).toBe(false);\r\n      expect(result.data).toBeUndefined();\r\n      expect(result.usedFallback).toBe(false);\r\n      expect(result.circuitState).toBe('OPEN');\r\n      expect(result.error).toBeInstanceOf(Error);\r\n      expect(result.error?.message).toBe('Service error');\r\n    });\r\n\r\n    it('should return fallback result when circuit is OPEN', async () => {\r\n      const circuitBreaker = new CircuitBreaker({ failureThreshold: 1 });\r\n      const mockFn = jest.fn().mockRejectedValue(new Error('Service error'));\r\n      const fallbackFn = jest.fn().mockResolvedValue('fallback');\r\n\r\n      // Trigger OPEN state\r\n      await circuitBreaker.executeWithResult(mockFn);\r\n\r\n      const result = await circuitBreaker.executeWithResult(mockFn, fallbackFn);\r\n\r\n      expect(result.success).toBe(true);\r\n      expect(result.data).toBe('fallback');\r\n      expect(result.usedFallback).toBe(true);\r\n      expect(result.circuitState).toBe('OPEN');\r\n    });\r\n  });\r\n\r\n  describe('Manual control', () => {\r\n    it('should allow manual reset', async () => {\r\n      const circuitBreaker = new CircuitBreaker({ failureThreshold: 1 });\r\n      const mockFn = jest.fn().mockRejectedValue(new Error('Service error'));\r\n\r\n      // Trigger OPEN state\r\n      await expect(circuitBreaker.execute(mockFn)).rejects.toThrow('Service error');\r\n      expect(circuitBreaker.getState()).toBe('OPEN');\r\n\r\n      // Manual reset\r\n      circuitBreaker.reset();\r\n      expect(circuitBreaker.getState()).toBe('CLOSED');\r\n    });\r\n\r\n    it('should allow manual force open', () => {\r\n      const circuitBreaker = new CircuitBreaker();\r\n      expect(circuitBreaker.getState()).toBe('CLOSED');\r\n\r\n      circuitBreaker.forceOpen();\r\n      expect(circuitBreaker.getState()).toBe('OPEN');\r\n    });\r\n  });\r\n\r\n  describe('Health checks', () => {\r\n    it('should report healthy when CLOSED', () => {\r\n      const circuitBreaker = new CircuitBreaker();\r\n      expect(circuitBreaker.isHealthy()).toBe(true);\r\n    });\r\n\r\n    it('should report unhealthy when OPEN', async () => {\r\n      const circuitBreaker = new CircuitBreaker({ failureThreshold: 1 });\r\n      const mockFn = jest.fn().mockRejectedValue(new Error('Service error'));\r\n\r\n      await expect(circuitBreaker.execute(mockFn)).rejects.toThrow('Service error');\r\n      expect(circuitBreaker.isHealthy()).toBe(false);\r\n    });\r\n\r\n    it('should report healthy when HALF_OPEN with success', async () => {\r\n      const circuitBreaker = new CircuitBreaker({\r\n        failureThreshold: 1,\r\n        resetTimeout: 1000\r\n      });\r\n      const mockFn = jest.fn().mockRejectedValue(new Error('Service error'));\r\n\r\n      // Trigger OPEN state\r\n      await expect(circuitBreaker.execute(mockFn)).rejects.toThrow('Service error');\r\n\r\n      // Advance time past reset timeout\r\n      jest.advanceTimersByTime(1000);\r\n\r\n      // Success in HALF_OPEN\r\n      const successFn = jest.fn().mockResolvedValue('success');\r\n      await circuitBreaker.execute(successFn);\r\n\r\n      expect(circuitBreaker.isHealthy()).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('Pre-configured instances', () => {\r\n    it('should have different configurations for different use cases', () => {\r\n      const defaultConfig = defaultCircuitBreaker.getConfig();\r\n      const aggressiveConfig = aggressiveCircuitBreaker.getConfig();\r\n      const conservativeConfig = conservativeCircuitBreaker.getConfig();\r\n\r\n      expect(defaultConfig.failureThreshold).toBe(5);\r\n      expect(aggressiveConfig.failureThreshold).toBe(3);\r\n      expect(conservativeConfig.failureThreshold).toBe(10);\r\n\r\n      expect(aggressiveConfig.resetTimeout).toBe(30000);\r\n      expect(conservativeConfig.resetTimeout).toBe(120000);\r\n    });\r\n  });\r\n\r\n  describe('Time until next attempt', () => {\r\n    it('should return 0 when not OPEN', () => {\r\n      const circuitBreaker = new CircuitBreaker();\r\n      expect(circuitBreaker.getTimeUntilNextAttempt()).toBe(0);\r\n    });\r\n\r\n    it('should return time until next attempt when OPEN', async () => {\r\n      const circuitBreaker = new CircuitBreaker({\r\n        failureThreshold: 1,\r\n        resetTimeout: 5000\r\n      });\r\n      const mockFn = jest.fn().mockRejectedValue(new Error('Service error'));\r\n\r\n      // Trigger OPEN state\r\n      await expect(circuitBreaker.execute(mockFn)).rejects.toThrow('Service error');\r\n\r\n      const timeUntilNext = circuitBreaker.getTimeUntilNextAttempt();\r\n      expect(timeUntilNext).toBeGreaterThan(0);\r\n      expect(timeUntilNext).toBeLessThanOrEqual(5000);\r\n    });\r\n  });\r\n});\r\n"],"version":3}