{"file":"C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\src\\core\\validation\\schemas.ts","mappings":";;;AAsCA,sCAMC;AA5CD,6BAAwB;AAExB,qBAAqB;AACR,QAAA,aAAa,GAAG,OAAC,CAAC,MAAM,CAAC;IACpC,OAAO,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,yBAAyB,CAAC,CAAC,GAAG,CAAC,KAAK,EAAE,kBAAkB,CAAC;IACpF,IAAI,EAAE,OAAC,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,WAAW,EAAE,QAAQ,CAAC,EAAE;QAC5C,QAAQ,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,yCAAyC,EAAE,CAAC;KACzE,CAAC;IACF,SAAS,EAAE,OAAC,CAAC,IAAI,EAAE,CAAC,QAAQ,EAAE;IAC9B,QAAQ,EAAE,OAAC,CAAC,MAAM,CAAC,OAAC,CAAC,OAAO,EAAE,CAAC,CAAC,QAAQ,EAAE;CAC3C,CAAC,CAAC;AAEH,yBAAyB;AACZ,QAAA,gBAAgB,GAAG,OAAC,CAAC,MAAM,CAAC;IACvC,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,0BAA0B,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,mBAAmB,CAAC;IACjF,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,IAAI,GAAG,IAAI,EAAE,kCAAkC,CAAC;IAC1E,IAAI,EAAE,OAAC,CAAC,IAAI,CAAC;QACX,iBAAiB;QACjB,yEAAyE;QACzE,mEAAmE;QACnE,YAAY;QACZ,WAAW;QACX,YAAY;KACb,EAAE;QACD,QAAQ,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,uBAAuB,EAAE,CAAC;KACvD,CAAC;IACF,OAAO,EAAE,OAAC,CAAC,UAAU,CAAC,IAAI,EAAE,EAAE,OAAO,EAAE,iCAAiC,EAAE,CAAC;CAC5E,CAAC,CAAC;AAEH,yBAAyB;AACZ,QAAA,gBAAgB,GAAG,OAAC,CAAC,MAAM,CAAC;IACvC,QAAQ,EAAE,OAAC,CAAC,KAAK,CAAC,qBAAa,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,kCAAkC,CAAC;IAC3E,KAAK,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC5B,WAAW,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;IAChD,SAAS,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE;CACpD,CAAC,CAAC;AAEH,sBAAsB;AACtB,SAAgB,aAAa,CAAC,KAAa;IACzC,OAAO,KAAK;SACT,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,6BAA6B;SAClD,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC,8BAA8B;SAC3D,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC,wBAAwB;SAChD,IAAI,EAAE,CAAC;AACZ,CAAC","names":[],"sources":["C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\src\\core\\validation\\schemas.ts"],"sourcesContent":["import { z } from 'zod';\r\n\r\n// Message validation\r\nexport const messageSchema = z.object({\r\n  content: z.string().min(1, 'Content cannot be empty').max(10000, 'Content too long'),\r\n  role: z.enum(['user', 'assistant', 'system'], {\r\n    errorMap: () => ({ message: 'Role must be user, assistant, or system' })\r\n  }),\r\n  timestamp: z.date().optional(),\r\n  metadata: z.record(z.unknown()).optional()\r\n});\r\n\r\n// File upload validation\r\nexport const fileUploadSchema = z.object({\r\n  name: z.string().min(1, 'Filename cannot be empty').max(255, 'Filename too long'),\r\n  size: z.number().max(20 * 1024 * 1024, 'File size must be less than 20MB'),\r\n  type: z.enum([\r\n    'application/pdf',\r\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\r\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\r\n    'text/plain',\r\n    'image/png',\r\n    'image/jpeg'\r\n  ], {\r\n    errorMap: () => ({ message: 'Unsupported file type' })\r\n  }),\r\n  content: z.instanceof(File, { message: 'Content must be a File instance' })\r\n});\r\n\r\n// API request validation\r\nexport const apiRequestSchema = z.object({\r\n  messages: z.array(messageSchema).min(1, 'At least one message is required'),\r\n  model: z.string().optional(),\r\n  temperature: z.number().min(0).max(2).optional(),\r\n  maxTokens: z.number().min(1).max(100000).optional()\r\n});\r\n\r\n// Sanitization helper\r\nexport function sanitizeInput(input: string): string {\r\n  return input\r\n    .replace(/[<>]/g, '') // Remove potential HTML tags\r\n    .replace(/javascript:/gi, '') // Remove javascript: protocol\r\n    .replace(/on\\w+=/gi, '') // Remove event handlers\r\n    .trim();\r\n}\r\n"],"version":3}