0a8ddcdbebc80e8f29fad6ed27db42c9
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
const user_event_1 = __importDefault(require("@testing-library/user-event"));
const chat_input_1 = require("../../src/components/ui/chat-input");
describe("ChatInput", () => {
    const mockOnSend = jest.fn();
    const mockOnStop = jest.fn();
    beforeEach(() => {
        jest.clearAllMocks();
    });
    it("renders chat input with correct placeholder", () => {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend }));
        const textarea = react_2.screen.getByRole("textbox");
        expect(textarea).toBeInTheDocument();
        expect(textarea).toHaveAttribute("placeholder", "Type your message... (Enter to send, Shift+Enter for new line)");
    });
    it("displays send button when not streaming", () => {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend, isStreaming: false }));
        const sendButton = react_2.screen.getByRole("button", { name: /send message/i });
        expect(sendButton).toBeInTheDocument();
        expect(sendButton).toHaveTextContent("Send");
    });
    it("displays stop button when streaming", () => {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend, onStop: mockOnStop, isStreaming: true }));
        const stopButton = react_2.screen.getByRole("button", { name: /stop streaming response/i });
        expect(stopButton).toBeInTheDocument();
        expect(stopButton).toHaveTextContent("Stop");
    });
    it("sends message on Enter key press", async () => {
        const user = user_event_1.default.setup();
        (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend }));
        const textarea = react_2.screen.getByRole("textbox");
        await user.type(textarea, "Test message");
        await user.keyboard("{Enter}");
        expect(mockOnSend).toHaveBeenCalledWith("Test message");
    });
    it("adds new line on Shift+Enter", async () => {
        const user = user_event_1.default.setup();
        (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend }));
        const textarea = react_2.screen.getByRole("textbox");
        await user.type(textarea, "Line 1");
        await user.keyboard("{Shift>}{Enter}{/Shift}");
        await user.type(textarea, "Line 2");
        expect(textarea).toHaveValue("Line 1\nLine 2");
        expect(mockOnSend).not.toHaveBeenCalled();
    });
    it("sends message on button click", async () => {
        const user = user_event_1.default.setup();
        (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend }));
        const textarea = react_2.screen.getByRole("textbox");
        const sendButton = react_2.screen.getByRole("button", { name: /send message/i });
        await user.type(textarea, "Test message");
        await user.click(sendButton);
        expect(mockOnSend).toHaveBeenCalledWith("Test message");
    });
    it("clears input after sending message", async () => {
        const user = user_event_1.default.setup();
        (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend }));
        const textarea = react_2.screen.getByRole("textbox");
        await user.type(textarea, "Test message");
        await user.keyboard("{Enter}");
        expect(textarea).toHaveValue("");
    });
    it("disables send button for empty input", () => {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend }));
        const sendButton = react_2.screen.getByRole("button", { name: /send message/i });
        expect(sendButton).toBeDisabled();
    });
    it("disables send button for whitespace-only input", async () => {
        const user = user_event_1.default.setup();
        (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend }));
        const textarea = react_2.screen.getByRole("textbox");
        const sendButton = react_2.screen.getByRole("button", { name: /send message/i });
        await user.type(textarea, "   ");
        expect(sendButton).toBeDisabled();
    });
    it("enables send button for valid input", async () => {
        const user = user_event_1.default.setup();
        (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend }));
        const textarea = react_2.screen.getByRole("textbox");
        const sendButton = react_2.screen.getByRole("button", { name: /send message/i });
        await user.type(textarea, "Valid message");
        expect(sendButton).not.toBeDisabled();
    });
    it("calls onStop when stop button is clicked", async () => {
        const user = user_event_1.default.setup();
        (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend, onStop: mockOnStop, isStreaming: true }));
        const stopButton = react_2.screen.getByRole("button", { name: /stop streaming response/i });
        await user.click(stopButton);
        expect(mockOnStop).toHaveBeenCalled();
    });
    it("auto-resizes textarea as content grows", async () => {
        const user = user_event_1.default.setup();
        (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend, maxLines: 5 }));
        const textarea = react_2.screen.getByRole("textbox");
        const initialHeight = textarea.style.height;
        // Add multiple lines
        await user.type(textarea, "Line 1\nLine 2\nLine 3\nLine 4");
        // Height should have increased
        expect(textarea.style.height).not.toBe(initialHeight);
    });
    it("does not send empty messages", async () => {
        const user = user_event_1.default.setup();
        (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend }));
        const textarea = react_2.screen.getByRole("textbox");
        await user.keyboard("{Enter}");
        expect(mockOnSend).not.toHaveBeenCalled();
    });
    it("trims whitespace from messages before sending", async () => {
        const user = user_event_1.default.setup();
        (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend }));
        const textarea = react_2.screen.getByRole("textbox");
        await user.type(textarea, "  Test message  ");
        await user.keyboard("{Enter}");
        expect(mockOnSend).toHaveBeenCalledWith("Test message");
    });
    it("prevents sending when streaming", async () => {
        const user = user_event_1.default.setup();
        (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend, isStreaming: true }));
        const textarea = react_2.screen.getByRole("textbox");
        await user.type(textarea, "Test message");
        await user.keyboard("{Enter}");
        expect(mockOnSend).not.toHaveBeenCalled();
    });
    it("maintains focus after sending message", async () => {
        const user = user_event_1.default.setup();
        (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend }));
        const textarea = react_2.screen.getByRole("textbox");
        await user.type(textarea, "Test message");
        await user.keyboard("{Enter}");
        await (0, react_2.waitFor)(() => {
            expect(textarea).toHaveFocus();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,