80175d06ac5751adaa31080036e68e58
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.conservativeCircuitBreaker = exports.aggressiveCircuitBreaker = exports.defaultCircuitBreaker = exports.CircuitBreaker = void 0;
const logger_1 = require("../logging/logger");
/**
 * Circuit breaker states
 */
var CircuitState;
(function (CircuitState) {
    CircuitState["CLOSED"] = "CLOSED";
    CircuitState["OPEN"] = "OPEN";
    CircuitState["HALF_OPEN"] = "HALF_OPEN";
})(CircuitState || (CircuitState = {}));
/**
 * Circuit breaker implementation with failure detection and automatic recovery
 */
class CircuitBreaker {
    constructor(config) {
        Object.defineProperty(this, "state", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: CircuitState.CLOSED
        });
        Object.defineProperty(this, "failureCount", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "successCount", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "totalRequests", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "nextAttempt", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Date.now()
        });
        Object.defineProperty(this, "lastFailureTime", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "lastSuccessTime", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "config", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {
                failureThreshold: 5,
                resetTimeout: 60000, // 1 minute
                monitoringPeriod: 10000, // 10 seconds
                successThreshold: 2,
                volumeThreshold: 10
            }
        });
        this.config = { ...this.config, ...config };
    }
    /**
     * Execute a function with circuit breaker protection
     */
    async execute(fn, fallback, context) {
        this.totalRequests++;
        if (this.state === CircuitState.OPEN) {
            if (Date.now() < this.nextAttempt) {
                logger_1.logger.warn('Circuit breaker is OPEN, using fallback', {
                    context,
                    nextAttempt: new Date(this.nextAttempt).toISOString(),
                    failureCount: this.failureCount
                });
                if (fallback) {
                    try {
                        const fallbackResult = await fallback();
                        logger_1.logger.info('Fallback executed successfully', { context });
                        return fallbackResult;
                    }
                    catch (fallbackError) {
                        logger_1.logger.error('Fallback also failed', {
                            context,
                            error: fallbackError instanceof Error ? fallbackError.message : String(fallbackError)
                        });
                        throw fallbackError;
                    }
                }
                throw new Error(`Circuit breaker is OPEN - service unavailable until ${new Date(this.nextAttempt).toISOString()}`);
            }
            this.state = CircuitState.HALF_OPEN;
            logger_1.logger.info('Circuit breaker transitioning to HALF_OPEN', {
                context,
                failureCount: this.failureCount
            });
        }
        try {
            const result = await fn();
            this.onSuccess(context);
            return result;
        }
        catch (error) {
            this.onFailure(error, context);
            throw error;
        }
    }
    /**
     * Execute with detailed result information
     */
    async executeWithResult(fn, fallback, context) {
        this.totalRequests++;
        if (this.state === CircuitState.OPEN) {
            if (Date.now() < this.nextAttempt) {
                logger_1.logger.warn('Circuit breaker is OPEN, using fallback', {
                    context,
                    nextAttempt: new Date(this.nextAttempt).toISOString()
                });
                if (fallback) {
                    try {
                        const fallbackResult = await fallback();
                        return {
                            success: true,
                            data: fallbackResult,
                            usedFallback: true,
                            circuitState: this.state
                        };
                    }
                    catch (fallbackError) {
                        return {
                            success: false,
                            error: fallbackError instanceof Error ? fallbackError : new Error(String(fallbackError)),
                            usedFallback: true,
                            circuitState: this.state
                        };
                    }
                }
                return {
                    success: false,
                    error: new Error(`Circuit breaker is OPEN - service unavailable until ${new Date(this.nextAttempt).toISOString()}`),
                    usedFallback: false,
                    circuitState: this.state
                };
            }
            this.state = CircuitState.HALF_OPEN;
            logger_1.logger.info('Circuit breaker transitioning to HALF_OPEN', { context });
        }
        try {
            const result = await fn();
            this.onSuccess(context);
            return {
                success: true,
                data: result,
                usedFallback: false,
                circuitState: this.state
            };
        }
        catch (error) {
            this.onFailure(error, context);
            return {
                success: false,
                error: error instanceof Error ? error : new Error(String(error)),
                usedFallback: false,
                circuitState: this.state
            };
        }
    }
    /**
     * Handle successful execution
     */
    onSuccess(context) {
        this.failureCount = 0;
        this.lastSuccessTime = new Date();
        if (this.state === CircuitState.HALF_OPEN) {
            this.successCount++;
            if (this.successCount >= this.config.successThreshold) {
                this.state = CircuitState.CLOSED;
                this.successCount = 0;
                logger_1.logger.info('Circuit breaker is CLOSED - service recovered', {
                    context,
                    successCount: this.successCount
                });
            }
        }
    }
    /**
     * Handle failed execution
     */
    onFailure(error, context) {
        this.failureCount++;
        this.successCount = 0;
        this.lastFailureTime = new Date();
        const errorMessage = error instanceof Error ? error.message : String(error);
        if (this.failureCount >= this.config.failureThreshold) {
            this.state = CircuitState.OPEN;
            this.nextAttempt = Date.now() + this.config.resetTimeout;
            logger_1.logger.error('Circuit breaker is OPEN - too many failures', {
                context,
                failures: this.failureCount,
                threshold: this.config.failureThreshold,
                error: errorMessage,
                nextAttempt: new Date(this.nextAttempt).toISOString()
            });
        }
        else {
            logger_1.logger.warn('Circuit breaker failure count increased', {
                context,
                failures: this.failureCount,
                threshold: this.config.failureThreshold,
                error: errorMessage
            });
        }
    }
    /**
     * Get current circuit breaker state
     */
    getState() {
        return this.state;
    }
    /**
     * Get circuit breaker metrics
     */
    getMetrics() {
        const failureRate = this.totalRequests > 0 ? (this.failedRequests / this.totalRequests) * 100 : 0;
        return {
            totalRequests: this.totalRequests,
            successfulRequests: this.totalRequests - this.failedRequests,
            failedRequests: this.failedRequests,
            lastFailureTime: this.lastFailureTime,
            lastSuccessTime: this.lastSuccessTime,
            currentState: this.state,
            failureRate
        };
    }
    /**
     * Get failed requests count
     */
    get failedRequests() {
        return this.failureCount;
    }
    /**
     * Reset circuit breaker to CLOSED state
     */
    reset() {
        this.state = CircuitState.CLOSED;
        this.failureCount = 0;
        this.successCount = 0;
        this.nextAttempt = Date.now();
        logger_1.logger.info('Circuit breaker manually reset to CLOSED');
    }
    /**
     * Force circuit breaker to OPEN state
     */
    forceOpen() {
        this.state = CircuitState.OPEN;
        this.nextAttempt = Date.now() + this.config.resetTimeout;
        logger_1.logger.warn('Circuit breaker manually forced to OPEN');
    }
    /**
     * Get current configuration
     */
    getConfig() {
        return { ...this.config };
    }
    /**
     * Update configuration
     */
    updateConfig(config) {
        this.config = { ...this.config, ...config };
    }
    /**
     * Check if circuit breaker is healthy
     */
    isHealthy() {
        return this.state === CircuitState.CLOSED ||
            (this.state === CircuitState.HALF_OPEN && this.successCount > 0);
    }
    /**
     * Get time until next attempt
     */
    getTimeUntilNextAttempt() {
        if (this.state !== CircuitState.OPEN) {
            return 0;
        }
        return Math.max(0, this.nextAttempt - Date.now());
    }
}
exports.CircuitBreaker = CircuitBreaker;
/**
 * Default circuit breaker instance
 */
exports.defaultCircuitBreaker = new CircuitBreaker();
/**
 * Aggressive circuit breaker for critical services
 */
exports.aggressiveCircuitBreaker = new CircuitBreaker({
    failureThreshold: 3,
    resetTimeout: 30000, // 30 seconds
    successThreshold: 1
});
/**
 * Conservative circuit breaker for stable services
 */
exports.conservativeCircuitBreaker = new CircuitBreaker({
    failureThreshold: 10,
    resetTimeout: 120000, // 2 minutes
    successThreshold: 3
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,