{"file":"C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\src\\core\\utils\\circuit-breaker.ts","mappings":"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","names":[],"sources":["C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\src\\core\\utils\\circuit-breaker.ts"],"sourcesContent":["import { logger } from '../logging/logger';\r\n\r\n/**\r\n * Circuit breaker states\r\n */\r\nenum CircuitState {\r\n  CLOSED = 'CLOSED',\r\n  OPEN = 'OPEN',\r\n  HALF_OPEN = 'HALF_OPEN'\r\n}\r\n\r\n/**\r\n * Circuit breaker configuration interface\r\n */\r\ninterface CircuitBreakerConfig {\r\n  failureThreshold: number;\r\n  resetTimeout: number;\r\n  monitoringPeriod: number;\r\n  successThreshold: number;\r\n  volumeThreshold: number;\r\n}\r\n\r\n/**\r\n * Circuit breaker metrics interface\r\n */\r\ninterface CircuitBreakerMetrics {\r\n  totalRequests: number;\r\n  successfulRequests: number;\r\n  failedRequests: number;\r\n  lastFailureTime?: Date;\r\n  lastSuccessTime?: Date;\r\n  currentState: CircuitState;\r\n  failureRate: number;\r\n}\r\n\r\n/**\r\n * Circuit breaker result interface\r\n */\r\ninterface CircuitBreakerResult<T> {\r\n  success: boolean;\r\n  data?: T;\r\n  error?: Error;\r\n  usedFallback: boolean;\r\n  circuitState: CircuitState;\r\n}\r\n\r\n/**\r\n * Circuit breaker implementation with failure detection and automatic recovery\r\n */\r\nexport class CircuitBreaker {\r\n  private state: CircuitState = CircuitState.CLOSED;\r\n  private failureCount: number = 0;\r\n  private successCount: number = 0;\r\n  private totalRequests: number = 0;\r\n  private nextAttempt: number = Date.now();\r\n  private lastFailureTime?: Date;\r\n  private lastSuccessTime?: Date;\r\n  private config: CircuitBreakerConfig = {\r\n    failureThreshold: 5,\r\n    resetTimeout: 60000, // 1 minute\r\n    monitoringPeriod: 10000, // 10 seconds\r\n    successThreshold: 2,\r\n    volumeThreshold: 10\r\n  };\r\n\r\n  constructor(config?: Partial<CircuitBreakerConfig>) {\r\n    this.config = { ...this.config, ...config };\r\n  }\r\n\r\n  /**\r\n   * Execute a function with circuit breaker protection\r\n   */\r\n  async execute<T>(\r\n    fn: () => Promise<T>,\r\n    fallback?: () => T | Promise<T>,\r\n    context?: string\r\n  ): Promise<T> {\r\n    this.totalRequests++;\r\n\r\n    if (this.state === CircuitState.OPEN) {\r\n      if (Date.now() < this.nextAttempt) {\r\n        logger.warn('Circuit breaker is OPEN, using fallback', {\r\n          context,\r\n          nextAttempt: new Date(this.nextAttempt).toISOString(),\r\n          failureCount: this.failureCount\r\n        });\r\n        \r\n        if (fallback) {\r\n          try {\r\n            const fallbackResult = await fallback();\r\n            logger.info('Fallback executed successfully', { context });\r\n            return fallbackResult;\r\n          } catch (fallbackError) {\r\n            logger.error('Fallback also failed', {\r\n              context,\r\n              error: fallbackError instanceof Error ? fallbackError.message : String(fallbackError)\r\n            });\r\n            throw fallbackError;\r\n          }\r\n        }\r\n        throw new Error(`Circuit breaker is OPEN - service unavailable until ${new Date(this.nextAttempt).toISOString()}`);\r\n      }\r\n      \r\n      this.state = CircuitState.HALF_OPEN;\r\n      logger.info('Circuit breaker transitioning to HALF_OPEN', {\r\n        context,\r\n        failureCount: this.failureCount\r\n      });\r\n    }\r\n\r\n    try {\r\n      const result = await fn();\r\n      this.onSuccess(context);\r\n      return result;\r\n    } catch (error) {\r\n      this.onFailure(error, context);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Execute with detailed result information\r\n   */\r\n  async executeWithResult<T>(\r\n    fn: () => Promise<T>,\r\n    fallback?: () => T | Promise<T>,\r\n    context?: string\r\n  ): Promise<CircuitBreakerResult<T>> {\r\n    this.totalRequests++;\r\n\r\n    if (this.state === CircuitState.OPEN) {\r\n      if (Date.now() < this.nextAttempt) {\r\n        logger.warn('Circuit breaker is OPEN, using fallback', {\r\n          context,\r\n          nextAttempt: new Date(this.nextAttempt).toISOString()\r\n        });\r\n        \r\n        if (fallback) {\r\n          try {\r\n            const fallbackResult = await fallback();\r\n            return {\r\n              success: true,\r\n              data: fallbackResult,\r\n              usedFallback: true,\r\n              circuitState: this.state\r\n            };\r\n          } catch (fallbackError) {\r\n            return {\r\n              success: false,\r\n              error: fallbackError instanceof Error ? fallbackError : new Error(String(fallbackError)),\r\n              usedFallback: true,\r\n              circuitState: this.state\r\n            };\r\n          }\r\n        }\r\n        \r\n        return {\r\n          success: false,\r\n          error: new Error(`Circuit breaker is OPEN - service unavailable until ${new Date(this.nextAttempt).toISOString()}`),\r\n          usedFallback: false,\r\n          circuitState: this.state\r\n        };\r\n      }\r\n      \r\n      this.state = CircuitState.HALF_OPEN;\r\n      logger.info('Circuit breaker transitioning to HALF_OPEN', { context });\r\n    }\r\n\r\n    try {\r\n      const result = await fn();\r\n      this.onSuccess(context);\r\n      return {\r\n        success: true,\r\n        data: result,\r\n        usedFallback: false,\r\n        circuitState: this.state\r\n      };\r\n    } catch (error) {\r\n      this.onFailure(error, context);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error : new Error(String(error)),\r\n        usedFallback: false,\r\n        circuitState: this.state\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle successful execution\r\n   */\r\n  private onSuccess(context?: string): void {\r\n    this.failureCount = 0;\r\n    this.lastSuccessTime = new Date();\r\n    \r\n    if (this.state === CircuitState.HALF_OPEN) {\r\n      this.successCount++;\r\n      if (this.successCount >= this.config.successThreshold) {\r\n        this.state = CircuitState.CLOSED;\r\n        this.successCount = 0;\r\n        logger.info('Circuit breaker is CLOSED - service recovered', {\r\n          context,\r\n          successCount: this.successCount\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle failed execution\r\n   */\r\n  private onFailure(error: unknown, context?: string): void {\r\n    this.failureCount++;\r\n    this.successCount = 0;\r\n    this.lastFailureTime = new Date();\r\n    \r\n    const errorMessage = error instanceof Error ? error.message : String(error);\r\n    \r\n    if (this.failureCount >= this.config.failureThreshold) {\r\n      this.state = CircuitState.OPEN;\r\n      this.nextAttempt = Date.now() + this.config.resetTimeout;\r\n      \r\n      logger.error('Circuit breaker is OPEN - too many failures', {\r\n        context,\r\n        failures: this.failureCount,\r\n        threshold: this.config.failureThreshold,\r\n        error: errorMessage,\r\n        nextAttempt: new Date(this.nextAttempt).toISOString()\r\n      });\r\n    } else {\r\n      logger.warn('Circuit breaker failure count increased', {\r\n        context,\r\n        failures: this.failureCount,\r\n        threshold: this.config.failureThreshold,\r\n        error: errorMessage\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current circuit breaker state\r\n   */\r\n  getState(): CircuitState {\r\n    return this.state;\r\n  }\r\n\r\n  /**\r\n   * Get circuit breaker metrics\r\n   */\r\n  getMetrics(): CircuitBreakerMetrics {\r\n    const failureRate = this.totalRequests > 0 ? (this.failedRequests / this.totalRequests) * 100 : 0;\r\n    \r\n    return {\r\n      totalRequests: this.totalRequests,\r\n      successfulRequests: this.totalRequests - this.failedRequests,\r\n      failedRequests: this.failedRequests,\r\n      lastFailureTime: this.lastFailureTime,\r\n      lastSuccessTime: this.lastSuccessTime,\r\n      currentState: this.state,\r\n      failureRate\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get failed requests count\r\n   */\r\n  get failedRequests(): number {\r\n    return this.failureCount;\r\n  }\r\n\r\n  /**\r\n   * Reset circuit breaker to CLOSED state\r\n   */\r\n  reset(): void {\r\n    this.state = CircuitState.CLOSED;\r\n    this.failureCount = 0;\r\n    this.successCount = 0;\r\n    this.nextAttempt = Date.now();\r\n    logger.info('Circuit breaker manually reset to CLOSED');\r\n  }\r\n\r\n  /**\r\n   * Force circuit breaker to OPEN state\r\n   */\r\n  forceOpen(): void {\r\n    this.state = CircuitState.OPEN;\r\n    this.nextAttempt = Date.now() + this.config.resetTimeout;\r\n    logger.warn('Circuit breaker manually forced to OPEN');\r\n  }\r\n\r\n  /**\r\n   * Get current configuration\r\n   */\r\n  getConfig(): CircuitBreakerConfig {\r\n    return { ...this.config };\r\n  }\r\n\r\n  /**\r\n   * Update configuration\r\n   */\r\n  updateConfig(config: Partial<CircuitBreakerConfig>): void {\r\n    this.config = { ...this.config, ...config };\r\n  }\r\n\r\n  /**\r\n   * Check if circuit breaker is healthy\r\n   */\r\n  isHealthy(): boolean {\r\n    return this.state === CircuitState.CLOSED || \r\n           (this.state === CircuitState.HALF_OPEN && this.successCount > 0);\r\n  }\r\n\r\n  /**\r\n   * Get time until next attempt\r\n   */\r\n  getTimeUntilNextAttempt(): number {\r\n    if (this.state !== CircuitState.OPEN) {\r\n      return 0;\r\n    }\r\n    return Math.max(0, this.nextAttempt - Date.now());\r\n  }\r\n}\r\n\r\n/**\r\n * Default circuit breaker instance\r\n */\r\nexport const defaultCircuitBreaker = new CircuitBreaker();\r\n\r\n/**\r\n * Aggressive circuit breaker for critical services\r\n */\r\nexport const aggressiveCircuitBreaker = new CircuitBreaker({\r\n  failureThreshold: 3,\r\n  resetTimeout: 30000, // 30 seconds\r\n  successThreshold: 1\r\n});\r\n\r\n/**\r\n * Conservative circuit breaker for stable services\r\n */\r\nexport const conservativeCircuitBreaker = new CircuitBreaker({\r\n  failureThreshold: 10,\r\n  resetTimeout: 120000, // 2 minutes\r\n  successThreshold: 3\r\n});\r\n"],"version":3}