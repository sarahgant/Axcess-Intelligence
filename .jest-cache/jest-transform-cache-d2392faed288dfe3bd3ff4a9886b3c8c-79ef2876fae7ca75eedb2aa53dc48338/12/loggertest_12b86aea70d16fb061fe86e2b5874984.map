{"file":"C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\tests\\unit\\logger.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\tests\\unit\\logger.test.ts"],"sourcesContent":["import { logger, LogLevel } from '../../src/core/logging/logger';\r\n\r\n// Mock console methods\r\nconst originalConsole = {\r\n    log: console.log,\r\n    error: console.error,\r\n    warn: console.warn\r\n};\r\n\r\nbeforeAll(() => {\r\n    // Mock console methods\r\n    console.log = jest.fn();\r\n    console.error = jest.fn();\r\n    console.warn = jest.fn();\r\n});\r\n\r\nafterAll(() => {\r\n    // Restore console methods\r\n    console.log = originalConsole.log;\r\n    console.error = originalConsole.error;\r\n    console.warn = originalConsole.warn;\r\n});\r\n\r\nbeforeEach(() => {\r\n    jest.clearAllMocks();\r\n    // Clear log buffer\r\n    if (typeof window !== 'undefined') {\r\n        window.__logBuffer = [];\r\n    }\r\n});\r\n\r\ndescribe('Logger', () => {\r\n    describe('Log Levels', () => {\r\n        it('should log debug messages in development', () => {\r\n            logger.debug('Debug message', { test: 'data' });\r\n            expect(console.log).toHaveBeenCalledWith(\r\n                expect.stringContaining('[DEBUG]'),\r\n                'Debug message',\r\n                { test: 'data' }\r\n            );\r\n        });\r\n\r\n        it('should log info messages', () => {\r\n            logger.info('Info message', { test: 'data' });\r\n            expect(console.log).toHaveBeenCalledWith(\r\n                expect.stringContaining('[INFO]'),\r\n                'Info message',\r\n                { test: 'data' }\r\n            );\r\n        });\r\n\r\n        it('should log warning messages', () => {\r\n            logger.warn('Warning message', { test: 'data' });\r\n            expect(console.log).toHaveBeenCalledWith(\r\n                expect.stringContaining('[WARN]'),\r\n                'Warning message',\r\n                { test: 'data' }\r\n            );\r\n        });\r\n\r\n        it('should log error messages', () => {\r\n            logger.error('Error message', { test: 'data' });\r\n            expect(console.log).toHaveBeenCalledWith(\r\n                expect.stringContaining('[ERROR]'),\r\n                'Error message',\r\n                { test: 'data' }\r\n            );\r\n        });\r\n\r\n        it('should log fatal messages', () => {\r\n            logger.fatal('Fatal message', { test: 'data' });\r\n            expect(console.log).toHaveBeenCalledWith(\r\n                expect.stringContaining('[FATAL]'),\r\n                'Fatal message',\r\n                { test: 'data' }\r\n            );\r\n        });\r\n    });\r\n\r\n    describe('Component Logging', () => {\r\n        it('should log with component context', () => {\r\n            const componentLogger = logger.component('TestComponent');\r\n            componentLogger.info('Component message', { test: 'data' });\r\n\r\n            expect(console.log).toHaveBeenCalledWith(\r\n                expect.stringContaining('[INFO]'),\r\n                'Component message',\r\n                { test: 'data' }\r\n            );\r\n        });\r\n    });\r\n\r\n    describe('Action Logging', () => {\r\n        it('should log with action context', () => {\r\n            const actionLogger = logger.action('TestAction');\r\n            actionLogger.info('Action message', { test: 'data' });\r\n\r\n            expect(console.log).toHaveBeenCalledWith(\r\n                expect.stringContaining('[INFO]'),\r\n                'Action message',\r\n                { test: 'data' }\r\n            );\r\n        });\r\n    });\r\n\r\n    describe('Log Buffer', () => {\r\n        it('should store logs in buffer', () => {\r\n            logger.info('Test message', { test: 'data' });\r\n\r\n            const buffer = logger.getLogBuffer();\r\n            expect(buffer).toHaveLength(1);\r\n            expect(buffer[0].message).toBe('Test message');\r\n            expect(buffer[0].meta).toEqual({ test: 'data' });\r\n        });\r\n\r\n        it('should limit buffer to 100 entries', () => {\r\n            // Add 101 logs\r\n            for (let i = 0; i < 101; i++) {\r\n                logger.info(`Message ${i}`);\r\n            }\r\n\r\n            const buffer = logger.getLogBuffer();\r\n            expect(buffer).toHaveLength(100);\r\n            expect(buffer[0].message).toBe('Message 1'); // First message should be removed\r\n            expect(buffer[99].message).toBe('Message 100');\r\n        });\r\n\r\n        it('should clear buffer', () => {\r\n            logger.info('Test message');\r\n            expect(logger.getLogBuffer()).toHaveLength(1);\r\n\r\n            logger.clearLogBuffer();\r\n            expect(logger.getLogBuffer()).toHaveLength(0);\r\n        });\r\n    });\r\n\r\n    describe('Log Export', () => {\r\n        it('should export logs as JSON', () => {\r\n            logger.info('Test message', { test: 'data' });\r\n\r\n            const exported = logger.exportLogs();\r\n            const parsed = JSON.parse(exported);\r\n\r\n            expect(parsed).toHaveLength(1);\r\n            expect(parsed[0].message).toBe('Test message');\r\n            expect(parsed[0].meta).toEqual({ test: 'data' });\r\n            expect(parsed[0]).toHaveProperty('timestamp');\r\n            expect(parsed[0]).toHaveProperty('level');\r\n        });\r\n    });\r\n\r\n    describe('Context Information', () => {\r\n        it('should include correlation ID', () => {\r\n            // Mock sessionStorage\r\n            Object.defineProperty(window, 'sessionStorage', {\r\n                value: {\r\n                    getItem: jest.fn((key) => {\r\n                        if (key === 'correlationId') return 'test-correlation-id';\r\n                        return null;\r\n                    })\r\n                },\r\n                writable: true\r\n            });\r\n\r\n            logger.info('Test message');\r\n\r\n            const buffer = logger.getLogBuffer();\r\n            expect(buffer[0].correlationId).toBe('test-correlation-id');\r\n        });\r\n\r\n        it('should include user ID', () => {\r\n            // Mock sessionStorage\r\n            Object.defineProperty(window, 'sessionStorage', {\r\n                value: {\r\n                    getItem: jest.fn((key) => {\r\n                        if (key === 'userId') return 'test-user-id';\r\n                        return null;\r\n                    })\r\n                },\r\n                writable: true\r\n            });\r\n\r\n            logger.info('Test message');\r\n\r\n            const buffer = logger.getLogBuffer();\r\n            expect(buffer[0].userId).toBe('test-user-id');\r\n        });\r\n\r\n        it('should include session ID', () => {\r\n            // Mock sessionStorage\r\n            Object.defineProperty(window, 'sessionStorage', {\r\n                value: {\r\n                    getItem: jest.fn((key) => {\r\n                        if (key === 'sessionId') return 'test-session-id';\r\n                        return null;\r\n                    })\r\n                },\r\n                writable: true\r\n            });\r\n\r\n            logger.info('Test message');\r\n\r\n            const buffer = logger.getLogBuffer();\r\n            expect(buffer[0].sessionId).toBe('test-session-id');\r\n        });\r\n    });\r\n\r\n    describe('Console Colors', () => {\r\n        it('should use correct colors for different log levels', () => {\r\n            const spy = jest.spyOn(console, 'log');\r\n\r\n            logger.debug('Debug message');\r\n            logger.info('Info message');\r\n            logger.warn('Warning message');\r\n            logger.error('Error message');\r\n            logger.fatal('Fatal message');\r\n\r\n            expect(spy).toHaveBeenCalledWith(\r\n                expect.stringContaining('[DEBUG]'),\r\n                expect.stringContaining('color: gray'),\r\n                'Debug message',\r\n                ''\r\n            );\r\n\r\n            expect(spy).toHaveBeenCalledWith(\r\n                expect.stringContaining('[INFO]'),\r\n                expect.stringContaining('color: blue'),\r\n                'Info message',\r\n                ''\r\n            );\r\n\r\n            expect(spy).toHaveBeenCalledWith(\r\n                expect.stringContaining('[WARN]'),\r\n                expect.stringContaining('color: orange'),\r\n                'Warning message',\r\n                ''\r\n            );\r\n\r\n            expect(spy).toHaveBeenCalledWith(\r\n                expect.stringContaining('[ERROR]'),\r\n                expect.stringContaining('color: red'),\r\n                'Error message',\r\n                ''\r\n            );\r\n\r\n            expect(spy).toHaveBeenCalledWith(\r\n                expect.stringContaining('[FATAL]'),\r\n                expect.stringContaining('color: darkred'),\r\n                'Fatal message',\r\n                ''\r\n            );\r\n        });\r\n    });\r\n\r\n    describe('Global Access', () => {\r\n        it('should be available on window object', () => {\r\n            expect(window.__logger).toBeDefined();\r\n            expect(window.__logger).toBe(logger);\r\n        });\r\n    });\r\n});\r\n"],"version":3}