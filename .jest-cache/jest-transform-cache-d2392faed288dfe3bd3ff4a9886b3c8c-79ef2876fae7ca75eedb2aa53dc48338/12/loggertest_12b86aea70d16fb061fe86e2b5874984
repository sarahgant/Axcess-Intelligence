e0b306664792bb5abb88612301f76810
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = require("../../src/core/logging/logger");
// Mock console methods
const originalConsole = {
    log: console.log,
    error: console.error,
    warn: console.warn
};
beforeAll(() => {
    // Mock console methods
    console.log = jest.fn();
    console.error = jest.fn();
    console.warn = jest.fn();
});
afterAll(() => {
    // Restore console methods
    console.log = originalConsole.log;
    console.error = originalConsole.error;
    console.warn = originalConsole.warn;
});
beforeEach(() => {
    jest.clearAllMocks();
    // Clear log buffer
    if (typeof window !== 'undefined') {
        window.__logBuffer = [];
    }
});
describe('Logger', () => {
    describe('Log Levels', () => {
        it('should log debug messages in development', () => {
            logger_1.logger.debug('Debug message', { test: 'data' });
            expect(console.log).toHaveBeenCalledWith(expect.stringContaining('[DEBUG]'), 'Debug message', { test: 'data' });
        });
        it('should log info messages', () => {
            logger_1.logger.info('Info message', { test: 'data' });
            expect(console.log).toHaveBeenCalledWith(expect.stringContaining('[INFO]'), 'Info message', { test: 'data' });
        });
        it('should log warning messages', () => {
            logger_1.logger.warn('Warning message', { test: 'data' });
            expect(console.log).toHaveBeenCalledWith(expect.stringContaining('[WARN]'), 'Warning message', { test: 'data' });
        });
        it('should log error messages', () => {
            logger_1.logger.error('Error message', { test: 'data' });
            expect(console.log).toHaveBeenCalledWith(expect.stringContaining('[ERROR]'), 'Error message', { test: 'data' });
        });
        it('should log fatal messages', () => {
            logger_1.logger.fatal('Fatal message', { test: 'data' });
            expect(console.log).toHaveBeenCalledWith(expect.stringContaining('[FATAL]'), 'Fatal message', { test: 'data' });
        });
    });
    describe('Component Logging', () => {
        it('should log with component context', () => {
            const componentLogger = logger_1.logger.component('TestComponent');
            componentLogger.info('Component message', { test: 'data' });
            expect(console.log).toHaveBeenCalledWith(expect.stringContaining('[INFO]'), 'Component message', { test: 'data' });
        });
    });
    describe('Action Logging', () => {
        it('should log with action context', () => {
            const actionLogger = logger_1.logger.action('TestAction');
            actionLogger.info('Action message', { test: 'data' });
            expect(console.log).toHaveBeenCalledWith(expect.stringContaining('[INFO]'), 'Action message', { test: 'data' });
        });
    });
    describe('Log Buffer', () => {
        it('should store logs in buffer', () => {
            logger_1.logger.info('Test message', { test: 'data' });
            const buffer = logger_1.logger.getLogBuffer();
            expect(buffer).toHaveLength(1);
            expect(buffer[0].message).toBe('Test message');
            expect(buffer[0].meta).toEqual({ test: 'data' });
        });
        it('should limit buffer to 100 entries', () => {
            // Add 101 logs
            for (let i = 0; i < 101; i++) {
                logger_1.logger.info(`Message ${i}`);
            }
            const buffer = logger_1.logger.getLogBuffer();
            expect(buffer).toHaveLength(100);
            expect(buffer[0].message).toBe('Message 1'); // First message should be removed
            expect(buffer[99].message).toBe('Message 100');
        });
        it('should clear buffer', () => {
            logger_1.logger.info('Test message');
            expect(logger_1.logger.getLogBuffer()).toHaveLength(1);
            logger_1.logger.clearLogBuffer();
            expect(logger_1.logger.getLogBuffer()).toHaveLength(0);
        });
    });
    describe('Log Export', () => {
        it('should export logs as JSON', () => {
            logger_1.logger.info('Test message', { test: 'data' });
            const exported = logger_1.logger.exportLogs();
            const parsed = JSON.parse(exported);
            expect(parsed).toHaveLength(1);
            expect(parsed[0].message).toBe('Test message');
            expect(parsed[0].meta).toEqual({ test: 'data' });
            expect(parsed[0]).toHaveProperty('timestamp');
            expect(parsed[0]).toHaveProperty('level');
        });
    });
    describe('Context Information', () => {
        it('should include correlation ID', () => {
            // Mock sessionStorage
            Object.defineProperty(window, 'sessionStorage', {
                value: {
                    getItem: jest.fn((key) => {
                        if (key === 'correlationId')
                            return 'test-correlation-id';
                        return null;
                    })
                },
                writable: true
            });
            logger_1.logger.info('Test message');
            const buffer = logger_1.logger.getLogBuffer();
            expect(buffer[0].correlationId).toBe('test-correlation-id');
        });
        it('should include user ID', () => {
            // Mock sessionStorage
            Object.defineProperty(window, 'sessionStorage', {
                value: {
                    getItem: jest.fn((key) => {
                        if (key === 'userId')
                            return 'test-user-id';
                        return null;
                    })
                },
                writable: true
            });
            logger_1.logger.info('Test message');
            const buffer = logger_1.logger.getLogBuffer();
            expect(buffer[0].userId).toBe('test-user-id');
        });
        it('should include session ID', () => {
            // Mock sessionStorage
            Object.defineProperty(window, 'sessionStorage', {
                value: {
                    getItem: jest.fn((key) => {
                        if (key === 'sessionId')
                            return 'test-session-id';
                        return null;
                    })
                },
                writable: true
            });
            logger_1.logger.info('Test message');
            const buffer = logger_1.logger.getLogBuffer();
            expect(buffer[0].sessionId).toBe('test-session-id');
        });
    });
    describe('Console Colors', () => {
        it('should use correct colors for different log levels', () => {
            const spy = jest.spyOn(console, 'log');
            logger_1.logger.debug('Debug message');
            logger_1.logger.info('Info message');
            logger_1.logger.warn('Warning message');
            logger_1.logger.error('Error message');
            logger_1.logger.fatal('Fatal message');
            expect(spy).toHaveBeenCalledWith(expect.stringContaining('[DEBUG]'), expect.stringContaining('color: gray'), 'Debug message', '');
            expect(spy).toHaveBeenCalledWith(expect.stringContaining('[INFO]'), expect.stringContaining('color: blue'), 'Info message', '');
            expect(spy).toHaveBeenCalledWith(expect.stringContaining('[WARN]'), expect.stringContaining('color: orange'), 'Warning message', '');
            expect(spy).toHaveBeenCalledWith(expect.stringContaining('[ERROR]'), expect.stringContaining('color: red'), 'Error message', '');
            expect(spy).toHaveBeenCalledWith(expect.stringContaining('[FATAL]'), expect.stringContaining('color: darkred'), 'Fatal message', '');
        });
    });
    describe('Global Access', () => {
        it('should be available on window object', () => {
            expect(window.__logger).toBeDefined();
            expect(window.__logger).toBe(logger_1.logger);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,