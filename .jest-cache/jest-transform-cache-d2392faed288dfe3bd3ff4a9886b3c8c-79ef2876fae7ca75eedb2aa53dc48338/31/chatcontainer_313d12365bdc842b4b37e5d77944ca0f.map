{"file":"C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\src\\components\\ui\\chat-container.tsx","mappings":"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","names":[],"sources":["C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\src\\components\\ui\\chat-container.tsx"],"sourcesContent":["import * as React from \"react\";\r\nimport { cn } from \"../../lib/utils\";\r\nimport { ChatMessage, ChatMessageProps } from \"./chat-message\";\r\nimport { ChatInput } from \"./chat-input\";\r\n\r\nexport interface Message {\r\n  id: string;\r\n  content: string;\r\n  isUser: boolean;\r\n  timestamp: Date;\r\n  isStreaming?: boolean;\r\n  citations?: Array<{\r\n    text: string;\r\n    url: string;\r\n  }>;\r\n  feedback?: \"up\" | \"down\" | null;\r\n}\r\n\r\nexport interface ChatContainerProps {\r\n  messages: Message[];\r\n  onSendMessage: (message: string) => void;\r\n  onStopStreaming?: () => void;\r\n  onMessageFeedback?: (messageId: string, feedback: \"up\" | \"down\") => void;\r\n  onMessageCopy?: (messageId: string) => void;\r\n  isStreaming?: boolean;\r\n  className?: string;\r\n  placeholder?: string;\r\n  disabled?: boolean;\r\n}\r\n\r\nconst ChatContainer: React.FC<ChatContainerProps> = ({\r\n  messages,\r\n  onSendMessage,\r\n  onStopStreaming,\r\n  onMessageFeedback,\r\n  onMessageCopy,\r\n  isStreaming = false,\r\n  className,\r\n  placeholder,\r\n  disabled = false,\r\n}) => {\r\n  const messagesEndRef = React.useRef<HTMLDivElement>(null);\r\n  const messagesContainerRef = React.useRef<HTMLDivElement>(null);\r\n\r\n  // Auto-scroll to newest message\r\n  const scrollToBottom = React.useCallback(() => {\r\n    messagesEndRef.current?.scrollIntoView({ \r\n      behavior: \"smooth\",\r\n      block: \"nearest\"\r\n    });\r\n  }, []);\r\n\r\n  // Scroll to bottom when new messages appear\r\n  React.useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages, scrollToBottom]);\r\n\r\n  // Handle message feedback\r\n  const handleMessageFeedback = (messageId: string, feedback: \"up\" | \"down\") => {\r\n    onMessageFeedback?.(messageId, feedback);\r\n  };\r\n\r\n  // Handle message copy\r\n  const handleMessageCopy = (messageId: string) => {\r\n    onMessageCopy?.(messageId);\r\n  };\r\n\r\n  // Handle send message\r\n  const handleSendMessage = (message: string) => {\r\n    if (!disabled) {\r\n      onSendMessage(message);\r\n    }\r\n  };\r\n\r\n  // Handle stop streaming\r\n  const handleStopStreaming = () => {\r\n    onStopStreaming?.();\r\n  };\r\n\r\n  return (\r\n    <div className={cn(\"flex flex-col h-full bg-background\", className)}>\r\n      {/* Messages container */}\r\n      <div \r\n        ref={messagesContainerRef}\r\n        className=\"flex-1 overflow-y-auto px-4 py-6 space-y-4\"\r\n        role=\"log\"\r\n        aria-live=\"polite\"\r\n        aria-label=\"Chat conversation\"\r\n      >\r\n        {messages.length === 0 ? (\r\n          <div className=\"flex items-center justify-center h-full text-center\">\r\n            <div className=\"max-w-md\">\r\n              <div className=\"text-lg font-medium text-muted-foreground mb-2\">\r\n                Start a conversation\r\n              </div>\r\n              <div className=\"text-sm text-muted-foreground/75\">\r\n                Ask questions about tax law, document analysis, or get research assistance\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <>\r\n            {messages.map((message) => (\r\n              <ChatMessage\r\n                key={message.id}\r\n                message={message.content}\r\n                isUser={message.isUser}\r\n                isStreaming={message.isStreaming}\r\n                citations={message.citations}\r\n                timestamp={message.timestamp}\r\n                feedbackValue={message.feedback}\r\n                onCopy={() => handleMessageCopy(message.id)}\r\n                onFeedback={(feedback) => handleMessageFeedback(message.id, feedback)}\r\n              />\r\n            ))}\r\n            <div ref={messagesEndRef} />\r\n          </>\r\n        )}\r\n      </div>\r\n\r\n      {/* Chat input */}\r\n      <ChatInput\r\n        onSend={handleSendMessage}\r\n        onStop={handleStopStreaming}\r\n        isStreaming={isStreaming}\r\n        disabled={disabled}\r\n        placeholder={placeholder || \"Type your message... (Enter to send, Shift+Enter for new line)\"}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { ChatContainer };\r\nexport type { ChatContainerProps, Message };"],"version":3}