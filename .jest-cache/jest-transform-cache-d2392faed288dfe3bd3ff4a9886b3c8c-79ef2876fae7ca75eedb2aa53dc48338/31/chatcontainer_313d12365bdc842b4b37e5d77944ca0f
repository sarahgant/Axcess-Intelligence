c97f136ba0b692ebd394bbf1a8f2c70e
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatContainer = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const React = __importStar(require("react"));
const utils_1 = require("../../lib/utils");
const chat_message_1 = require("./chat-message");
const chat_input_1 = require("./chat-input");
const ChatContainer = ({ messages, onSendMessage, onStopStreaming, onMessageFeedback, onMessageCopy, isStreaming = false, className, placeholder, disabled = false, }) => {
    const messagesEndRef = React.useRef(null);
    const messagesContainerRef = React.useRef(null);
    // Auto-scroll to newest message
    const scrollToBottom = React.useCallback(() => {
        messagesEndRef.current?.scrollIntoView({
            behavior: "smooth",
            block: "nearest"
        });
    }, []);
    // Scroll to bottom when new messages appear
    React.useEffect(() => {
        scrollToBottom();
    }, [messages, scrollToBottom]);
    // Handle message feedback
    const handleMessageFeedback = (messageId, feedback) => {
        onMessageFeedback?.(messageId, feedback);
    };
    // Handle message copy
    const handleMessageCopy = (messageId) => {
        onMessageCopy?.(messageId);
    };
    // Handle send message
    const handleSendMessage = (message) => {
        if (!disabled) {
            onSendMessage(message);
        }
    };
    // Handle stop streaming
    const handleStopStreaming = () => {
        onStopStreaming?.();
    };
    return ((0, jsx_runtime_1.jsxs)("div", { className: (0, utils_1.cn)("flex flex-col h-full bg-background", className), children: [(0, jsx_runtime_1.jsx)("div", { ref: messagesContainerRef, className: "flex-1 overflow-y-auto px-4 py-6 space-y-4", role: "log", "aria-live": "polite", "aria-label": "Chat conversation", children: messages.length === 0 ? ((0, jsx_runtime_1.jsx)("div", { className: "flex items-center justify-center h-full text-center", children: (0, jsx_runtime_1.jsxs)("div", { className: "max-w-md", children: [(0, jsx_runtime_1.jsx)("div", { className: "text-lg font-medium text-muted-foreground mb-2", children: "Start a conversation" }), (0, jsx_runtime_1.jsx)("div", { className: "text-sm text-muted-foreground/75", children: "Ask questions about tax law, document analysis, or get research assistance" })] }) })) : ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [messages.map((message) => ((0, jsx_runtime_1.jsx)(chat_message_1.ChatMessage, { message: message.content, isUser: message.isUser, isStreaming: message.isStreaming, citations: message.citations, timestamp: message.timestamp, feedbackValue: message.feedback, onCopy: () => handleMessageCopy(message.id), onFeedback: (feedback) => handleMessageFeedback(message.id, feedback) }, message.id))), (0, jsx_runtime_1.jsx)("div", { ref: messagesEndRef })] })) }), (0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: handleSendMessage, onStop: handleStopStreaming, isStreaming: isStreaming, disabled: disabled, placeholder: placeholder || "Type your message... (Enter to send, Shift+Enter for new line)" })] }));
};
exports.ChatContainer = ChatContainer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,