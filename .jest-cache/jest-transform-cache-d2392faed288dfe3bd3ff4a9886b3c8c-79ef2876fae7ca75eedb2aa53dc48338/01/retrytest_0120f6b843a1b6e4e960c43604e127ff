f2f3b78be8330472d58c388fcbf8856f
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Mock the logger to avoid console output during tests
jest.mock('../../src/core/logging/logger', () => ({
    logger: {
        debug: jest.fn(),
        info: jest.fn(),
        warn: jest.fn(),
        error: jest.fn(),
        fatal: jest.fn()
    }
}));
const retry_1 = require("../../src/core/utils/retry");
describe('RetryWithBackoff', () => {
    beforeEach(() => {
        jest.clearAllMocks();
        jest.useFakeTimers();
    });
    afterEach(() => {
        jest.useRealTimers();
    });
    describe('Configuration', () => {
        it('should use default configuration when no config provided', () => {
            const retry = new retry_1.RetryWithBackoff();
            const config = retry.getConfig();
            expect(config.maxAttempts).toBe(3);
            expect(config.initialDelay).toBe(1000);
            expect(config.maxDelay).toBe(10000);
            expect(config.backoffMultiplier).toBe(2);
            expect(config.retryableErrors).toContain('NETWORK_ERROR');
            expect(config.retryableErrors).toContain('TIMEOUT');
        });
        it('should merge custom configuration with defaults', () => {
            const retry = new retry_1.RetryWithBackoff({
                maxAttempts: 5,
                initialDelay: 500
            });
            const config = retry.getConfig();
            expect(config.maxAttempts).toBe(5);
            expect(config.initialDelay).toBe(500);
            expect(config.maxDelay).toBe(10000); // Default
            expect(config.backoffMultiplier).toBe(2); // Default
        });
        it('should update configuration after creation', () => {
            const retry = new retry_1.RetryWithBackoff();
            retry.updateConfig({ maxAttempts: 10 });
            expect(retry.getConfig().maxAttempts).toBe(10);
        });
    });
    describe('Successful execution', () => {
        it('should return result immediately on success', async () => {
            const retry = new retry_1.RetryWithBackoff();
            const mockFn = jest.fn().mockResolvedValue('success');
            const result = await retry.execute(mockFn, 'test');
            expect(result).toBe('success');
            expect(mockFn).toHaveBeenCalledTimes(1);
        });
        it('should succeed after some failures', async () => {
            const retry = new retry_1.RetryWithBackoff({ maxAttempts: 3 });
            const mockFn = jest.fn()
                .mockRejectedValueOnce(new Error('NETWORK_ERROR'))
                .mockRejectedValueOnce(new Error('TIMEOUT'))
                .mockResolvedValue('success');
            const result = await retry.execute(mockFn, 'test');
            expect(result).toBe('success');
            expect(mockFn).toHaveBeenCalledTimes(3);
        });
    });
    describe('Failed execution', () => {
        it('should throw error after max attempts', async () => {
            const retry = new retry_1.RetryWithBackoff({ maxAttempts: 2 });
            const mockFn = jest.fn().mockRejectedValue(new Error('NETWORK_ERROR'));
            await expect(retry.execute(mockFn, 'test')).rejects.toThrow('NETWORK_ERROR');
            expect(mockFn).toHaveBeenCalledTimes(2);
        });
        it('should not retry non-retryable errors', async () => {
            const retry = new retry_1.RetryWithBackoff({ maxAttempts: 3 });
            const mockFn = jest.fn().mockRejectedValue(new Error('AUTHENTICATION_FAILED'));
            await expect(retry.execute(mockFn, 'test')).rejects.toThrow('AUTHENTICATION_FAILED');
            expect(mockFn).toHaveBeenCalledTimes(1); // Should not retry
        });
    });
    describe('Delay calculation', () => {
        it('should calculate exponential backoff delays', async () => {
            const retry = new retry_1.RetryWithBackoff({
                initialDelay: 1000,
                backoffMultiplier: 2,
                maxDelay: 5000
            });
            const mockFn = jest.fn()
                .mockRejectedValueOnce(new Error('NETWORK_ERROR'))
                .mockRejectedValueOnce(new Error('TIMEOUT'))
                .mockResolvedValue('success');
            const startTime = Date.now();
            // Start the execution
            const promise = retry.execute(mockFn, 'test');
            // Fast-forward through delays
            jest.advanceTimersByTime(1000); // First delay
            jest.advanceTimersByTime(2000); // Second delay
            const result = await promise;
            expect(result).toBe('success');
            expect(mockFn).toHaveBeenCalledTimes(3);
        });
        it('should respect max delay limit', async () => {
            const retry = new retry_1.RetryWithBackoff({
                initialDelay: 1000,
                backoffMultiplier: 10, // Very aggressive
                maxDelay: 2000
            });
            const mockFn = jest.fn()
                .mockRejectedValueOnce(new Error('NETWORK_ERROR'))
                .mockRejectedValueOnce(new Error('TIMEOUT'))
                .mockResolvedValue('success');
            const promise = retry.execute(mockFn, 'test');
            // Should cap at maxDelay (2000ms) instead of 10000ms
            jest.advanceTimersByTime(1000); // First delay
            jest.advanceTimersByTime(2000); // Second delay (capped)
            const result = await promise;
            expect(result).toBe('success');
        });
    });
    describe('Error detection', () => {
        it('should detect retryable errors by message', () => {
            const retry = new retry_1.RetryWithBackoff();
            const mockFn = jest.fn().mockRejectedValue(new Error('NETWORK_ERROR occurred'));
            const promise = retry.execute(mockFn, 'test');
            // Should retry because 'NETWORK_ERROR' is in the message
            expect(mockFn).toHaveBeenCalledTimes(1);
            // Fast-forward through retries
            jest.advanceTimersByTime(1000);
            jest.advanceTimersByTime(2000);
            jest.advanceTimersByTime(4000);
            return expect(promise).rejects.toThrow('NETWORK_ERROR occurred');
        });
        it('should detect retryable errors by code', () => {
            const retry = new retry_1.RetryWithBackoff();
            const error = new Error('Connection failed');
            error.code = 'ECONNABORTED';
            const mockFn = jest.fn().mockRejectedValue(error);
            const promise = retry.execute(mockFn, 'test');
            // Should retry because 'ECONNABORTED' is in the error code
            expect(mockFn).toHaveBeenCalledTimes(1);
            // Fast-forward through retries
            jest.advanceTimersByTime(1000);
            jest.advanceTimersByTime(2000);
            jest.advanceTimersByTime(4000);
            return expect(promise).rejects.toThrow('Connection failed');
        });
    });
    describe('executeWithResult', () => {
        it('should return detailed result on success', async () => {
            const retry = new retry_1.RetryWithBackoff();
            const mockFn = jest.fn().mockResolvedValue('success');
            const result = await retry.executeWithResult(mockFn, 'test');
            expect(result.success).toBe(true);
            expect(result.data).toBe('success');
            expect(result.attempts).toBe(1);
            expect(result.totalTime).toBeGreaterThan(0);
            expect(result.error).toBeUndefined();
        });
        it('should return detailed result on failure', async () => {
            const retry = new retry_1.RetryWithBackoff({ maxAttempts: 2 });
            const mockFn = jest.fn().mockRejectedValue(new Error('NETWORK_ERROR'));
            const result = await retry.executeWithResult(mockFn, 'test');
            expect(result.success).toBe(false);
            expect(result.data).toBeUndefined();
            expect(result.attempts).toBe(2);
            expect(result.totalTime).toBeGreaterThan(0);
            expect(result.error).toBeInstanceOf(Error);
            expect(result.error?.message).toBe('NETWORK_ERROR');
        });
    });
    describe('Pre-configured instances', () => {
        it('should have different configurations for different use cases', () => {
            const defaultConfig = retry_1.defaultRetry.getConfig();
            const quickConfig = retry_1.quickRetry.getConfig();
            const aggressiveConfig = retry_1.aggressiveRetry.getConfig();
            expect(defaultConfig.maxAttempts).toBe(3);
            expect(quickConfig.maxAttempts).toBe(2);
            expect(aggressiveConfig.maxAttempts).toBe(5);
            expect(quickConfig.initialDelay).toBe(500);
            expect(aggressiveConfig.initialDelay).toBe(2000);
        });
    });
    describe('Context logging', () => {
        it('should include context in retry attempts', async () => {
            const retry = new retry_1.RetryWithBackoff({ maxAttempts: 2 });
            const mockFn = jest.fn().mockRejectedValue(new Error('NETWORK_ERROR'));
            const promise = retry.execute(mockFn, 'API_CALL');
            // Fast-forward through retries
            jest.advanceTimersByTime(1000);
            await expect(promise).rejects.toThrow('NETWORK_ERROR');
            // The logger should have been called with context information
            // (We can't easily test the logger calls due to the mock, but the functionality is there)
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,