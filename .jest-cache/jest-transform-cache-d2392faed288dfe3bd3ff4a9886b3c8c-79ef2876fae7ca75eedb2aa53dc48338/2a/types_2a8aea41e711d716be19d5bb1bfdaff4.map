{"version":3,"names":["cov_j1q8csq19","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","PromptError","Error","constructor","message","code","templateId","details","exports","PromptValidationError","validationDetails","PromptCompilationError","compilationDetails","PromptNotFoundError"],"sources":["C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\src\\prompts\\types.ts"],"sourcesContent":["/**\r\n * Type definitions for the prompt management system\r\n */\r\n\r\n/**\r\n * Supported AI model providers\r\n */\r\nexport type ModelProvider = 'anthropic' | 'openai';\r\n\r\n/**\r\n * Prompt categories for organization\r\n */\r\nexport type PromptCategory = 'system' | 'user' | 'assistant' | 'tool' | 'rag' | 'document' | 'chat';\r\n\r\n/**\r\n * Prompt template interface\r\n */\r\nexport interface PromptTemplate {\r\n  /** Unique identifier for the prompt */\r\n  id: string;\r\n  \r\n  /** Human-readable name */\r\n  name: string;\r\n  \r\n  /** Category for organization */\r\n  category: PromptCategory;\r\n  \r\n  /** Main prompt template with variable placeholders */\r\n  template: string;\r\n  \r\n  /** List of variable names used in the template */\r\n  variables: string[];\r\n  \r\n  /** Model-specific prompt variants */\r\n  modelSpecific?: {\r\n    anthropic?: string;\r\n    openai?: string;\r\n  };\r\n  \r\n  /** Version for tracking changes */\r\n  version: string;\r\n  \r\n  /** Metadata about the prompt */\r\n  metadata: PromptMetadata;\r\n  \r\n  /** Optional validation rules for variables */\r\n  validation?: PromptValidation;\r\n  \r\n  /** Optional examples for documentation */\r\n  examples?: PromptExample[];\r\n}\r\n\r\n/**\r\n * Prompt metadata interface\r\n */\r\nexport interface PromptMetadata {\r\n  /** Author of the prompt */\r\n  author: string;\r\n  \r\n  /** Last modification date */\r\n  lastModified: Date;\r\n  \r\n  /** Description of the prompt's purpose */\r\n  description: string;\r\n  \r\n  /** Tags for categorization and search */\r\n  tags: string[];\r\n  \r\n  /** Usage notes or instructions */\r\n  usage?: string;\r\n  \r\n  /** Whether this is a system-critical prompt */\r\n  isCritical?: boolean;\r\n  \r\n  /** Estimated token count (for cost estimation) */\r\n  estimatedTokens?: number;\r\n}\r\n\r\n/**\r\n * Variable validation rules\r\n */\r\nexport interface PromptValidation {\r\n  /** Required variables that must be provided */\r\n  required: string[];\r\n  \r\n  /** Optional variables with default values */\r\n  optional?: Record<string, any>;\r\n  \r\n  /** Variable type definitions */\r\n  types?: Record<string, 'string' | 'number' | 'boolean' | 'array' | 'object'>;\r\n  \r\n  /** Custom validation functions */\r\n  validators?: Record<string, (value: any) => boolean | string>;\r\n}\r\n\r\n/**\r\n * Example usage of a prompt\r\n */\r\nexport interface PromptExample {\r\n  /** Example name/title */\r\n  name: string;\r\n  \r\n  /** Description of the example */\r\n  description: string;\r\n  \r\n  /** Variable values for the example */\r\n  variables: Record<string, any>;\r\n  \r\n  /** Expected output or behavior */\r\n  expectedOutput?: string;\r\n  \r\n  /** Model-specific examples */\r\n  modelSpecific?: {\r\n    anthropic?: string;\r\n    openai?: string;\r\n  };\r\n}\r\n\r\n/**\r\n * Compiled prompt result\r\n */\r\nexport interface CompiledPrompt {\r\n  /** Original template ID */\r\n  templateId: string;\r\n  \r\n  /** Compiled prompt text */\r\n  text: string;\r\n  \r\n  /** Provider it was compiled for */\r\n  provider?: ModelProvider;\r\n  \r\n  /** Variables used in compilation */\r\n  variables: Record<string, any>;\r\n  \r\n  /** Compilation metadata */\r\n  metadata: {\r\n    compiledAt: Date;\r\n    templateVersion: string;\r\n    estimatedTokens?: number;\r\n  };\r\n}\r\n\r\n/**\r\n * Prompt registry configuration\r\n */\r\nexport interface PromptRegistryConfig {\r\n  /** Whether to enable strict validation */\r\n  strictValidation: boolean;\r\n  \r\n  /** Whether to cache compiled prompts */\r\n  enableCaching: boolean;\r\n  \r\n  /** Cache TTL in milliseconds */\r\n  cacheTTL: number;\r\n  \r\n  /** Whether to log prompt usage */\r\n  enableLogging: boolean;\r\n  \r\n  /** Default model provider for compilation */\r\n  defaultProvider?: ModelProvider;\r\n}\r\n\r\n/**\r\n * Prompt search criteria\r\n */\r\nexport interface PromptSearchCriteria {\r\n  /** Search by category */\r\n  category?: PromptCategory;\r\n  \r\n  /** Search by tags */\r\n  tags?: string[];\r\n  \r\n  /** Text search in name/description */\r\n  query?: string;\r\n  \r\n  /** Filter by author */\r\n  author?: string;\r\n  \r\n  /** Filter by criticality */\r\n  isCritical?: boolean;\r\n  \r\n  /** Filter by model provider support */\r\n  supportedProvider?: ModelProvider;\r\n}\r\n\r\n/**\r\n * Prompt usage statistics\r\n */\r\nexport interface PromptUsageStats {\r\n  /** Prompt template ID */\r\n  templateId: string;\r\n  \r\n  /** Total usage count */\r\n  usageCount: number;\r\n  \r\n  /** Last used timestamp */\r\n  lastUsed: Date;\r\n  \r\n  /** Average compilation time */\r\n  avgCompilationTime: number;\r\n  \r\n  /** Error count */\r\n  errorCount: number;\r\n  \r\n  /** Most common variable values */\r\n  commonVariables: Record<string, any[]>;\r\n}\r\n\r\n/**\r\n * Prompt compilation options\r\n */\r\nexport interface CompilationOptions {\r\n  /** Target model provider */\r\n  provider?: ModelProvider;\r\n  \r\n  /** Whether to validate variables */\r\n  validate?: boolean;\r\n  \r\n  /** Whether to use cached result if available */\r\n  useCache?: boolean;\r\n  \r\n  /** Additional context for compilation */\r\n  context?: Record<string, any>;\r\n  \r\n  /** Whether to escape special characters */\r\n  escapeHtml?: boolean;\r\n  \r\n  /** Maximum allowed token count */\r\n  maxTokens?: number;\r\n}\r\n\r\n/**\r\n * Prompt template builder for creating prompts programmatically\r\n */\r\nexport interface PromptTemplateBuilder {\r\n  /** Set the prompt ID */\r\n  id(id: string): PromptTemplateBuilder;\r\n  \r\n  /** Set the prompt name */\r\n  name(name: string): PromptTemplateBuilder;\r\n  \r\n  /** Set the category */\r\n  category(category: PromptCategory): PromptTemplateBuilder;\r\n  \r\n  /** Set the template content */\r\n  template(template: string): PromptTemplateBuilder;\r\n  \r\n  /** Add variables */\r\n  variables(...variables: string[]): PromptTemplateBuilder;\r\n  \r\n  /** Set model-specific variants */\r\n  modelSpecific(variants: { anthropic?: string; openai?: string }): PromptTemplateBuilder;\r\n  \r\n  /** Set version */\r\n  version(version: string): PromptTemplateBuilder;\r\n  \r\n  /** Add metadata */\r\n  metadata(metadata: Partial<PromptMetadata>): PromptTemplateBuilder;\r\n  \r\n  /** Add validation rules */\r\n  validation(validation: PromptValidation): PromptTemplateBuilder;\r\n  \r\n  /** Add examples */\r\n  examples(...examples: PromptExample[]): PromptTemplateBuilder;\r\n  \r\n  /** Build the final prompt template */\r\n  build(): PromptTemplate;\r\n}\r\n\r\n/**\r\n * Error types for prompt operations\r\n */\r\nexport class PromptError extends Error {\r\n  constructor(\r\n    message: string,\r\n    public code: string,\r\n    public templateId?: string,\r\n    public details?: any\r\n  ) {\r\n    super(message);\r\n    this.name = 'PromptError';\r\n  }\r\n}\r\n\r\nexport class PromptValidationError extends PromptError {\r\n  constructor(message: string, templateId?: string, validationDetails?: any) {\r\n    super(message, 'VALIDATION_ERROR', templateId, validationDetails);\r\n    this.name = 'PromptValidationError';\r\n  }\r\n}\r\n\r\nexport class PromptCompilationError extends PromptError {\r\n  constructor(message: string, templateId?: string, compilationDetails?: any) {\r\n    super(message, 'COMPILATION_ERROR', templateId, compilationDetails);\r\n    this.name = 'PromptCompilationError';\r\n  }\r\n}\r\n\r\nexport class PromptNotFoundError extends PromptError {\r\n  constructor(templateId: string) {\r\n    super(`Prompt template not found: ${templateId}`, 'NOT_FOUND', templateId);\r\n    this.name = 'PromptNotFoundError';\r\n  }\r\n}"],"mappings":"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","ignoreList":[]}