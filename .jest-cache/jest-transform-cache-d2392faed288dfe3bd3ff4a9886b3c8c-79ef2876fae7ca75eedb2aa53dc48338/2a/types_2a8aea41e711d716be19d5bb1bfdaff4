ef061c1cfc0ed7ee0d2506be9a65fe43
"use strict";

/**
 * Type definitions for the prompt management system
 */
/* istanbul ignore next */
function cov_j1q8csq19() {
  var path = "C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\src\\prompts\\types.ts";
  var hash = "de476017c86c693d3b6372d685af984808cbf48a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\src\\prompts\\types.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "1": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 124
        }
      },
      "2": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 23
        }
      },
      "3": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 25
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 37
        }
      },
      "5": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 31
        }
      },
      "6": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 34
        }
      },
      "7": {
        start: {
          line: 19,
          column: 0
        },
        end: {
          line: 19,
          column: 34
        }
      },
      "8": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 74
        }
      },
      "9": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 44
        }
      },
      "10": {
        start: {
          line: 26,
          column: 0
        },
        end: {
          line: 26,
          column: 54
        }
      },
      "11": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 76
        }
      },
      "12": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 45
        }
      },
      "13": {
        start: {
          line: 33,
          column: 0
        },
        end: {
          line: 33,
          column: 56
        }
      },
      "14": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 83
        }
      },
      "15": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 42
        }
      },
      "16": {
        start: {
          line: 40,
          column: 0
        },
        end: {
          line: 40,
          column: 50
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 5
          }
        },
        loc: {
          start: {
            line: 11,
            column: 52
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 11
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 56
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 21
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        loc: {
          start: {
            line: 28,
            column: 57
          },
          end: {
            line: 31,
            column: 5
          }
        },
        line: 28
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        },
        loc: {
          start: {
            line: 35,
            column: 28
          },
          end: {
            line: 38,
            column: 5
          }
        },
        line: 35
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {},
    inputSourceMap: {
      file: "C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\src\\prompts\\types.ts",
      mappings: ";AAAA;;GAEG;;;AA2QH;;GAEG;AACH,MAAa,WAAY,SAAQ,KAAK;IACpC,YACE,OAAe,EACR,IAAY,EACZ,UAAmB,EACnB,OAAa;QAEpB,KAAK,CAAC,OAAO,CAAC,CAAC;QAJR,SAAI,GAAJ,IAAI,CAAQ;QACZ,eAAU,GAAV,UAAU,CAAS;QACnB,YAAO,GAAP,OAAO,CAAM;QAGpB,IAAI,CAAC,IAAI,GAAG,aAAa,CAAC;IAC5B,CAAC;CACF;AAVD,kCAUC;AAED,MAAa,qBAAsB,SAAQ,WAAW;IACpD,YAAY,OAAe,EAAE,UAAmB,EAAE,iBAAuB;QACvE,KAAK,CAAC,OAAO,EAAE,kBAAkB,EAAE,UAAU,EAAE,iBAAiB,CAAC,CAAC;QAClE,IAAI,CAAC,IAAI,GAAG,uBAAuB,CAAC;IACtC,CAAC;CACF;AALD,sDAKC;AAED,MAAa,sBAAuB,SAAQ,WAAW;IACrD,YAAY,OAAe,EAAE,UAAmB,EAAE,kBAAwB;QACxE,KAAK,CAAC,OAAO,EAAE,mBAAmB,EAAE,UAAU,EAAE,kBAAkB,CAAC,CAAC;QACpE,IAAI,CAAC,IAAI,GAAG,wBAAwB,CAAC;IACvC,CAAC;CACF;AALD,wDAKC;AAED,MAAa,mBAAoB,SAAQ,WAAW;IAClD,YAAY,UAAkB;QAC5B,KAAK,CAAC,8BAA8B,UAAU,EAAE,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC;QAC3E,IAAI,CAAC,IAAI,GAAG,qBAAqB,CAAC;IACpC,CAAC;CACF;AALD,kDAKC",
      names: [],
      sources: ["C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\src\\prompts\\types.ts"],
      sourcesContent: ["/**\r\n * Type definitions for the prompt management system\r\n */\r\n\r\n/**\r\n * Supported AI model providers\r\n */\r\nexport type ModelProvider = 'anthropic' | 'openai';\r\n\r\n/**\r\n * Prompt categories for organization\r\n */\r\nexport type PromptCategory = 'system' | 'user' | 'assistant' | 'tool' | 'rag' | 'document' | 'chat';\r\n\r\n/**\r\n * Prompt template interface\r\n */\r\nexport interface PromptTemplate {\r\n  /** Unique identifier for the prompt */\r\n  id: string;\r\n  \r\n  /** Human-readable name */\r\n  name: string;\r\n  \r\n  /** Category for organization */\r\n  category: PromptCategory;\r\n  \r\n  /** Main prompt template with variable placeholders */\r\n  template: string;\r\n  \r\n  /** List of variable names used in the template */\r\n  variables: string[];\r\n  \r\n  /** Model-specific prompt variants */\r\n  modelSpecific?: {\r\n    anthropic?: string;\r\n    openai?: string;\r\n  };\r\n  \r\n  /** Version for tracking changes */\r\n  version: string;\r\n  \r\n  /** Metadata about the prompt */\r\n  metadata: PromptMetadata;\r\n  \r\n  /** Optional validation rules for variables */\r\n  validation?: PromptValidation;\r\n  \r\n  /** Optional examples for documentation */\r\n  examples?: PromptExample[];\r\n}\r\n\r\n/**\r\n * Prompt metadata interface\r\n */\r\nexport interface PromptMetadata {\r\n  /** Author of the prompt */\r\n  author: string;\r\n  \r\n  /** Last modification date */\r\n  lastModified: Date;\r\n  \r\n  /** Description of the prompt's purpose */\r\n  description: string;\r\n  \r\n  /** Tags for categorization and search */\r\n  tags: string[];\r\n  \r\n  /** Usage notes or instructions */\r\n  usage?: string;\r\n  \r\n  /** Whether this is a system-critical prompt */\r\n  isCritical?: boolean;\r\n  \r\n  /** Estimated token count (for cost estimation) */\r\n  estimatedTokens?: number;\r\n}\r\n\r\n/**\r\n * Variable validation rules\r\n */\r\nexport interface PromptValidation {\r\n  /** Required variables that must be provided */\r\n  required: string[];\r\n  \r\n  /** Optional variables with default values */\r\n  optional?: Record<string, any>;\r\n  \r\n  /** Variable type definitions */\r\n  types?: Record<string, 'string' | 'number' | 'boolean' | 'array' | 'object'>;\r\n  \r\n  /** Custom validation functions */\r\n  validators?: Record<string, (value: any) => boolean | string>;\r\n}\r\n\r\n/**\r\n * Example usage of a prompt\r\n */\r\nexport interface PromptExample {\r\n  /** Example name/title */\r\n  name: string;\r\n  \r\n  /** Description of the example */\r\n  description: string;\r\n  \r\n  /** Variable values for the example */\r\n  variables: Record<string, any>;\r\n  \r\n  /** Expected output or behavior */\r\n  expectedOutput?: string;\r\n  \r\n  /** Model-specific examples */\r\n  modelSpecific?: {\r\n    anthropic?: string;\r\n    openai?: string;\r\n  };\r\n}\r\n\r\n/**\r\n * Compiled prompt result\r\n */\r\nexport interface CompiledPrompt {\r\n  /** Original template ID */\r\n  templateId: string;\r\n  \r\n  /** Compiled prompt text */\r\n  text: string;\r\n  \r\n  /** Provider it was compiled for */\r\n  provider?: ModelProvider;\r\n  \r\n  /** Variables used in compilation */\r\n  variables: Record<string, any>;\r\n  \r\n  /** Compilation metadata */\r\n  metadata: {\r\n    compiledAt: Date;\r\n    templateVersion: string;\r\n    estimatedTokens?: number;\r\n  };\r\n}\r\n\r\n/**\r\n * Prompt registry configuration\r\n */\r\nexport interface PromptRegistryConfig {\r\n  /** Whether to enable strict validation */\r\n  strictValidation: boolean;\r\n  \r\n  /** Whether to cache compiled prompts */\r\n  enableCaching: boolean;\r\n  \r\n  /** Cache TTL in milliseconds */\r\n  cacheTTL: number;\r\n  \r\n  /** Whether to log prompt usage */\r\n  enableLogging: boolean;\r\n  \r\n  /** Default model provider for compilation */\r\n  defaultProvider?: ModelProvider;\r\n}\r\n\r\n/**\r\n * Prompt search criteria\r\n */\r\nexport interface PromptSearchCriteria {\r\n  /** Search by category */\r\n  category?: PromptCategory;\r\n  \r\n  /** Search by tags */\r\n  tags?: string[];\r\n  \r\n  /** Text search in name/description */\r\n  query?: string;\r\n  \r\n  /** Filter by author */\r\n  author?: string;\r\n  \r\n  /** Filter by criticality */\r\n  isCritical?: boolean;\r\n  \r\n  /** Filter by model provider support */\r\n  supportedProvider?: ModelProvider;\r\n}\r\n\r\n/**\r\n * Prompt usage statistics\r\n */\r\nexport interface PromptUsageStats {\r\n  /** Prompt template ID */\r\n  templateId: string;\r\n  \r\n  /** Total usage count */\r\n  usageCount: number;\r\n  \r\n  /** Last used timestamp */\r\n  lastUsed: Date;\r\n  \r\n  /** Average compilation time */\r\n  avgCompilationTime: number;\r\n  \r\n  /** Error count */\r\n  errorCount: number;\r\n  \r\n  /** Most common variable values */\r\n  commonVariables: Record<string, any[]>;\r\n}\r\n\r\n/**\r\n * Prompt compilation options\r\n */\r\nexport interface CompilationOptions {\r\n  /** Target model provider */\r\n  provider?: ModelProvider;\r\n  \r\n  /** Whether to validate variables */\r\n  validate?: boolean;\r\n  \r\n  /** Whether to use cached result if available */\r\n  useCache?: boolean;\r\n  \r\n  /** Additional context for compilation */\r\n  context?: Record<string, any>;\r\n  \r\n  /** Whether to escape special characters */\r\n  escapeHtml?: boolean;\r\n  \r\n  /** Maximum allowed token count */\r\n  maxTokens?: number;\r\n}\r\n\r\n/**\r\n * Prompt template builder for creating prompts programmatically\r\n */\r\nexport interface PromptTemplateBuilder {\r\n  /** Set the prompt ID */\r\n  id(id: string): PromptTemplateBuilder;\r\n  \r\n  /** Set the prompt name */\r\n  name(name: string): PromptTemplateBuilder;\r\n  \r\n  /** Set the category */\r\n  category(category: PromptCategory): PromptTemplateBuilder;\r\n  \r\n  /** Set the template content */\r\n  template(template: string): PromptTemplateBuilder;\r\n  \r\n  /** Add variables */\r\n  variables(...variables: string[]): PromptTemplateBuilder;\r\n  \r\n  /** Set model-specific variants */\r\n  modelSpecific(variants: { anthropic?: string; openai?: string }): PromptTemplateBuilder;\r\n  \r\n  /** Set version */\r\n  version(version: string): PromptTemplateBuilder;\r\n  \r\n  /** Add metadata */\r\n  metadata(metadata: Partial<PromptMetadata>): PromptTemplateBuilder;\r\n  \r\n  /** Add validation rules */\r\n  validation(validation: PromptValidation): PromptTemplateBuilder;\r\n  \r\n  /** Add examples */\r\n  examples(...examples: PromptExample[]): PromptTemplateBuilder;\r\n  \r\n  /** Build the final prompt template */\r\n  build(): PromptTemplate;\r\n}\r\n\r\n/**\r\n * Error types for prompt operations\r\n */\r\nexport class PromptError extends Error {\r\n  constructor(\r\n    message: string,\r\n    public code: string,\r\n    public templateId?: string,\r\n    public details?: any\r\n  ) {\r\n    super(message);\r\n    this.name = 'PromptError';\r\n  }\r\n}\r\n\r\nexport class PromptValidationError extends PromptError {\r\n  constructor(message: string, templateId?: string, validationDetails?: any) {\r\n    super(message, 'VALIDATION_ERROR', templateId, validationDetails);\r\n    this.name = 'PromptValidationError';\r\n  }\r\n}\r\n\r\nexport class PromptCompilationError extends PromptError {\r\n  constructor(message: string, templateId?: string, compilationDetails?: any) {\r\n    super(message, 'COMPILATION_ERROR', templateId, compilationDetails);\r\n    this.name = 'PromptCompilationError';\r\n  }\r\n}\r\n\r\nexport class PromptNotFoundError extends PromptError {\r\n  constructor(templateId: string) {\r\n    super(`Prompt template not found: ${templateId}`, 'NOT_FOUND', templateId);\r\n    this.name = 'PromptNotFoundError';\r\n  }\r\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "de476017c86c693d3b6372d685af984808cbf48a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_j1q8csq19 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_j1q8csq19();
cov_j1q8csq19().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_j1q8csq19().s[1]++;
exports.PromptNotFoundError = exports.PromptCompilationError = exports.PromptValidationError = exports.PromptError = void 0;
/**
 * Error types for prompt operations
 */
class PromptError extends Error {
  constructor(message, code, templateId, details) {
    /* istanbul ignore next */
    cov_j1q8csq19().f[0]++;
    cov_j1q8csq19().s[2]++;
    super(message);
    /* istanbul ignore next */
    cov_j1q8csq19().s[3]++;
    this.code = code;
    /* istanbul ignore next */
    cov_j1q8csq19().s[4]++;
    this.templateId = templateId;
    /* istanbul ignore next */
    cov_j1q8csq19().s[5]++;
    this.details = details;
    /* istanbul ignore next */
    cov_j1q8csq19().s[6]++;
    this.name = 'PromptError';
  }
}
/* istanbul ignore next */
cov_j1q8csq19().s[7]++;
exports.PromptError = PromptError;
class PromptValidationError extends PromptError {
  constructor(message, templateId, validationDetails) {
    /* istanbul ignore next */
    cov_j1q8csq19().f[1]++;
    cov_j1q8csq19().s[8]++;
    super(message, 'VALIDATION_ERROR', templateId, validationDetails);
    /* istanbul ignore next */
    cov_j1q8csq19().s[9]++;
    this.name = 'PromptValidationError';
  }
}
/* istanbul ignore next */
cov_j1q8csq19().s[10]++;
exports.PromptValidationError = PromptValidationError;
class PromptCompilationError extends PromptError {
  constructor(message, templateId, compilationDetails) {
    /* istanbul ignore next */
    cov_j1q8csq19().f[2]++;
    cov_j1q8csq19().s[11]++;
    super(message, 'COMPILATION_ERROR', templateId, compilationDetails);
    /* istanbul ignore next */
    cov_j1q8csq19().s[12]++;
    this.name = 'PromptCompilationError';
  }
}
/* istanbul ignore next */
cov_j1q8csq19().s[13]++;
exports.PromptCompilationError = PromptCompilationError;
class PromptNotFoundError extends PromptError {
  constructor(templateId) {
    /* istanbul ignore next */
    cov_j1q8csq19().f[3]++;
    cov_j1q8csq19().s[14]++;
    super(`Prompt template not found: ${templateId}`, 'NOT_FOUND', templateId);
    /* istanbul ignore next */
    cov_j1q8csq19().s[15]++;
    this.name = 'PromptNotFoundError';
  }
}
/* istanbul ignore next */
cov_j1q8csq19().s[16]++;
exports.PromptNotFoundError = PromptNotFoundError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,