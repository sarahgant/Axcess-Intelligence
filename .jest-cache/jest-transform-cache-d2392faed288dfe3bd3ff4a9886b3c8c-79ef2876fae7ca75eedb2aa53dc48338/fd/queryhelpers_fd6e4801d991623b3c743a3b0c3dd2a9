466bfddf3e4f4b709c6b4d204a0dcb30
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildQueries = buildQueries;
exports.getElementError = getElementError;
exports.getMultipleElementsFoundError = getMultipleElementsFoundError;
exports.makeFindQuery = makeFindQuery;
exports.makeGetAllQuery = makeGetAllQuery;
exports.makeSingleQuery = makeSingleQuery;
exports.queryAllByAttribute = queryAllByAttribute;
exports.queryByAttribute = queryByAttribute;
exports.wrapSingleQueryWithSuggestion = exports.wrapAllByQueryWithSuggestion = void 0;
var _suggestions = require("./suggestions");
var _matches = require("./matches");
var _waitFor = require("./wait-for");
var _config = require("./config");
function getElementError(message, container) {
  return (0, _config.getConfig)().getElementError(message, container);
}
function getMultipleElementsFoundError(message, container) {
  return getElementError(`${message}\n\n(If this is intentional, then use the \`*AllBy*\` variant of the query (like \`queryAllByText\`, \`getAllByText\`, or \`findAllByText\`)).`, container);
}
function queryAllByAttribute(attribute, container, text, {
  exact = true,
  collapseWhitespace,
  trim,
  normalizer
} = {}) {
  const matcher = exact ? _matches.matches : _matches.fuzzyMatches;
  const matchNormalizer = (0, _matches.makeNormalizer)({
    collapseWhitespace,
    trim,
    normalizer
  });
  return Array.from(container.querySelectorAll(`[${attribute}]`)).filter(node => matcher(node.getAttribute(attribute), node, text, matchNormalizer));
}
function queryByAttribute(attribute, container, text, options) {
  const els = queryAllByAttribute(attribute, container, text, options);
  if (els.length > 1) {
    throw getMultipleElementsFoundError(`Found multiple elements by [${attribute}=${text}]`, container);
  }
  return els[0] || null;
}

// this accepts a query function and returns a function which throws an error
// if more than one elements is returned, otherwise it returns the first
// element or null
function makeSingleQuery(allQuery, getMultipleError) {
  return (container, ...args) => {
    const els = allQuery(container, ...args);
    if (els.length > 1) {
      const elementStrings = els.map(element => getElementError(null, element).message).join('\n\n');
      throw getMultipleElementsFoundError(`${getMultipleError(container, ...args)}

Here are the matching elements:

${elementStrings}`, container);
    }
    return els[0] || null;
  };
}
function getSuggestionError(suggestion, container) {
  return (0, _config.getConfig)().getElementError(`A better query is available, try this:
${suggestion.toString()}
`, container);
}

// this accepts a query function and returns a function which throws an error
// if an empty list of elements is returned
function makeGetAllQuery(allQuery, getMissingError) {
  return (container, ...args) => {
    const els = allQuery(container, ...args);
    if (!els.length) {
      throw (0, _config.getConfig)().getElementError(getMissingError(container, ...args), container);
    }
    return els;
  };
}

// this accepts a getter query function and returns a function which calls
// waitFor and passing a function which invokes the getter.
function makeFindQuery(getter) {
  return (container, text, options, waitForOptions) => {
    return (0, _waitFor.waitFor)(() => {
      return getter(container, text, options);
    }, {
      container,
      ...waitForOptions
    });
  };
}
const wrapSingleQueryWithSuggestion = (query, queryAllByName, variant) => (container, ...args) => {
  const element = query(container, ...args);
  const [{
    suggest = (0, _config.getConfig)().throwSuggestions
  } = {}] = args.slice(-1);
  if (element && suggest) {
    const suggestion = (0, _suggestions.getSuggestedQuery)(element, variant);
    if (suggestion && !queryAllByName.endsWith(suggestion.queryName)) {
      throw getSuggestionError(suggestion.toString(), container);
    }
  }
  return element;
};
exports.wrapSingleQueryWithSuggestion = wrapSingleQueryWithSuggestion;
const wrapAllByQueryWithSuggestion = (query, queryAllByName, variant) => (container, ...args) => {
  const els = query(container, ...args);
  const [{
    suggest = (0, _config.getConfig)().throwSuggestions
  } = {}] = args.slice(-1);
  if (els.length && suggest) {
    // get a unique list of all suggestion messages.  We are only going to make a suggestion if
    // all the suggestions are the same
    const uniqueSuggestionMessages = [...new Set(els.map(element => (0, _suggestions.getSuggestedQuery)(element, variant)?.toString()))];
    if (
    // only want to suggest if all the els have the same suggestion.
    uniqueSuggestionMessages.length === 1 && !queryAllByName.endsWith(
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- TODO: Can this be null at runtime?
    (0, _suggestions.getSuggestedQuery)(els[0], variant).queryName)) {
      throw getSuggestionError(uniqueSuggestionMessages[0], container);
    }
  }
  return els;
};

// TODO: This deviates from the published declarations
// However, the implementation always required a dyadic (after `container`) not variadic `queryAllBy` considering the implementation of `makeFindQuery`
// This is at least statically true and can be verified by accepting `QueryMethod<Arguments, HTMLElement[]>`
exports.wrapAllByQueryWithSuggestion = wrapAllByQueryWithSuggestion;
function buildQueries(queryAllBy, getMultipleError, getMissingError) {
  const queryBy = wrapSingleQueryWithSuggestion(makeSingleQuery(queryAllBy, getMultipleError), queryAllBy.name, 'query');
  const getAllBy = makeGetAllQuery(queryAllBy, getMissingError);
  const getBy = makeSingleQuery(getAllBy, getMultipleError);
  const getByWithSuggestions = wrapSingleQueryWithSuggestion(getBy, queryAllBy.name, 'get');
  const getAllWithSuggestions = wrapAllByQueryWithSuggestion(getAllBy, queryAllBy.name.replace('query', 'get'), 'getAll');
  const findAllBy = makeFindQuery(wrapAllByQueryWithSuggestion(getAllBy, queryAllBy.name, 'findAll'));
  const findBy = makeFindQuery(wrapSingleQueryWithSuggestion(getBy, queryAllBy.name, 'find'));
  return [queryBy, getAllWithSuggestions, getByWithSuggestions, findAllBy, findBy];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImJ1aWxkUXVlcmllcyIsImdldEVsZW1lbnRFcnJvciIsImdldE11bHRpcGxlRWxlbWVudHNGb3VuZEVycm9yIiwibWFrZUZpbmRRdWVyeSIsIm1ha2VHZXRBbGxRdWVyeSIsIm1ha2VTaW5nbGVRdWVyeSIsInF1ZXJ5QWxsQnlBdHRyaWJ1dGUiLCJxdWVyeUJ5QXR0cmlidXRlIiwid3JhcFNpbmdsZVF1ZXJ5V2l0aFN1Z2dlc3Rpb24iLCJ3cmFwQWxsQnlRdWVyeVdpdGhTdWdnZXN0aW9uIiwiX3N1Z2dlc3Rpb25zIiwicmVxdWlyZSIsIl9tYXRjaGVzIiwiX3dhaXRGb3IiLCJfY29uZmlnIiwibWVzc2FnZSIsImNvbnRhaW5lciIsImdldENvbmZpZyIsImF0dHJpYnV0ZSIsInRleHQiLCJleGFjdCIsImNvbGxhcHNlV2hpdGVzcGFjZSIsInRyaW0iLCJub3JtYWxpemVyIiwibWF0Y2hlciIsIm1hdGNoZXMiLCJmdXp6eU1hdGNoZXMiLCJtYXRjaE5vcm1hbGl6ZXIiLCJtYWtlTm9ybWFsaXplciIsIkFycmF5IiwiZnJvbSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmaWx0ZXIiLCJub2RlIiwiZ2V0QXR0cmlidXRlIiwib3B0aW9ucyIsImVscyIsImxlbmd0aCIsImFsbFF1ZXJ5IiwiZ2V0TXVsdGlwbGVFcnJvciIsImFyZ3MiLCJlbGVtZW50U3RyaW5ncyIsIm1hcCIsImVsZW1lbnQiLCJqb2luIiwiZ2V0U3VnZ2VzdGlvbkVycm9yIiwic3VnZ2VzdGlvbiIsInRvU3RyaW5nIiwiZ2V0TWlzc2luZ0Vycm9yIiwiZ2V0dGVyIiwid2FpdEZvck9wdGlvbnMiLCJ3YWl0Rm9yIiwicXVlcnkiLCJxdWVyeUFsbEJ5TmFtZSIsInZhcmlhbnQiLCJzdWdnZXN0IiwidGhyb3dTdWdnZXN0aW9ucyIsInNsaWNlIiwiZ2V0U3VnZ2VzdGVkUXVlcnkiLCJlbmRzV2l0aCIsInF1ZXJ5TmFtZSIsInVuaXF1ZVN1Z2dlc3Rpb25NZXNzYWdlcyIsIlNldCIsInF1ZXJ5QWxsQnkiLCJxdWVyeUJ5IiwibmFtZSIsImdldEFsbEJ5IiwiZ2V0QnkiLCJnZXRCeVdpdGhTdWdnZXN0aW9ucyIsImdldEFsbFdpdGhTdWdnZXN0aW9ucyIsInJlcGxhY2UiLCJmaW5kQWxsQnkiLCJmaW5kQnkiXSwic291cmNlcyI6WyJxdWVyeS1oZWxwZXJzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5idWlsZFF1ZXJpZXMgPSBidWlsZFF1ZXJpZXM7XG5leHBvcnRzLmdldEVsZW1lbnRFcnJvciA9IGdldEVsZW1lbnRFcnJvcjtcbmV4cG9ydHMuZ2V0TXVsdGlwbGVFbGVtZW50c0ZvdW5kRXJyb3IgPSBnZXRNdWx0aXBsZUVsZW1lbnRzRm91bmRFcnJvcjtcbmV4cG9ydHMubWFrZUZpbmRRdWVyeSA9IG1ha2VGaW5kUXVlcnk7XG5leHBvcnRzLm1ha2VHZXRBbGxRdWVyeSA9IG1ha2VHZXRBbGxRdWVyeTtcbmV4cG9ydHMubWFrZVNpbmdsZVF1ZXJ5ID0gbWFrZVNpbmdsZVF1ZXJ5O1xuZXhwb3J0cy5xdWVyeUFsbEJ5QXR0cmlidXRlID0gcXVlcnlBbGxCeUF0dHJpYnV0ZTtcbmV4cG9ydHMucXVlcnlCeUF0dHJpYnV0ZSA9IHF1ZXJ5QnlBdHRyaWJ1dGU7XG5leHBvcnRzLndyYXBTaW5nbGVRdWVyeVdpdGhTdWdnZXN0aW9uID0gZXhwb3J0cy53cmFwQWxsQnlRdWVyeVdpdGhTdWdnZXN0aW9uID0gdm9pZCAwO1xudmFyIF9zdWdnZXN0aW9ucyA9IHJlcXVpcmUoXCIuL3N1Z2dlc3Rpb25zXCIpO1xudmFyIF9tYXRjaGVzID0gcmVxdWlyZShcIi4vbWF0Y2hlc1wiKTtcbnZhciBfd2FpdEZvciA9IHJlcXVpcmUoXCIuL3dhaXQtZm9yXCIpO1xudmFyIF9jb25maWcgPSByZXF1aXJlKFwiLi9jb25maWdcIik7XG5mdW5jdGlvbiBnZXRFbGVtZW50RXJyb3IobWVzc2FnZSwgY29udGFpbmVyKSB7XG4gIHJldHVybiAoMCwgX2NvbmZpZy5nZXRDb25maWcpKCkuZ2V0RWxlbWVudEVycm9yKG1lc3NhZ2UsIGNvbnRhaW5lcik7XG59XG5mdW5jdGlvbiBnZXRNdWx0aXBsZUVsZW1lbnRzRm91bmRFcnJvcihtZXNzYWdlLCBjb250YWluZXIpIHtcbiAgcmV0dXJuIGdldEVsZW1lbnRFcnJvcihgJHttZXNzYWdlfVxcblxcbihJZiB0aGlzIGlzIGludGVudGlvbmFsLCB0aGVuIHVzZSB0aGUgXFxgKkFsbEJ5KlxcYCB2YXJpYW50IG9mIHRoZSBxdWVyeSAobGlrZSBcXGBxdWVyeUFsbEJ5VGV4dFxcYCwgXFxgZ2V0QWxsQnlUZXh0XFxgLCBvciBcXGBmaW5kQWxsQnlUZXh0XFxgKSkuYCwgY29udGFpbmVyKTtcbn1cbmZ1bmN0aW9uIHF1ZXJ5QWxsQnlBdHRyaWJ1dGUoYXR0cmlidXRlLCBjb250YWluZXIsIHRleHQsIHtcbiAgZXhhY3QgPSB0cnVlLFxuICBjb2xsYXBzZVdoaXRlc3BhY2UsXG4gIHRyaW0sXG4gIG5vcm1hbGl6ZXJcbn0gPSB7fSkge1xuICBjb25zdCBtYXRjaGVyID0gZXhhY3QgPyBfbWF0Y2hlcy5tYXRjaGVzIDogX21hdGNoZXMuZnV6enlNYXRjaGVzO1xuICBjb25zdCBtYXRjaE5vcm1hbGl6ZXIgPSAoMCwgX21hdGNoZXMubWFrZU5vcm1hbGl6ZXIpKHtcbiAgICBjb2xsYXBzZVdoaXRlc3BhY2UsXG4gICAgdHJpbSxcbiAgICBub3JtYWxpemVyXG4gIH0pO1xuICByZXR1cm4gQXJyYXkuZnJvbShjb250YWluZXIucXVlcnlTZWxlY3RvckFsbChgWyR7YXR0cmlidXRlfV1gKSkuZmlsdGVyKG5vZGUgPT4gbWF0Y2hlcihub2RlLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGUpLCBub2RlLCB0ZXh0LCBtYXRjaE5vcm1hbGl6ZXIpKTtcbn1cbmZ1bmN0aW9uIHF1ZXJ5QnlBdHRyaWJ1dGUoYXR0cmlidXRlLCBjb250YWluZXIsIHRleHQsIG9wdGlvbnMpIHtcbiAgY29uc3QgZWxzID0gcXVlcnlBbGxCeUF0dHJpYnV0ZShhdHRyaWJ1dGUsIGNvbnRhaW5lciwgdGV4dCwgb3B0aW9ucyk7XG4gIGlmIChlbHMubGVuZ3RoID4gMSkge1xuICAgIHRocm93IGdldE11bHRpcGxlRWxlbWVudHNGb3VuZEVycm9yKGBGb3VuZCBtdWx0aXBsZSBlbGVtZW50cyBieSBbJHthdHRyaWJ1dGV9PSR7dGV4dH1dYCwgY29udGFpbmVyKTtcbiAgfVxuICByZXR1cm4gZWxzWzBdIHx8IG51bGw7XG59XG5cbi8vIHRoaXMgYWNjZXB0cyBhIHF1ZXJ5IGZ1bmN0aW9uIGFuZCByZXR1cm5zIGEgZnVuY3Rpb24gd2hpY2ggdGhyb3dzIGFuIGVycm9yXG4vLyBpZiBtb3JlIHRoYW4gb25lIGVsZW1lbnRzIGlzIHJldHVybmVkLCBvdGhlcndpc2UgaXQgcmV0dXJucyB0aGUgZmlyc3Rcbi8vIGVsZW1lbnQgb3IgbnVsbFxuZnVuY3Rpb24gbWFrZVNpbmdsZVF1ZXJ5KGFsbFF1ZXJ5LCBnZXRNdWx0aXBsZUVycm9yKSB7XG4gIHJldHVybiAoY29udGFpbmVyLCAuLi5hcmdzKSA9PiB7XG4gICAgY29uc3QgZWxzID0gYWxsUXVlcnkoY29udGFpbmVyLCAuLi5hcmdzKTtcbiAgICBpZiAoZWxzLmxlbmd0aCA+IDEpIHtcbiAgICAgIGNvbnN0IGVsZW1lbnRTdHJpbmdzID0gZWxzLm1hcChlbGVtZW50ID0+IGdldEVsZW1lbnRFcnJvcihudWxsLCBlbGVtZW50KS5tZXNzYWdlKS5qb2luKCdcXG5cXG4nKTtcbiAgICAgIHRocm93IGdldE11bHRpcGxlRWxlbWVudHNGb3VuZEVycm9yKGAke2dldE11bHRpcGxlRXJyb3IoY29udGFpbmVyLCAuLi5hcmdzKX1cblxuSGVyZSBhcmUgdGhlIG1hdGNoaW5nIGVsZW1lbnRzOlxuXG4ke2VsZW1lbnRTdHJpbmdzfWAsIGNvbnRhaW5lcik7XG4gICAgfVxuICAgIHJldHVybiBlbHNbMF0gfHwgbnVsbDtcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldFN1Z2dlc3Rpb25FcnJvcihzdWdnZXN0aW9uLCBjb250YWluZXIpIHtcbiAgcmV0dXJuICgwLCBfY29uZmlnLmdldENvbmZpZykoKS5nZXRFbGVtZW50RXJyb3IoYEEgYmV0dGVyIHF1ZXJ5IGlzIGF2YWlsYWJsZSwgdHJ5IHRoaXM6XG4ke3N1Z2dlc3Rpb24udG9TdHJpbmcoKX1cbmAsIGNvbnRhaW5lcik7XG59XG5cbi8vIHRoaXMgYWNjZXB0cyBhIHF1ZXJ5IGZ1bmN0aW9uIGFuZCByZXR1cm5zIGEgZnVuY3Rpb24gd2hpY2ggdGhyb3dzIGFuIGVycm9yXG4vLyBpZiBhbiBlbXB0eSBsaXN0IG9mIGVsZW1lbnRzIGlzIHJldHVybmVkXG5mdW5jdGlvbiBtYWtlR2V0QWxsUXVlcnkoYWxsUXVlcnksIGdldE1pc3NpbmdFcnJvcikge1xuICByZXR1cm4gKGNvbnRhaW5lciwgLi4uYXJncykgPT4ge1xuICAgIGNvbnN0IGVscyA9IGFsbFF1ZXJ5KGNvbnRhaW5lciwgLi4uYXJncyk7XG4gICAgaWYgKCFlbHMubGVuZ3RoKSB7XG4gICAgICB0aHJvdyAoMCwgX2NvbmZpZy5nZXRDb25maWcpKCkuZ2V0RWxlbWVudEVycm9yKGdldE1pc3NpbmdFcnJvcihjb250YWluZXIsIC4uLmFyZ3MpLCBjb250YWluZXIpO1xuICAgIH1cbiAgICByZXR1cm4gZWxzO1xuICB9O1xufVxuXG4vLyB0aGlzIGFjY2VwdHMgYSBnZXR0ZXIgcXVlcnkgZnVuY3Rpb24gYW5kIHJldHVybnMgYSBmdW5jdGlvbiB3aGljaCBjYWxsc1xuLy8gd2FpdEZvciBhbmQgcGFzc2luZyBhIGZ1bmN0aW9uIHdoaWNoIGludm9rZXMgdGhlIGdldHRlci5cbmZ1bmN0aW9uIG1ha2VGaW5kUXVlcnkoZ2V0dGVyKSB7XG4gIHJldHVybiAoY29udGFpbmVyLCB0ZXh0LCBvcHRpb25zLCB3YWl0Rm9yT3B0aW9ucykgPT4ge1xuICAgIHJldHVybiAoMCwgX3dhaXRGb3Iud2FpdEZvcikoKCkgPT4ge1xuICAgICAgcmV0dXJuIGdldHRlcihjb250YWluZXIsIHRleHQsIG9wdGlvbnMpO1xuICAgIH0sIHtcbiAgICAgIGNvbnRhaW5lcixcbiAgICAgIC4uLndhaXRGb3JPcHRpb25zXG4gICAgfSk7XG4gIH07XG59XG5jb25zdCB3cmFwU2luZ2xlUXVlcnlXaXRoU3VnZ2VzdGlvbiA9IChxdWVyeSwgcXVlcnlBbGxCeU5hbWUsIHZhcmlhbnQpID0+IChjb250YWluZXIsIC4uLmFyZ3MpID0+IHtcbiAgY29uc3QgZWxlbWVudCA9IHF1ZXJ5KGNvbnRhaW5lciwgLi4uYXJncyk7XG4gIGNvbnN0IFt7XG4gICAgc3VnZ2VzdCA9ICgwLCBfY29uZmlnLmdldENvbmZpZykoKS50aHJvd1N1Z2dlc3Rpb25zXG4gIH0gPSB7fV0gPSBhcmdzLnNsaWNlKC0xKTtcbiAgaWYgKGVsZW1lbnQgJiYgc3VnZ2VzdCkge1xuICAgIGNvbnN0IHN1Z2dlc3Rpb24gPSAoMCwgX3N1Z2dlc3Rpb25zLmdldFN1Z2dlc3RlZFF1ZXJ5KShlbGVtZW50LCB2YXJpYW50KTtcbiAgICBpZiAoc3VnZ2VzdGlvbiAmJiAhcXVlcnlBbGxCeU5hbWUuZW5kc1dpdGgoc3VnZ2VzdGlvbi5xdWVyeU5hbWUpKSB7XG4gICAgICB0aHJvdyBnZXRTdWdnZXN0aW9uRXJyb3Ioc3VnZ2VzdGlvbi50b1N0cmluZygpLCBjb250YWluZXIpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZWxlbWVudDtcbn07XG5leHBvcnRzLndyYXBTaW5nbGVRdWVyeVdpdGhTdWdnZXN0aW9uID0gd3JhcFNpbmdsZVF1ZXJ5V2l0aFN1Z2dlc3Rpb247XG5jb25zdCB3cmFwQWxsQnlRdWVyeVdpdGhTdWdnZXN0aW9uID0gKHF1ZXJ5LCBxdWVyeUFsbEJ5TmFtZSwgdmFyaWFudCkgPT4gKGNvbnRhaW5lciwgLi4uYXJncykgPT4ge1xuICBjb25zdCBlbHMgPSBxdWVyeShjb250YWluZXIsIC4uLmFyZ3MpO1xuICBjb25zdCBbe1xuICAgIHN1Z2dlc3QgPSAoMCwgX2NvbmZpZy5nZXRDb25maWcpKCkudGhyb3dTdWdnZXN0aW9uc1xuICB9ID0ge31dID0gYXJncy5zbGljZSgtMSk7XG4gIGlmIChlbHMubGVuZ3RoICYmIHN1Z2dlc3QpIHtcbiAgICAvLyBnZXQgYSB1bmlxdWUgbGlzdCBvZiBhbGwgc3VnZ2VzdGlvbiBtZXNzYWdlcy4gIFdlIGFyZSBvbmx5IGdvaW5nIHRvIG1ha2UgYSBzdWdnZXN0aW9uIGlmXG4gICAgLy8gYWxsIHRoZSBzdWdnZXN0aW9ucyBhcmUgdGhlIHNhbWVcbiAgICBjb25zdCB1bmlxdWVTdWdnZXN0aW9uTWVzc2FnZXMgPSBbLi4ubmV3IFNldChlbHMubWFwKGVsZW1lbnQgPT4gKDAsIF9zdWdnZXN0aW9ucy5nZXRTdWdnZXN0ZWRRdWVyeSkoZWxlbWVudCwgdmFyaWFudCk/LnRvU3RyaW5nKCkpKV07XG4gICAgaWYgKFxuICAgIC8vIG9ubHkgd2FudCB0byBzdWdnZXN0IGlmIGFsbCB0aGUgZWxzIGhhdmUgdGhlIHNhbWUgc3VnZ2VzdGlvbi5cbiAgICB1bmlxdWVTdWdnZXN0aW9uTWVzc2FnZXMubGVuZ3RoID09PSAxICYmICFxdWVyeUFsbEJ5TmFtZS5lbmRzV2l0aChcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvbiAtLSBUT0RPOiBDYW4gdGhpcyBiZSBudWxsIGF0IHJ1bnRpbWU/XG4gICAgKDAsIF9zdWdnZXN0aW9ucy5nZXRTdWdnZXN0ZWRRdWVyeSkoZWxzWzBdLCB2YXJpYW50KS5xdWVyeU5hbWUpKSB7XG4gICAgICB0aHJvdyBnZXRTdWdnZXN0aW9uRXJyb3IodW5pcXVlU3VnZ2VzdGlvbk1lc3NhZ2VzWzBdLCBjb250YWluZXIpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZWxzO1xufTtcblxuLy8gVE9ETzogVGhpcyBkZXZpYXRlcyBmcm9tIHRoZSBwdWJsaXNoZWQgZGVjbGFyYXRpb25zXG4vLyBIb3dldmVyLCB0aGUgaW1wbGVtZW50YXRpb24gYWx3YXlzIHJlcXVpcmVkIGEgZHlhZGljIChhZnRlciBgY29udGFpbmVyYCkgbm90IHZhcmlhZGljIGBxdWVyeUFsbEJ5YCBjb25zaWRlcmluZyB0aGUgaW1wbGVtZW50YXRpb24gb2YgYG1ha2VGaW5kUXVlcnlgXG4vLyBUaGlzIGlzIGF0IGxlYXN0IHN0YXRpY2FsbHkgdHJ1ZSBhbmQgY2FuIGJlIHZlcmlmaWVkIGJ5IGFjY2VwdGluZyBgUXVlcnlNZXRob2Q8QXJndW1lbnRzLCBIVE1MRWxlbWVudFtdPmBcbmV4cG9ydHMud3JhcEFsbEJ5UXVlcnlXaXRoU3VnZ2VzdGlvbiA9IHdyYXBBbGxCeVF1ZXJ5V2l0aFN1Z2dlc3Rpb247XG5mdW5jdGlvbiBidWlsZFF1ZXJpZXMocXVlcnlBbGxCeSwgZ2V0TXVsdGlwbGVFcnJvciwgZ2V0TWlzc2luZ0Vycm9yKSB7XG4gIGNvbnN0IHF1ZXJ5QnkgPSB3cmFwU2luZ2xlUXVlcnlXaXRoU3VnZ2VzdGlvbihtYWtlU2luZ2xlUXVlcnkocXVlcnlBbGxCeSwgZ2V0TXVsdGlwbGVFcnJvciksIHF1ZXJ5QWxsQnkubmFtZSwgJ3F1ZXJ5Jyk7XG4gIGNvbnN0IGdldEFsbEJ5ID0gbWFrZUdldEFsbFF1ZXJ5KHF1ZXJ5QWxsQnksIGdldE1pc3NpbmdFcnJvcik7XG4gIGNvbnN0IGdldEJ5ID0gbWFrZVNpbmdsZVF1ZXJ5KGdldEFsbEJ5LCBnZXRNdWx0aXBsZUVycm9yKTtcbiAgY29uc3QgZ2V0QnlXaXRoU3VnZ2VzdGlvbnMgPSB3cmFwU2luZ2xlUXVlcnlXaXRoU3VnZ2VzdGlvbihnZXRCeSwgcXVlcnlBbGxCeS5uYW1lLCAnZ2V0Jyk7XG4gIGNvbnN0IGdldEFsbFdpdGhTdWdnZXN0aW9ucyA9IHdyYXBBbGxCeVF1ZXJ5V2l0aFN1Z2dlc3Rpb24oZ2V0QWxsQnksIHF1ZXJ5QWxsQnkubmFtZS5yZXBsYWNlKCdxdWVyeScsICdnZXQnKSwgJ2dldEFsbCcpO1xuICBjb25zdCBmaW5kQWxsQnkgPSBtYWtlRmluZFF1ZXJ5KHdyYXBBbGxCeVF1ZXJ5V2l0aFN1Z2dlc3Rpb24oZ2V0QWxsQnksIHF1ZXJ5QWxsQnkubmFtZSwgJ2ZpbmRBbGwnKSk7XG4gIGNvbnN0IGZpbmRCeSA9IG1ha2VGaW5kUXVlcnkod3JhcFNpbmdsZVF1ZXJ5V2l0aFN1Z2dlc3Rpb24oZ2V0QnksIHF1ZXJ5QWxsQnkubmFtZSwgJ2ZpbmQnKSk7XG4gIHJldHVybiBbcXVlcnlCeSwgZ2V0QWxsV2l0aFN1Z2dlc3Rpb25zLCBnZXRCeVdpdGhTdWdnZXN0aW9ucywgZmluZEFsbEJ5LCBmaW5kQnldO1xufSJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FBQztBQUNGRCxPQUFPLENBQUNFLFlBQVksR0FBR0EsWUFBWTtBQUNuQ0YsT0FBTyxDQUFDRyxlQUFlLEdBQUdBLGVBQWU7QUFDekNILE9BQU8sQ0FBQ0ksNkJBQTZCLEdBQUdBLDZCQUE2QjtBQUNyRUosT0FBTyxDQUFDSyxhQUFhLEdBQUdBLGFBQWE7QUFDckNMLE9BQU8sQ0FBQ00sZUFBZSxHQUFHQSxlQUFlO0FBQ3pDTixPQUFPLENBQUNPLGVBQWUsR0FBR0EsZUFBZTtBQUN6Q1AsT0FBTyxDQUFDUSxtQkFBbUIsR0FBR0EsbUJBQW1CO0FBQ2pEUixPQUFPLENBQUNTLGdCQUFnQixHQUFHQSxnQkFBZ0I7QUFDM0NULE9BQU8sQ0FBQ1UsNkJBQTZCLEdBQUdWLE9BQU8sQ0FBQ1csNEJBQTRCLEdBQUcsS0FBSyxDQUFDO0FBQ3JGLElBQUlDLFlBQVksR0FBR0MsT0FBTyxDQUFDLGVBQWUsQ0FBQztBQUMzQyxJQUFJQyxRQUFRLEdBQUdELE9BQU8sQ0FBQyxXQUFXLENBQUM7QUFDbkMsSUFBSUUsUUFBUSxHQUFHRixPQUFPLENBQUMsWUFBWSxDQUFDO0FBQ3BDLElBQUlHLE9BQU8sR0FBR0gsT0FBTyxDQUFDLFVBQVUsQ0FBQztBQUNqQyxTQUFTVixlQUFlQSxDQUFDYyxPQUFPLEVBQUVDLFNBQVMsRUFBRTtFQUMzQyxPQUFPLENBQUMsQ0FBQyxFQUFFRixPQUFPLENBQUNHLFNBQVMsRUFBRSxDQUFDLENBQUNoQixlQUFlLENBQUNjLE9BQU8sRUFBRUMsU0FBUyxDQUFDO0FBQ3JFO0FBQ0EsU0FBU2QsNkJBQTZCQSxDQUFDYSxPQUFPLEVBQUVDLFNBQVMsRUFBRTtFQUN6RCxPQUFPZixlQUFlLENBQUMsR0FBR2MsT0FBTyxnSkFBZ0osRUFBRUMsU0FBUyxDQUFDO0FBQy9MO0FBQ0EsU0FBU1YsbUJBQW1CQSxDQUFDWSxTQUFTLEVBQUVGLFNBQVMsRUFBRUcsSUFBSSxFQUFFO0VBQ3ZEQyxLQUFLLEdBQUcsSUFBSTtFQUNaQyxrQkFBa0I7RUFDbEJDLElBQUk7RUFDSkM7QUFDRixDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7RUFDTixNQUFNQyxPQUFPLEdBQUdKLEtBQUssR0FBR1IsUUFBUSxDQUFDYSxPQUFPLEdBQUdiLFFBQVEsQ0FBQ2MsWUFBWTtFQUNoRSxNQUFNQyxlQUFlLEdBQUcsQ0FBQyxDQUFDLEVBQUVmLFFBQVEsQ0FBQ2dCLGNBQWMsRUFBRTtJQUNuRFAsa0JBQWtCO0lBQ2xCQyxJQUFJO0lBQ0pDO0VBQ0YsQ0FBQyxDQUFDO0VBQ0YsT0FBT00sS0FBSyxDQUFDQyxJQUFJLENBQUNkLFNBQVMsQ0FBQ2UsZ0JBQWdCLENBQUMsSUFBSWIsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDYyxNQUFNLENBQUNDLElBQUksSUFBSVQsT0FBTyxDQUFDUyxJQUFJLENBQUNDLFlBQVksQ0FBQ2hCLFNBQVMsQ0FBQyxFQUFFZSxJQUFJLEVBQUVkLElBQUksRUFBRVEsZUFBZSxDQUFDLENBQUM7QUFDcEo7QUFDQSxTQUFTcEIsZ0JBQWdCQSxDQUFDVyxTQUFTLEVBQUVGLFNBQVMsRUFBRUcsSUFBSSxFQUFFZ0IsT0FBTyxFQUFFO0VBQzdELE1BQU1DLEdBQUcsR0FBRzlCLG1CQUFtQixDQUFDWSxTQUFTLEVBQUVGLFNBQVMsRUFBRUcsSUFBSSxFQUFFZ0IsT0FBTyxDQUFDO0VBQ3BFLElBQUlDLEdBQUcsQ0FBQ0MsTUFBTSxHQUFHLENBQUMsRUFBRTtJQUNsQixNQUFNbkMsNkJBQTZCLENBQUMsK0JBQStCZ0IsU0FBUyxJQUFJQyxJQUFJLEdBQUcsRUFBRUgsU0FBUyxDQUFDO0VBQ3JHO0VBQ0EsT0FBT29CLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJO0FBQ3ZCOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVMvQixlQUFlQSxDQUFDaUMsUUFBUSxFQUFFQyxnQkFBZ0IsRUFBRTtFQUNuRCxPQUFPLENBQUN2QixTQUFTLEVBQUUsR0FBR3dCLElBQUksS0FBSztJQUM3QixNQUFNSixHQUFHLEdBQUdFLFFBQVEsQ0FBQ3RCLFNBQVMsRUFBRSxHQUFHd0IsSUFBSSxDQUFDO0lBQ3hDLElBQUlKLEdBQUcsQ0FBQ0MsTUFBTSxHQUFHLENBQUMsRUFBRTtNQUNsQixNQUFNSSxjQUFjLEdBQUdMLEdBQUcsQ0FBQ00sR0FBRyxDQUFDQyxPQUFPLElBQUkxQyxlQUFlLENBQUMsSUFBSSxFQUFFMEMsT0FBTyxDQUFDLENBQUM1QixPQUFPLENBQUMsQ0FBQzZCLElBQUksQ0FBQyxNQUFNLENBQUM7TUFDOUYsTUFBTTFDLDZCQUE2QixDQUFDLEdBQUdxQyxnQkFBZ0IsQ0FBQ3ZCLFNBQVMsRUFBRSxHQUFHd0IsSUFBSSxDQUFDO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBLEVBQUVDLGNBQWMsRUFBRSxFQUFFekIsU0FBUyxDQUFDO0lBQzFCO0lBQ0EsT0FBT29CLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJO0VBQ3ZCLENBQUM7QUFDSDtBQUNBLFNBQVNTLGtCQUFrQkEsQ0FBQ0MsVUFBVSxFQUFFOUIsU0FBUyxFQUFFO0VBQ2pELE9BQU8sQ0FBQyxDQUFDLEVBQUVGLE9BQU8sQ0FBQ0csU0FBUyxFQUFFLENBQUMsQ0FBQ2hCLGVBQWUsQ0FBQztBQUNsRCxFQUFFNkMsVUFBVSxDQUFDQyxRQUFRLENBQUMsQ0FBQztBQUN2QixDQUFDLEVBQUUvQixTQUFTLENBQUM7QUFDYjs7QUFFQTtBQUNBO0FBQ0EsU0FBU1osZUFBZUEsQ0FBQ2tDLFFBQVEsRUFBRVUsZUFBZSxFQUFFO0VBQ2xELE9BQU8sQ0FBQ2hDLFNBQVMsRUFBRSxHQUFHd0IsSUFBSSxLQUFLO0lBQzdCLE1BQU1KLEdBQUcsR0FBR0UsUUFBUSxDQUFDdEIsU0FBUyxFQUFFLEdBQUd3QixJQUFJLENBQUM7SUFDeEMsSUFBSSxDQUFDSixHQUFHLENBQUNDLE1BQU0sRUFBRTtNQUNmLE1BQU0sQ0FBQyxDQUFDLEVBQUV2QixPQUFPLENBQUNHLFNBQVMsRUFBRSxDQUFDLENBQUNoQixlQUFlLENBQUMrQyxlQUFlLENBQUNoQyxTQUFTLEVBQUUsR0FBR3dCLElBQUksQ0FBQyxFQUFFeEIsU0FBUyxDQUFDO0lBQ2hHO0lBQ0EsT0FBT29CLEdBQUc7RUFDWixDQUFDO0FBQ0g7O0FBRUE7QUFDQTtBQUNBLFNBQVNqQyxhQUFhQSxDQUFDOEMsTUFBTSxFQUFFO0VBQzdCLE9BQU8sQ0FBQ2pDLFNBQVMsRUFBRUcsSUFBSSxFQUFFZ0IsT0FBTyxFQUFFZSxjQUFjLEtBQUs7SUFDbkQsT0FBTyxDQUFDLENBQUMsRUFBRXJDLFFBQVEsQ0FBQ3NDLE9BQU8sRUFBRSxNQUFNO01BQ2pDLE9BQU9GLE1BQU0sQ0FBQ2pDLFNBQVMsRUFBRUcsSUFBSSxFQUFFZ0IsT0FBTyxDQUFDO0lBQ3pDLENBQUMsRUFBRTtNQUNEbkIsU0FBUztNQUNULEdBQUdrQztJQUNMLENBQUMsQ0FBQztFQUNKLENBQUM7QUFDSDtBQUNBLE1BQU0xQyw2QkFBNkIsR0FBR0EsQ0FBQzRDLEtBQUssRUFBRUMsY0FBYyxFQUFFQyxPQUFPLEtBQUssQ0FBQ3RDLFNBQVMsRUFBRSxHQUFHd0IsSUFBSSxLQUFLO0VBQ2hHLE1BQU1HLE9BQU8sR0FBR1MsS0FBSyxDQUFDcEMsU0FBUyxFQUFFLEdBQUd3QixJQUFJLENBQUM7RUFDekMsTUFBTSxDQUFDO0lBQ0xlLE9BQU8sR0FBRyxDQUFDLENBQUMsRUFBRXpDLE9BQU8sQ0FBQ0csU0FBUyxFQUFFLENBQUMsQ0FBQ3VDO0VBQ3JDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHaEIsSUFBSSxDQUFDaUIsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ3hCLElBQUlkLE9BQU8sSUFBSVksT0FBTyxFQUFFO0lBQ3RCLE1BQU1ULFVBQVUsR0FBRyxDQUFDLENBQUMsRUFBRXBDLFlBQVksQ0FBQ2dELGlCQUFpQixFQUFFZixPQUFPLEVBQUVXLE9BQU8sQ0FBQztJQUN4RSxJQUFJUixVQUFVLElBQUksQ0FBQ08sY0FBYyxDQUFDTSxRQUFRLENBQUNiLFVBQVUsQ0FBQ2MsU0FBUyxDQUFDLEVBQUU7TUFDaEUsTUFBTWYsa0JBQWtCLENBQUNDLFVBQVUsQ0FBQ0MsUUFBUSxDQUFDLENBQUMsRUFBRS9CLFNBQVMsQ0FBQztJQUM1RDtFQUNGO0VBQ0EsT0FBTzJCLE9BQU87QUFDaEIsQ0FBQztBQUNEN0MsT0FBTyxDQUFDVSw2QkFBNkIsR0FBR0EsNkJBQTZCO0FBQ3JFLE1BQU1DLDRCQUE0QixHQUFHQSxDQUFDMkMsS0FBSyxFQUFFQyxjQUFjLEVBQUVDLE9BQU8sS0FBSyxDQUFDdEMsU0FBUyxFQUFFLEdBQUd3QixJQUFJLEtBQUs7RUFDL0YsTUFBTUosR0FBRyxHQUFHZ0IsS0FBSyxDQUFDcEMsU0FBUyxFQUFFLEdBQUd3QixJQUFJLENBQUM7RUFDckMsTUFBTSxDQUFDO0lBQ0xlLE9BQU8sR0FBRyxDQUFDLENBQUMsRUFBRXpDLE9BQU8sQ0FBQ0csU0FBUyxFQUFFLENBQUMsQ0FBQ3VDO0VBQ3JDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHaEIsSUFBSSxDQUFDaUIsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ3hCLElBQUlyQixHQUFHLENBQUNDLE1BQU0sSUFBSWtCLE9BQU8sRUFBRTtJQUN6QjtJQUNBO0lBQ0EsTUFBTU0sd0JBQXdCLEdBQUcsQ0FBQyxHQUFHLElBQUlDLEdBQUcsQ0FBQzFCLEdBQUcsQ0FBQ00sR0FBRyxDQUFDQyxPQUFPLElBQUksQ0FBQyxDQUFDLEVBQUVqQyxZQUFZLENBQUNnRCxpQkFBaUIsRUFBRWYsT0FBTyxFQUFFVyxPQUFPLENBQUMsRUFBRVAsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDcEk7SUFDQTtJQUNBYyx3QkFBd0IsQ0FBQ3hCLE1BQU0sS0FBSyxDQUFDLElBQUksQ0FBQ2dCLGNBQWMsQ0FBQ00sUUFBUTtJQUNqRTtJQUNBLENBQUMsQ0FBQyxFQUFFakQsWUFBWSxDQUFDZ0QsaUJBQWlCLEVBQUV0QixHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUVrQixPQUFPLENBQUMsQ0FBQ00sU0FBUyxDQUFDLEVBQUU7TUFDL0QsTUFBTWYsa0JBQWtCLENBQUNnQix3QkFBd0IsQ0FBQyxDQUFDLENBQUMsRUFBRTdDLFNBQVMsQ0FBQztJQUNsRTtFQUNGO0VBQ0EsT0FBT29CLEdBQUc7QUFDWixDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBdEMsT0FBTyxDQUFDVyw0QkFBNEIsR0FBR0EsNEJBQTRCO0FBQ25FLFNBQVNULFlBQVlBLENBQUMrRCxVQUFVLEVBQUV4QixnQkFBZ0IsRUFBRVMsZUFBZSxFQUFFO0VBQ25FLE1BQU1nQixPQUFPLEdBQUd4RCw2QkFBNkIsQ0FBQ0gsZUFBZSxDQUFDMEQsVUFBVSxFQUFFeEIsZ0JBQWdCLENBQUMsRUFBRXdCLFVBQVUsQ0FBQ0UsSUFBSSxFQUFFLE9BQU8sQ0FBQztFQUN0SCxNQUFNQyxRQUFRLEdBQUc5RCxlQUFlLENBQUMyRCxVQUFVLEVBQUVmLGVBQWUsQ0FBQztFQUM3RCxNQUFNbUIsS0FBSyxHQUFHOUQsZUFBZSxDQUFDNkQsUUFBUSxFQUFFM0IsZ0JBQWdCLENBQUM7RUFDekQsTUFBTTZCLG9CQUFvQixHQUFHNUQsNkJBQTZCLENBQUMyRCxLQUFLLEVBQUVKLFVBQVUsQ0FBQ0UsSUFBSSxFQUFFLEtBQUssQ0FBQztFQUN6RixNQUFNSSxxQkFBcUIsR0FBRzVELDRCQUE0QixDQUFDeUQsUUFBUSxFQUFFSCxVQUFVLENBQUNFLElBQUksQ0FBQ0ssT0FBTyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsRUFBRSxRQUFRLENBQUM7RUFDdkgsTUFBTUMsU0FBUyxHQUFHcEUsYUFBYSxDQUFDTSw0QkFBNEIsQ0FBQ3lELFFBQVEsRUFBRUgsVUFBVSxDQUFDRSxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7RUFDbkcsTUFBTU8sTUFBTSxHQUFHckUsYUFBYSxDQUFDSyw2QkFBNkIsQ0FBQzJELEtBQUssRUFBRUosVUFBVSxDQUFDRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7RUFDM0YsT0FBTyxDQUFDRCxPQUFPLEVBQUVLLHFCQUFxQixFQUFFRCxvQkFBb0IsRUFBRUcsU0FBUyxFQUFFQyxNQUFNLENBQUM7QUFDbEYiLCJpZ25vcmVMaXN0IjpbXX0=