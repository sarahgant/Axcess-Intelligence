15f9fe16a8a5ec4a911c44bc244db8af
'use strict';

var dispatchEvent = require('../event/dispatchEvent.js');
var isElementType = require('../utils/misc/isElementType.js');
require('../utils/dataTransfer/Clipboard.js');
var UI = require('./UI.js');
require('@testing-library/dom');
var interceptor = require('./interceptor.js');
const isPrepared = Symbol('Node prepared with document state workarounds');
function prepareDocument(document) {
  if (document[isPrepared]) {
    return;
  }
  document.addEventListener('focus', e => {
    const el = e.target;
    prepareElement(el);
  }, {
    capture: true,
    passive: true
  });
  // Our test environment defaults to `document.body` as `activeElement`.
  // In other environments this might be `null` when preparing.
  // istanbul ignore else
  if (document.activeElement) {
    prepareElement(document.activeElement);
  }
  document.addEventListener('blur', e => {
    const el = e.target;
    const initialValue = UI.getInitialValue(el);
    if (initialValue !== undefined) {
      if (el.value !== initialValue) {
        dispatchEvent.dispatchDOMEvent(el, 'change');
      }
      UI.clearInitialValue(el);
    }
  }, {
    capture: true,
    passive: true
  });
  document[isPrepared] = isPrepared;
}
function prepareElement(el) {
  if (el[isPrepared]) {
    return;
  }
  if (isElementType.isElementType(el, ['input', 'textarea'])) {
    interceptor.prepareValueInterceptor(el);
    interceptor.prepareSelectionInterceptor(el);
    interceptor.prepareRangeTextInterceptor(el);
  }
  el[isPrepared] = isPrepared;
}
exports.prepareDocument = prepareDocument;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkaXNwYXRjaEV2ZW50IiwicmVxdWlyZSIsImlzRWxlbWVudFR5cGUiLCJVSSIsImludGVyY2VwdG9yIiwiaXNQcmVwYXJlZCIsIlN5bWJvbCIsInByZXBhcmVEb2N1bWVudCIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJlbCIsInRhcmdldCIsInByZXBhcmVFbGVtZW50IiwiY2FwdHVyZSIsInBhc3NpdmUiLCJhY3RpdmVFbGVtZW50IiwiaW5pdGlhbFZhbHVlIiwiZ2V0SW5pdGlhbFZhbHVlIiwidW5kZWZpbmVkIiwidmFsdWUiLCJkaXNwYXRjaERPTUV2ZW50IiwiY2xlYXJJbml0aWFsVmFsdWUiLCJwcmVwYXJlVmFsdWVJbnRlcmNlcHRvciIsInByZXBhcmVTZWxlY3Rpb25JbnRlcmNlcHRvciIsInByZXBhcmVSYW5nZVRleHRJbnRlcmNlcHRvciIsImV4cG9ydHMiXSwic291cmNlcyI6WyJwcmVwYXJlRG9jdW1lbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGlzcGF0Y2hFdmVudCA9IHJlcXVpcmUoJy4uL2V2ZW50L2Rpc3BhdGNoRXZlbnQuanMnKTtcbnZhciBpc0VsZW1lbnRUeXBlID0gcmVxdWlyZSgnLi4vdXRpbHMvbWlzYy9pc0VsZW1lbnRUeXBlLmpzJyk7XG5yZXF1aXJlKCcuLi91dGlscy9kYXRhVHJhbnNmZXIvQ2xpcGJvYXJkLmpzJyk7XG52YXIgVUkgPSByZXF1aXJlKCcuL1VJLmpzJyk7XG5yZXF1aXJlKCdAdGVzdGluZy1saWJyYXJ5L2RvbScpO1xudmFyIGludGVyY2VwdG9yID0gcmVxdWlyZSgnLi9pbnRlcmNlcHRvci5qcycpO1xuXG5jb25zdCBpc1ByZXBhcmVkID0gU3ltYm9sKCdOb2RlIHByZXBhcmVkIHdpdGggZG9jdW1lbnQgc3RhdGUgd29ya2Fyb3VuZHMnKTtcbmZ1bmN0aW9uIHByZXBhcmVEb2N1bWVudChkb2N1bWVudCkge1xuICAgIGlmIChkb2N1bWVudFtpc1ByZXBhcmVkXSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgKGUpPT57XG4gICAgICAgIGNvbnN0IGVsID0gZS50YXJnZXQ7XG4gICAgICAgIHByZXBhcmVFbGVtZW50KGVsKTtcbiAgICB9LCB7XG4gICAgICAgIGNhcHR1cmU6IHRydWUsXG4gICAgICAgIHBhc3NpdmU6IHRydWVcbiAgICB9KTtcbiAgICAvLyBPdXIgdGVzdCBlbnZpcm9ubWVudCBkZWZhdWx0cyB0byBgZG9jdW1lbnQuYm9keWAgYXMgYGFjdGl2ZUVsZW1lbnRgLlxuICAgIC8vIEluIG90aGVyIGVudmlyb25tZW50cyB0aGlzIG1pZ2h0IGJlIGBudWxsYCB3aGVuIHByZXBhcmluZy5cbiAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgZWxzZVxuICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50KSB7XG4gICAgICAgIHByZXBhcmVFbGVtZW50KGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpO1xuICAgIH1cbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgKGUpPT57XG4gICAgICAgIGNvbnN0IGVsID0gZS50YXJnZXQ7XG4gICAgICAgIGNvbnN0IGluaXRpYWxWYWx1ZSA9IFVJLmdldEluaXRpYWxWYWx1ZShlbCk7XG4gICAgICAgIGlmIChpbml0aWFsVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKGVsLnZhbHVlICE9PSBpbml0aWFsVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaEV2ZW50LmRpc3BhdGNoRE9NRXZlbnQoZWwsICdjaGFuZ2UnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFVJLmNsZWFySW5pdGlhbFZhbHVlKGVsKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAgY2FwdHVyZTogdHJ1ZSxcbiAgICAgICAgcGFzc2l2ZTogdHJ1ZVxuICAgIH0pO1xuICAgIGRvY3VtZW50W2lzUHJlcGFyZWRdID0gaXNQcmVwYXJlZDtcbn1cbmZ1bmN0aW9uIHByZXBhcmVFbGVtZW50KGVsKSB7XG4gICAgaWYgKGVsW2lzUHJlcGFyZWRdKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzRWxlbWVudFR5cGUuaXNFbGVtZW50VHlwZShlbCwgW1xuICAgICAgICAnaW5wdXQnLFxuICAgICAgICAndGV4dGFyZWEnXG4gICAgXSkpIHtcbiAgICAgICAgaW50ZXJjZXB0b3IucHJlcGFyZVZhbHVlSW50ZXJjZXB0b3IoZWwpO1xuICAgICAgICBpbnRlcmNlcHRvci5wcmVwYXJlU2VsZWN0aW9uSW50ZXJjZXB0b3IoZWwpO1xuICAgICAgICBpbnRlcmNlcHRvci5wcmVwYXJlUmFuZ2VUZXh0SW50ZXJjZXB0b3IoZWwpO1xuICAgIH1cbiAgICBlbFtpc1ByZXBhcmVkXSA9IGlzUHJlcGFyZWQ7XG59XG5cbmV4cG9ydHMucHJlcGFyZURvY3VtZW50ID0gcHJlcGFyZURvY3VtZW50O1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaLElBQUlBLGFBQWEsR0FBR0MsT0FBTyxDQUFDLDJCQUEyQixDQUFDO0FBQ3hELElBQUlDLGFBQWEsR0FBR0QsT0FBTyxDQUFDLGdDQUFnQyxDQUFDO0FBQzdEQSxPQUFPLENBQUMsb0NBQW9DLENBQUM7QUFDN0MsSUFBSUUsRUFBRSxHQUFHRixPQUFPLENBQUMsU0FBUyxDQUFDO0FBQzNCQSxPQUFPLENBQUMsc0JBQXNCLENBQUM7QUFDL0IsSUFBSUcsV0FBVyxHQUFHSCxPQUFPLENBQUMsa0JBQWtCLENBQUM7QUFFN0MsTUFBTUksVUFBVSxHQUFHQyxNQUFNLENBQUMsK0NBQStDLENBQUM7QUFDMUUsU0FBU0MsZUFBZUEsQ0FBQ0MsUUFBUSxFQUFFO0VBQy9CLElBQUlBLFFBQVEsQ0FBQ0gsVUFBVSxDQUFDLEVBQUU7SUFDdEI7RUFDSjtFQUNBRyxRQUFRLENBQUNDLGdCQUFnQixDQUFDLE9BQU8sRUFBR0MsQ0FBQyxJQUFHO0lBQ3BDLE1BQU1DLEVBQUUsR0FBR0QsQ0FBQyxDQUFDRSxNQUFNO0lBQ25CQyxjQUFjLENBQUNGLEVBQUUsQ0FBQztFQUN0QixDQUFDLEVBQUU7SUFDQ0csT0FBTyxFQUFFLElBQUk7SUFDYkMsT0FBTyxFQUFFO0VBQ2IsQ0FBQyxDQUFDO0VBQ0Y7RUFDQTtFQUNBO0VBQ0EsSUFBSVAsUUFBUSxDQUFDUSxhQUFhLEVBQUU7SUFDeEJILGNBQWMsQ0FBQ0wsUUFBUSxDQUFDUSxhQUFhLENBQUM7RUFDMUM7RUFDQVIsUUFBUSxDQUFDQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUdDLENBQUMsSUFBRztJQUNuQyxNQUFNQyxFQUFFLEdBQUdELENBQUMsQ0FBQ0UsTUFBTTtJQUNuQixNQUFNSyxZQUFZLEdBQUdkLEVBQUUsQ0FBQ2UsZUFBZSxDQUFDUCxFQUFFLENBQUM7SUFDM0MsSUFBSU0sWUFBWSxLQUFLRSxTQUFTLEVBQUU7TUFDNUIsSUFBSVIsRUFBRSxDQUFDUyxLQUFLLEtBQUtILFlBQVksRUFBRTtRQUMzQmpCLGFBQWEsQ0FBQ3FCLGdCQUFnQixDQUFDVixFQUFFLEVBQUUsUUFBUSxDQUFDO01BQ2hEO01BQ0FSLEVBQUUsQ0FBQ21CLGlCQUFpQixDQUFDWCxFQUFFLENBQUM7SUFDNUI7RUFDSixDQUFDLEVBQUU7SUFDQ0csT0FBTyxFQUFFLElBQUk7SUFDYkMsT0FBTyxFQUFFO0VBQ2IsQ0FBQyxDQUFDO0VBQ0ZQLFFBQVEsQ0FBQ0gsVUFBVSxDQUFDLEdBQUdBLFVBQVU7QUFDckM7QUFDQSxTQUFTUSxjQUFjQSxDQUFDRixFQUFFLEVBQUU7RUFDeEIsSUFBSUEsRUFBRSxDQUFDTixVQUFVLENBQUMsRUFBRTtJQUNoQjtFQUNKO0VBQ0EsSUFBSUgsYUFBYSxDQUFDQSxhQUFhLENBQUNTLEVBQUUsRUFBRSxDQUNoQyxPQUFPLEVBQ1AsVUFBVSxDQUNiLENBQUMsRUFBRTtJQUNBUCxXQUFXLENBQUNtQix1QkFBdUIsQ0FBQ1osRUFBRSxDQUFDO0lBQ3ZDUCxXQUFXLENBQUNvQiwyQkFBMkIsQ0FBQ2IsRUFBRSxDQUFDO0lBQzNDUCxXQUFXLENBQUNxQiwyQkFBMkIsQ0FBQ2QsRUFBRSxDQUFDO0VBQy9DO0VBQ0FBLEVBQUUsQ0FBQ04sVUFBVSxDQUFDLEdBQUdBLFVBQVU7QUFDL0I7QUFFQXFCLE9BQU8sQ0FBQ25CLGVBQWUsR0FBR0EsZUFBZSIsImlnbm9yZUxpc3QiOltdfQ==