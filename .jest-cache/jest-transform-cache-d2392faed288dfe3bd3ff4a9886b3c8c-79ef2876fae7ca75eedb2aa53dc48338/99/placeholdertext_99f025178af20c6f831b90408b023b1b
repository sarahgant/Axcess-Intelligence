46563c7f6294271ad25a6254774a349d
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.queryByPlaceholderText = exports.queryAllByPlaceholderText = exports.getByPlaceholderText = exports.getAllByPlaceholderText = exports.findByPlaceholderText = exports.findAllByPlaceholderText = void 0;
var _queryHelpers = require("../query-helpers");
var _helpers = require("../helpers");
var _allUtils = require("./all-utils");
const queryAllByPlaceholderText = (...args) => {
  (0, _helpers.checkContainerType)(args[0]);
  return (0, _allUtils.queryAllByAttribute)('placeholder', ...args);
};
const getMultipleError = (c, text) => `Found multiple elements with the placeholder text of: ${text}`;
const getMissingError = (c, text) => `Unable to find an element with the placeholder text of: ${text}`;
const queryAllByPlaceholderTextWithSuggestions = exports.queryAllByPlaceholderText = (0, _queryHelpers.wrapAllByQueryWithSuggestion)(queryAllByPlaceholderText, queryAllByPlaceholderText.name, 'queryAll');
const [queryByPlaceholderText, getAllByPlaceholderText, getByPlaceholderText, findAllByPlaceholderText, findByPlaceholderText] = (0, _allUtils.buildQueries)(queryAllByPlaceholderText, getMultipleError, getMissingError);
exports.findByPlaceholderText = findByPlaceholderText;
exports.findAllByPlaceholderText = findAllByPlaceholderText;
exports.getByPlaceholderText = getByPlaceholderText;
exports.getAllByPlaceholderText = getAllByPlaceholderText;
exports.queryByPlaceholderText = queryByPlaceholderText;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInF1ZXJ5QnlQbGFjZWhvbGRlclRleHQiLCJxdWVyeUFsbEJ5UGxhY2Vob2xkZXJUZXh0IiwiZ2V0QnlQbGFjZWhvbGRlclRleHQiLCJnZXRBbGxCeVBsYWNlaG9sZGVyVGV4dCIsImZpbmRCeVBsYWNlaG9sZGVyVGV4dCIsImZpbmRBbGxCeVBsYWNlaG9sZGVyVGV4dCIsIl9xdWVyeUhlbHBlcnMiLCJyZXF1aXJlIiwiX2hlbHBlcnMiLCJfYWxsVXRpbHMiLCJhcmdzIiwiY2hlY2tDb250YWluZXJUeXBlIiwicXVlcnlBbGxCeUF0dHJpYnV0ZSIsImdldE11bHRpcGxlRXJyb3IiLCJjIiwidGV4dCIsImdldE1pc3NpbmdFcnJvciIsInF1ZXJ5QWxsQnlQbGFjZWhvbGRlclRleHRXaXRoU3VnZ2VzdGlvbnMiLCJ3cmFwQWxsQnlRdWVyeVdpdGhTdWdnZXN0aW9uIiwibmFtZSIsImJ1aWxkUXVlcmllcyJdLCJzb3VyY2VzIjpbInBsYWNlaG9sZGVyLXRleHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnF1ZXJ5QnlQbGFjZWhvbGRlclRleHQgPSBleHBvcnRzLnF1ZXJ5QWxsQnlQbGFjZWhvbGRlclRleHQgPSBleHBvcnRzLmdldEJ5UGxhY2Vob2xkZXJUZXh0ID0gZXhwb3J0cy5nZXRBbGxCeVBsYWNlaG9sZGVyVGV4dCA9IGV4cG9ydHMuZmluZEJ5UGxhY2Vob2xkZXJUZXh0ID0gZXhwb3J0cy5maW5kQWxsQnlQbGFjZWhvbGRlclRleHQgPSB2b2lkIDA7XG52YXIgX3F1ZXJ5SGVscGVycyA9IHJlcXVpcmUoXCIuLi9xdWVyeS1oZWxwZXJzXCIpO1xudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4uL2hlbHBlcnNcIik7XG52YXIgX2FsbFV0aWxzID0gcmVxdWlyZShcIi4vYWxsLXV0aWxzXCIpO1xuY29uc3QgcXVlcnlBbGxCeVBsYWNlaG9sZGVyVGV4dCA9ICguLi5hcmdzKSA9PiB7XG4gICgwLCBfaGVscGVycy5jaGVja0NvbnRhaW5lclR5cGUpKGFyZ3NbMF0pO1xuICByZXR1cm4gKDAsIF9hbGxVdGlscy5xdWVyeUFsbEJ5QXR0cmlidXRlKSgncGxhY2Vob2xkZXInLCAuLi5hcmdzKTtcbn07XG5jb25zdCBnZXRNdWx0aXBsZUVycm9yID0gKGMsIHRleHQpID0+IGBGb3VuZCBtdWx0aXBsZSBlbGVtZW50cyB3aXRoIHRoZSBwbGFjZWhvbGRlciB0ZXh0IG9mOiAke3RleHR9YDtcbmNvbnN0IGdldE1pc3NpbmdFcnJvciA9IChjLCB0ZXh0KSA9PiBgVW5hYmxlIHRvIGZpbmQgYW4gZWxlbWVudCB3aXRoIHRoZSBwbGFjZWhvbGRlciB0ZXh0IG9mOiAke3RleHR9YDtcbmNvbnN0IHF1ZXJ5QWxsQnlQbGFjZWhvbGRlclRleHRXaXRoU3VnZ2VzdGlvbnMgPSBleHBvcnRzLnF1ZXJ5QWxsQnlQbGFjZWhvbGRlclRleHQgPSAoMCwgX3F1ZXJ5SGVscGVycy53cmFwQWxsQnlRdWVyeVdpdGhTdWdnZXN0aW9uKShxdWVyeUFsbEJ5UGxhY2Vob2xkZXJUZXh0LCBxdWVyeUFsbEJ5UGxhY2Vob2xkZXJUZXh0Lm5hbWUsICdxdWVyeUFsbCcpO1xuY29uc3QgW3F1ZXJ5QnlQbGFjZWhvbGRlclRleHQsIGdldEFsbEJ5UGxhY2Vob2xkZXJUZXh0LCBnZXRCeVBsYWNlaG9sZGVyVGV4dCwgZmluZEFsbEJ5UGxhY2Vob2xkZXJUZXh0LCBmaW5kQnlQbGFjZWhvbGRlclRleHRdID0gKDAsIF9hbGxVdGlscy5idWlsZFF1ZXJpZXMpKHF1ZXJ5QWxsQnlQbGFjZWhvbGRlclRleHQsIGdldE11bHRpcGxlRXJyb3IsIGdldE1pc3NpbmdFcnJvcik7XG5leHBvcnRzLmZpbmRCeVBsYWNlaG9sZGVyVGV4dCA9IGZpbmRCeVBsYWNlaG9sZGVyVGV4dDtcbmV4cG9ydHMuZmluZEFsbEJ5UGxhY2Vob2xkZXJUZXh0ID0gZmluZEFsbEJ5UGxhY2Vob2xkZXJUZXh0O1xuZXhwb3J0cy5nZXRCeVBsYWNlaG9sZGVyVGV4dCA9IGdldEJ5UGxhY2Vob2xkZXJUZXh0O1xuZXhwb3J0cy5nZXRBbGxCeVBsYWNlaG9sZGVyVGV4dCA9IGdldEFsbEJ5UGxhY2Vob2xkZXJUZXh0O1xuZXhwb3J0cy5xdWVyeUJ5UGxhY2Vob2xkZXJUZXh0ID0gcXVlcnlCeVBsYWNlaG9sZGVyVGV4dDsiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQzNDQyxLQUFLLEVBQUU7QUFDVCxDQUFDLENBQUM7QUFDRkQsT0FBTyxDQUFDRSxzQkFBc0IsR0FBR0YsT0FBTyxDQUFDRyx5QkFBeUIsR0FBR0gsT0FBTyxDQUFDSSxvQkFBb0IsR0FBR0osT0FBTyxDQUFDSyx1QkFBdUIsR0FBR0wsT0FBTyxDQUFDTSxxQkFBcUIsR0FBR04sT0FBTyxDQUFDTyx3QkFBd0IsR0FBRyxLQUFLLENBQUM7QUFDL00sSUFBSUMsYUFBYSxHQUFHQyxPQUFPLENBQUMsa0JBQWtCLENBQUM7QUFDL0MsSUFBSUMsUUFBUSxHQUFHRCxPQUFPLENBQUMsWUFBWSxDQUFDO0FBQ3BDLElBQUlFLFNBQVMsR0FBR0YsT0FBTyxDQUFDLGFBQWEsQ0FBQztBQUN0QyxNQUFNTix5QkFBeUIsR0FBR0EsQ0FBQyxHQUFHUyxJQUFJLEtBQUs7RUFDN0MsQ0FBQyxDQUFDLEVBQUVGLFFBQVEsQ0FBQ0csa0JBQWtCLEVBQUVELElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUN6QyxPQUFPLENBQUMsQ0FBQyxFQUFFRCxTQUFTLENBQUNHLG1CQUFtQixFQUFFLGFBQWEsRUFBRSxHQUFHRixJQUFJLENBQUM7QUFDbkUsQ0FBQztBQUNELE1BQU1HLGdCQUFnQixHQUFHQSxDQUFDQyxDQUFDLEVBQUVDLElBQUksS0FBSyx5REFBeURBLElBQUksRUFBRTtBQUNyRyxNQUFNQyxlQUFlLEdBQUdBLENBQUNGLENBQUMsRUFBRUMsSUFBSSxLQUFLLDJEQUEyREEsSUFBSSxFQUFFO0FBQ3RHLE1BQU1FLHdDQUF3QyxHQUFHbkIsT0FBTyxDQUFDRyx5QkFBeUIsR0FBRyxDQUFDLENBQUMsRUFBRUssYUFBYSxDQUFDWSw0QkFBNEIsRUFBRWpCLHlCQUF5QixFQUFFQSx5QkFBeUIsQ0FBQ2tCLElBQUksRUFBRSxVQUFVLENBQUM7QUFDM00sTUFBTSxDQUFDbkIsc0JBQXNCLEVBQUVHLHVCQUF1QixFQUFFRCxvQkFBb0IsRUFBRUcsd0JBQXdCLEVBQUVELHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUVLLFNBQVMsQ0FBQ1csWUFBWSxFQUFFbkIseUJBQXlCLEVBQUVZLGdCQUFnQixFQUFFRyxlQUFlLENBQUM7QUFDMU5sQixPQUFPLENBQUNNLHFCQUFxQixHQUFHQSxxQkFBcUI7QUFDckROLE9BQU8sQ0FBQ08sd0JBQXdCLEdBQUdBLHdCQUF3QjtBQUMzRFAsT0FBTyxDQUFDSSxvQkFBb0IsR0FBR0Esb0JBQW9CO0FBQ25ESixPQUFPLENBQUNLLHVCQUF1QixHQUFHQSx1QkFBdUI7QUFDekRMLE9BQU8sQ0FBQ0Usc0JBQXNCLEdBQUdBLHNCQUFzQiIsImlnbm9yZUxpc3QiOltdfQ==