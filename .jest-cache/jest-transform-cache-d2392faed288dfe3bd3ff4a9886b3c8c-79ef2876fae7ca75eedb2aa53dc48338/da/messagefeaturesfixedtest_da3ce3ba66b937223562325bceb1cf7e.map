{"file":"C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\tests\\unit\\message-features-fixed.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\tests\\unit\\message-features-fixed.test.ts"],"sourcesContent":["/**\r\n * Test suite to verify the fixed message functionality\r\n * Tests that null reference errors are handled properly\r\n */\r\n\r\ndescribe(\"Message Features - Fixed Implementation\", () => {\r\n  // Mock DOM elements\r\n  let mockButton: HTMLButtonElement;\r\n  \r\n  beforeEach(() => {\r\n    // Create a real button element for testing\r\n    mockButton = document.createElement('button');\r\n    mockButton.setAttribute('title', 'Copy message');\r\n    document.body.appendChild(mockButton);\r\n  });\r\n  \r\n  afterEach(() => {\r\n    // Clean up\r\n    if (mockButton && mockButton.parentNode) {\r\n      mockButton.parentNode.removeChild(mockButton);\r\n    }\r\n  });\r\n\r\n  describe(\"Copy Functionality - Error Handling\", () => {\r\n    it(\"should handle null button references gracefully\", async () => {\r\n      const mockEvent = {\r\n        preventDefault: jest.fn(),\r\n        stopPropagation: jest.fn(),\r\n        currentTarget: null // This was causing the original error\r\n      };\r\n\r\n      // Simulate the fixed copy handler\r\n      const copyHandler = async (e: any) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        try {\r\n          // Mock clipboard operation\r\n          await Promise.resolve();\r\n          \r\n          // Fixed implementation with null checks\r\n          const button = e.currentTarget as HTMLButtonElement;\r\n          if (button) {\r\n            const originalTitle = button.getAttribute('title');\r\n            button.setAttribute('title', 'Copied!');\r\n            button.style.backgroundColor = '#dcfce7';\r\n            setTimeout(() => {\r\n              if (button) {\r\n                button.setAttribute('title', originalTitle || 'Copy message');\r\n                button.style.backgroundColor = '';\r\n              }\r\n            }, 1000);\r\n          }\r\n        } catch (error) {\r\n          console.error('Failed to copy text:', error);\r\n          const button = e.currentTarget as HTMLButtonElement;\r\n          if (button) {\r\n            button.style.backgroundColor = '#fef2f2';\r\n            button.setAttribute('title', 'Copy failed');\r\n            setTimeout(() => {\r\n              if (button) {\r\n                button.style.backgroundColor = '';\r\n                button.setAttribute('title', 'Copy message');\r\n              }\r\n            }, 2000);\r\n          }\r\n        }\r\n      };\r\n\r\n      // This should not throw an error anymore\r\n      await expect(copyHandler(mockEvent)).resolves.toBeUndefined();\r\n    });\r\n\r\n    it(\"should work correctly with valid button reference\", async () => {\r\n      const mockEvent = {\r\n        preventDefault: jest.fn(),\r\n        stopPropagation: jest.fn(),\r\n        currentTarget: mockButton\r\n      };\r\n\r\n      const copyHandler = async (e: any) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        try {\r\n          await Promise.resolve(); // Mock successful copy\r\n          \r\n          const button = e.currentTarget as HTMLButtonElement;\r\n          if (button) {\r\n            const originalTitle = button.getAttribute('title');\r\n            button.setAttribute('title', 'Copied!');\r\n            button.style.backgroundColor = '#dcfce7';\r\n            setTimeout(() => {\r\n              if (button) {\r\n                button.setAttribute('title', originalTitle || 'Copy message');\r\n                button.style.backgroundColor = '';\r\n              }\r\n            }, 10); // Shorter timeout for testing\r\n          }\r\n        } catch (error) {\r\n          // Error handling\r\n        }\r\n      };\r\n\r\n      await copyHandler(mockEvent);\r\n\r\n      // Verify the button was updated correctly\r\n      expect(mockButton.getAttribute('title')).toBe('Copied!');\r\n      expect(mockButton.style.backgroundColor).toBe('rgb(220, 252, 231)');\r\n    });\r\n  });\r\n\r\n  describe(\"Regenerate Functionality - Error Handling\", () => {\r\n    it(\"should handle null button references in regenerate\", async () => {\r\n      const mockEvent = {\r\n        preventDefault: jest.fn(),\r\n        stopPropagation: jest.fn(),\r\n        currentTarget: null\r\n      };\r\n\r\n      const regenerateHandler = async (e: any) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        const button = e.currentTarget as HTMLButtonElement;\r\n        if (button) {\r\n          button.style.backgroundColor = '#e0f2fe';\r\n        }\r\n        \r\n        // Mock regeneration logic\r\n        try {\r\n          await Promise.resolve();\r\n          if (button) {\r\n            button.style.backgroundColor = '#dcfce7';\r\n            setTimeout(() => {\r\n              if (button) button.style.backgroundColor = '';\r\n            }, 1000);\r\n          }\r\n        } catch (error) {\r\n          if (button) {\r\n            button.style.backgroundColor = '#fef2f2';\r\n            setTimeout(() => {\r\n              if (button) button.style.backgroundColor = '';\r\n            }, 1000);\r\n          }\r\n        }\r\n      };\r\n\r\n      // Should not throw error\r\n      await expect(regenerateHandler(mockEvent)).resolves.toBeUndefined();\r\n    });\r\n  });\r\n\r\n  describe(\"Feedback Functionality - Error Handling\", () => {\r\n    it(\"should handle null button references in thumbs up\", () => {\r\n      const mockEvent = {\r\n        preventDefault: jest.fn(),\r\n        stopPropagation: jest.fn(),\r\n        currentTarget: null\r\n      };\r\n\r\n      const thumbsUpHandler = (e: any) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        const button = e.currentTarget as HTMLButtonElement;\r\n        if (button) {\r\n          button.style.backgroundColor = '#dcfce7';\r\n          button.style.transform = 'scale(1.1)';\r\n          setTimeout(() => {\r\n            if (button) {\r\n              button.style.backgroundColor = '';\r\n              button.style.transform = '';\r\n            }\r\n          }, 1000);\r\n        }\r\n      };\r\n\r\n      // Should not throw error\r\n      expect(() => thumbsUpHandler(mockEvent)).not.toThrow();\r\n    });\r\n\r\n    it(\"should handle null button references in thumbs down\", () => {\r\n      const mockEvent = {\r\n        preventDefault: jest.fn(),\r\n        stopPropagation: jest.fn(),\r\n        currentTarget: null\r\n      };\r\n\r\n      const thumbsDownHandler = (e: any) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        const button = e.currentTarget as HTMLButtonElement;\r\n        if (button) {\r\n          button.style.backgroundColor = '#fef2f2';\r\n          button.style.transform = 'scale(1.1)';\r\n          setTimeout(() => {\r\n            if (button) {\r\n              button.style.backgroundColor = '';\r\n              button.style.transform = '';\r\n            }\r\n          }, 1000);\r\n        }\r\n      };\r\n\r\n      // Should not throw error\r\n      expect(() => thumbsDownHandler(mockEvent)).not.toThrow();\r\n    });\r\n  });\r\n\r\n  describe(\"Type Safety Verification\", () => {\r\n    it(\"should properly type cast currentTarget\", () => {\r\n      const mockEvent = {\r\n        currentTarget: mockButton\r\n      };\r\n\r\n      // Test the type casting approach\r\n      const button = mockEvent.currentTarget as HTMLButtonElement;\r\n      expect(button).toBeInstanceOf(HTMLButtonElement);\r\n      expect(button.tagName).toBe('BUTTON');\r\n    });\r\n\r\n    it(\"should handle undefined currentTarget\", () => {\r\n      const mockEvent = {\r\n        currentTarget: undefined\r\n      };\r\n\r\n      const button = mockEvent.currentTarget as HTMLButtonElement;\r\n      expect(button).toBeUndefined();\r\n      \r\n      // The if check should prevent any operations\r\n      if (button) {\r\n        // This block should not execute\r\n        expect(true).toBe(false);\r\n      } else {\r\n        // This is the expected path\r\n        expect(button).toBeFalsy();\r\n      }\r\n    });\r\n  });\r\n\r\n  describe(\"Visual Feedback Integration\", () => {\r\n    it(\"should apply and remove visual feedback correctly\", (done) => {\r\n      const mockEvent = {\r\n        preventDefault: jest.fn(),\r\n        stopPropagation: jest.fn(),\r\n        currentTarget: mockButton\r\n      };\r\n\r\n      const visualFeedbackHandler = (e: any) => {\r\n        const button = e.currentTarget as HTMLButtonElement;\r\n        if (button) {\r\n          button.style.backgroundColor = '#dcfce7';\r\n          button.style.transform = 'scale(1.1)';\r\n          \r\n          setTimeout(() => {\r\n            if (button) {\r\n              button.style.backgroundColor = '';\r\n              button.style.transform = '';\r\n              \r\n              // Verify cleanup happened\r\n              expect(button.style.backgroundColor).toBe('');\r\n              expect(button.style.transform).toBe('');\r\n              done();\r\n            }\r\n          }, 50);\r\n        }\r\n      };\r\n\r\n      visualFeedbackHandler(mockEvent);\r\n      \r\n      // Verify initial styles were applied\r\n      expect(mockButton.style.backgroundColor).toBe('rgb(220, 252, 231)');\r\n      expect(mockButton.style.transform).toBe('scale(1.1)');\r\n    });\r\n  });\r\n\r\n  describe(\"Error Recovery\", () => {\r\n    it(\"should recover gracefully from DOM manipulation errors\", () => {\r\n      // Create a mock button that throws errors\r\n      const errorButton = {\r\n        setAttribute: jest.fn(() => { throw new Error('DOM error'); }),\r\n        style: {\r\n          backgroundColor: ''\r\n        }\r\n      };\r\n\r\n      const mockEvent = {\r\n        preventDefault: jest.fn(),\r\n        stopPropagation: jest.fn(),\r\n        currentTarget: errorButton\r\n      };\r\n\r\n      const safeHandler = (e: any) => {\r\n        try {\r\n          const button = e.currentTarget as HTMLButtonElement;\r\n          if (button) {\r\n            button.setAttribute('title', 'Test');\r\n            button.style.backgroundColor = '#dcfce7';\r\n          }\r\n        } catch (error) {\r\n          // Error should be caught and handled\r\n          expect(error).toBeInstanceOf(Error);\r\n        }\r\n      };\r\n\r\n      // Should not throw unhandled errors\r\n      expect(() => safeHandler(mockEvent)).not.toThrow();\r\n    });\r\n  });\r\n});\r\n"],"version":3}