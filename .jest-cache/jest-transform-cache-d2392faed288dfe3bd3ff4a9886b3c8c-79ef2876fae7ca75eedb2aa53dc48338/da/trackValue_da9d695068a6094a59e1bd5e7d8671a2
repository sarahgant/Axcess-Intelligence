e93a2c4da92aa8d74138f99182fd442b
'use strict';

require('../utils/dataTransfer/Clipboard.js');
var getWindow = require('../utils/misc/getWindow.js');
var UI = require('./UI.js');
const TrackChanges = Symbol('Track programmatic changes for React workaround');
// When the input event happens in the browser, React executes all event handlers
// and if they change state of a controlled value, nothing happens.
// But when we trigger the event handlers in test environment with React@17,
// the changes are rolled back before the state update is applied.
// This results in a reset cursor.
// There might be a better way to work around if we figure out
// why the batched update is executed differently in our test environment.
function isReact17Element(element) {
  return Object.getOwnPropertyNames(element).some(k => k.startsWith('__react')) && getWindow.getWindow(element).REACT_VERSION === 17;
}
function startTrackValue(element) {
  if (!isReact17Element(element)) {
    return;
  }
  element[TrackChanges] = {
    previousValue: String(element.value),
    tracked: []
  };
}
function trackOrSetValue(element, v) {
  var _element_TrackChanges_tracked, _element_TrackChanges;
  (_element_TrackChanges = element[TrackChanges]) === null || _element_TrackChanges === undefined ? undefined : (_element_TrackChanges_tracked = _element_TrackChanges.tracked) === null || _element_TrackChanges_tracked === undefined ? undefined : _element_TrackChanges_tracked.push(v);
  if (!element[TrackChanges]) {
    UI.setUIValueClean(element);
    UI.setUISelection(element, {
      focusOffset: v.length
    });
  }
}
function commitValueAfterInput(element, cursorOffset) {
  var _changes_tracked;
  const changes = element[TrackChanges];
  element[TrackChanges] = undefined;
  if (!(changes === null || changes === undefined ? undefined : (_changes_tracked = changes.tracked) === null || _changes_tracked === undefined ? undefined : _changes_tracked.length)) {
    return;
  }
  const isJustReactStateUpdate = changes.tracked.length === 2 && changes.tracked[0] === changes.previousValue && changes.tracked[1] === element.value;
  if (!isJustReactStateUpdate) {
    UI.setUIValueClean(element);
  }
  if (UI.hasUISelection(element)) {
    UI.setUISelection(element, {
      focusOffset: isJustReactStateUpdate ? cursorOffset : element.value.length
    });
  }
}
exports.commitValueAfterInput = commitValueAfterInput;
exports.startTrackValue = startTrackValue;
exports.trackOrSetValue = trackOrSetValue;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1aXJlIiwiZ2V0V2luZG93IiwiVUkiLCJUcmFja0NoYW5nZXMiLCJTeW1ib2wiLCJpc1JlYWN0MTdFbGVtZW50IiwiZWxlbWVudCIsIk9iamVjdCIsImdldE93blByb3BlcnR5TmFtZXMiLCJzb21lIiwiayIsInN0YXJ0c1dpdGgiLCJSRUFDVF9WRVJTSU9OIiwic3RhcnRUcmFja1ZhbHVlIiwicHJldmlvdXNWYWx1ZSIsIlN0cmluZyIsInZhbHVlIiwidHJhY2tlZCIsInRyYWNrT3JTZXRWYWx1ZSIsInYiLCJfZWxlbWVudF9UcmFja0NoYW5nZXNfdHJhY2tlZCIsIl9lbGVtZW50X1RyYWNrQ2hhbmdlcyIsInVuZGVmaW5lZCIsInB1c2giLCJzZXRVSVZhbHVlQ2xlYW4iLCJzZXRVSVNlbGVjdGlvbiIsImZvY3VzT2Zmc2V0IiwibGVuZ3RoIiwiY29tbWl0VmFsdWVBZnRlcklucHV0IiwiY3Vyc29yT2Zmc2V0IiwiX2NoYW5nZXNfdHJhY2tlZCIsImNoYW5nZXMiLCJpc0p1c3RSZWFjdFN0YXRlVXBkYXRlIiwiaGFzVUlTZWxlY3Rpb24iLCJleHBvcnRzIl0sInNvdXJjZXMiOlsidHJhY2tWYWx1ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnJlcXVpcmUoJy4uL3V0aWxzL2RhdGFUcmFuc2Zlci9DbGlwYm9hcmQuanMnKTtcbnZhciBnZXRXaW5kb3cgPSByZXF1aXJlKCcuLi91dGlscy9taXNjL2dldFdpbmRvdy5qcycpO1xudmFyIFVJID0gcmVxdWlyZSgnLi9VSS5qcycpO1xuXG5jb25zdCBUcmFja0NoYW5nZXMgPSBTeW1ib2woJ1RyYWNrIHByb2dyYW1tYXRpYyBjaGFuZ2VzIGZvciBSZWFjdCB3b3JrYXJvdW5kJyk7XG4vLyBXaGVuIHRoZSBpbnB1dCBldmVudCBoYXBwZW5zIGluIHRoZSBicm93c2VyLCBSZWFjdCBleGVjdXRlcyBhbGwgZXZlbnQgaGFuZGxlcnNcbi8vIGFuZCBpZiB0aGV5IGNoYW5nZSBzdGF0ZSBvZiBhIGNvbnRyb2xsZWQgdmFsdWUsIG5vdGhpbmcgaGFwcGVucy5cbi8vIEJ1dCB3aGVuIHdlIHRyaWdnZXIgdGhlIGV2ZW50IGhhbmRsZXJzIGluIHRlc3QgZW52aXJvbm1lbnQgd2l0aCBSZWFjdEAxNyxcbi8vIHRoZSBjaGFuZ2VzIGFyZSByb2xsZWQgYmFjayBiZWZvcmUgdGhlIHN0YXRlIHVwZGF0ZSBpcyBhcHBsaWVkLlxuLy8gVGhpcyByZXN1bHRzIGluIGEgcmVzZXQgY3Vyc29yLlxuLy8gVGhlcmUgbWlnaHQgYmUgYSBiZXR0ZXIgd2F5IHRvIHdvcmsgYXJvdW5kIGlmIHdlIGZpZ3VyZSBvdXRcbi8vIHdoeSB0aGUgYmF0Y2hlZCB1cGRhdGUgaXMgZXhlY3V0ZWQgZGlmZmVyZW50bHkgaW4gb3VyIHRlc3QgZW52aXJvbm1lbnQuXG5mdW5jdGlvbiBpc1JlYWN0MTdFbGVtZW50KGVsZW1lbnQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZWxlbWVudCkuc29tZSgoayk9Pmsuc3RhcnRzV2l0aCgnX19yZWFjdCcpKSAmJiBnZXRXaW5kb3cuZ2V0V2luZG93KGVsZW1lbnQpLlJFQUNUX1ZFUlNJT04gPT09IDE3O1xufVxuZnVuY3Rpb24gc3RhcnRUcmFja1ZhbHVlKGVsZW1lbnQpIHtcbiAgICBpZiAoIWlzUmVhY3QxN0VsZW1lbnQoZWxlbWVudCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlbGVtZW50W1RyYWNrQ2hhbmdlc10gPSB7XG4gICAgICAgIHByZXZpb3VzVmFsdWU6IFN0cmluZyhlbGVtZW50LnZhbHVlKSxcbiAgICAgICAgdHJhY2tlZDogW11cbiAgICB9O1xufVxuZnVuY3Rpb24gdHJhY2tPclNldFZhbHVlKGVsZW1lbnQsIHYpIHtcbiAgICB2YXIgX2VsZW1lbnRfVHJhY2tDaGFuZ2VzX3RyYWNrZWQsIF9lbGVtZW50X1RyYWNrQ2hhbmdlcztcbiAgICAoX2VsZW1lbnRfVHJhY2tDaGFuZ2VzID0gZWxlbWVudFtUcmFja0NoYW5nZXNdKSA9PT0gbnVsbCB8fCBfZWxlbWVudF9UcmFja0NoYW5nZXMgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IChfZWxlbWVudF9UcmFja0NoYW5nZXNfdHJhY2tlZCA9IF9lbGVtZW50X1RyYWNrQ2hhbmdlcy50cmFja2VkKSA9PT0gbnVsbCB8fCBfZWxlbWVudF9UcmFja0NoYW5nZXNfdHJhY2tlZCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogX2VsZW1lbnRfVHJhY2tDaGFuZ2VzX3RyYWNrZWQucHVzaCh2KTtcbiAgICBpZiAoIWVsZW1lbnRbVHJhY2tDaGFuZ2VzXSkge1xuICAgICAgICBVSS5zZXRVSVZhbHVlQ2xlYW4oZWxlbWVudCk7XG4gICAgICAgIFVJLnNldFVJU2VsZWN0aW9uKGVsZW1lbnQsIHtcbiAgICAgICAgICAgIGZvY3VzT2Zmc2V0OiB2Lmxlbmd0aFxuICAgICAgICB9KTtcbiAgICB9XG59XG5mdW5jdGlvbiBjb21taXRWYWx1ZUFmdGVySW5wdXQoZWxlbWVudCwgY3Vyc29yT2Zmc2V0KSB7XG4gICAgdmFyIF9jaGFuZ2VzX3RyYWNrZWQ7XG4gICAgY29uc3QgY2hhbmdlcyA9IGVsZW1lbnRbVHJhY2tDaGFuZ2VzXTtcbiAgICBlbGVtZW50W1RyYWNrQ2hhbmdlc10gPSB1bmRlZmluZWQ7XG4gICAgaWYgKCEoY2hhbmdlcyA9PT0gbnVsbCB8fCBjaGFuZ2VzID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiAoX2NoYW5nZXNfdHJhY2tlZCA9IGNoYW5nZXMudHJhY2tlZCkgPT09IG51bGwgfHwgX2NoYW5nZXNfdHJhY2tlZCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogX2NoYW5nZXNfdHJhY2tlZC5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaXNKdXN0UmVhY3RTdGF0ZVVwZGF0ZSA9IGNoYW5nZXMudHJhY2tlZC5sZW5ndGggPT09IDIgJiYgY2hhbmdlcy50cmFja2VkWzBdID09PSBjaGFuZ2VzLnByZXZpb3VzVmFsdWUgJiYgY2hhbmdlcy50cmFja2VkWzFdID09PSBlbGVtZW50LnZhbHVlO1xuICAgIGlmICghaXNKdXN0UmVhY3RTdGF0ZVVwZGF0ZSkge1xuICAgICAgICBVSS5zZXRVSVZhbHVlQ2xlYW4oZWxlbWVudCk7XG4gICAgfVxuICAgIGlmIChVSS5oYXNVSVNlbGVjdGlvbihlbGVtZW50KSkge1xuICAgICAgICBVSS5zZXRVSVNlbGVjdGlvbihlbGVtZW50LCB7XG4gICAgICAgICAgICBmb2N1c09mZnNldDogaXNKdXN0UmVhY3RTdGF0ZVVwZGF0ZSA/IGN1cnNvck9mZnNldCA6IGVsZW1lbnQudmFsdWUubGVuZ3RoXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZXhwb3J0cy5jb21taXRWYWx1ZUFmdGVySW5wdXQgPSBjb21taXRWYWx1ZUFmdGVySW5wdXQ7XG5leHBvcnRzLnN0YXJ0VHJhY2tWYWx1ZSA9IHN0YXJ0VHJhY2tWYWx1ZTtcbmV4cG9ydHMudHJhY2tPclNldFZhbHVlID0gdHJhY2tPclNldFZhbHVlO1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaQSxPQUFPLENBQUMsb0NBQW9DLENBQUM7QUFDN0MsSUFBSUMsU0FBUyxHQUFHRCxPQUFPLENBQUMsNEJBQTRCLENBQUM7QUFDckQsSUFBSUUsRUFBRSxHQUFHRixPQUFPLENBQUMsU0FBUyxDQUFDO0FBRTNCLE1BQU1HLFlBQVksR0FBR0MsTUFBTSxDQUFDLGlEQUFpRCxDQUFDO0FBQzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsZ0JBQWdCQSxDQUFDQyxPQUFPLEVBQUU7RUFDL0IsT0FBT0MsTUFBTSxDQUFDQyxtQkFBbUIsQ0FBQ0YsT0FBTyxDQUFDLENBQUNHLElBQUksQ0FBRUMsQ0FBQyxJQUFHQSxDQUFDLENBQUNDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJVixTQUFTLENBQUNBLFNBQVMsQ0FBQ0ssT0FBTyxDQUFDLENBQUNNLGFBQWEsS0FBSyxFQUFFO0FBQ3RJO0FBQ0Es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