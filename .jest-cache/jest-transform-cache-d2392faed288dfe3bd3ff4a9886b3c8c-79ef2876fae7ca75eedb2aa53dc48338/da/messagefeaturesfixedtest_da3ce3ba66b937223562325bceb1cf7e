649ebc162107dff31892c6a4a74b9ad9
"use strict";
/**
 * Test suite to verify the fixed message functionality
 * Tests that null reference errors are handled properly
 */
Object.defineProperty(exports, "__esModule", { value: true });
describe("Message Features - Fixed Implementation", () => {
    // Mock DOM elements
    let mockButton;
    beforeEach(() => {
        // Create a real button element for testing
        mockButton = document.createElement('button');
        mockButton.setAttribute('title', 'Copy message');
        document.body.appendChild(mockButton);
    });
    afterEach(() => {
        // Clean up
        if (mockButton && mockButton.parentNode) {
            mockButton.parentNode.removeChild(mockButton);
        }
    });
    describe("Copy Functionality - Error Handling", () => {
        it("should handle null button references gracefully", async () => {
            const mockEvent = {
                preventDefault: jest.fn(),
                stopPropagation: jest.fn(),
                currentTarget: null // This was causing the original error
            };
            // Simulate the fixed copy handler
            const copyHandler = async (e) => {
                e.preventDefault();
                e.stopPropagation();
                try {
                    // Mock clipboard operation
                    await Promise.resolve();
                    // Fixed implementation with null checks
                    const button = e.currentTarget;
                    if (button) {
                        const originalTitle = button.getAttribute('title');
                        button.setAttribute('title', 'Copied!');
                        button.style.backgroundColor = '#dcfce7';
                        setTimeout(() => {
                            if (button) {
                                button.setAttribute('title', originalTitle || 'Copy message');
                                button.style.backgroundColor = '';
                            }
                        }, 1000);
                    }
                }
                catch (error) {
                    console.error('Failed to copy text:', error);
                    const button = e.currentTarget;
                    if (button) {
                        button.style.backgroundColor = '#fef2f2';
                        button.setAttribute('title', 'Copy failed');
                        setTimeout(() => {
                            if (button) {
                                button.style.backgroundColor = '';
                                button.setAttribute('title', 'Copy message');
                            }
                        }, 2000);
                    }
                }
            };
            // This should not throw an error anymore
            await expect(copyHandler(mockEvent)).resolves.toBeUndefined();
        });
        it("should work correctly with valid button reference", async () => {
            const mockEvent = {
                preventDefault: jest.fn(),
                stopPropagation: jest.fn(),
                currentTarget: mockButton
            };
            const copyHandler = async (e) => {
                e.preventDefault();
                e.stopPropagation();
                try {
                    await Promise.resolve(); // Mock successful copy
                    const button = e.currentTarget;
                    if (button) {
                        const originalTitle = button.getAttribute('title');
                        button.setAttribute('title', 'Copied!');
                        button.style.backgroundColor = '#dcfce7';
                        setTimeout(() => {
                            if (button) {
                                button.setAttribute('title', originalTitle || 'Copy message');
                                button.style.backgroundColor = '';
                            }
                        }, 10); // Shorter timeout for testing
                    }
                }
                catch (error) {
                    // Error handling
                }
            };
            await copyHandler(mockEvent);
            // Verify the button was updated correctly
            expect(mockButton.getAttribute('title')).toBe('Copied!');
            expect(mockButton.style.backgroundColor).toBe('rgb(220, 252, 231)');
        });
    });
    describe("Regenerate Functionality - Error Handling", () => {
        it("should handle null button references in regenerate", async () => {
            const mockEvent = {
                preventDefault: jest.fn(),
                stopPropagation: jest.fn(),
                currentTarget: null
            };
            const regenerateHandler = async (e) => {
                e.preventDefault();
                e.stopPropagation();
                const button = e.currentTarget;
                if (button) {
                    button.style.backgroundColor = '#e0f2fe';
                }
                // Mock regeneration logic
                try {
                    await Promise.resolve();
                    if (button) {
                        button.style.backgroundColor = '#dcfce7';
                        setTimeout(() => {
                            if (button)
                                button.style.backgroundColor = '';
                        }, 1000);
                    }
                }
                catch (error) {
                    if (button) {
                        button.style.backgroundColor = '#fef2f2';
                        setTimeout(() => {
                            if (button)
                                button.style.backgroundColor = '';
                        }, 1000);
                    }
                }
            };
            // Should not throw error
            await expect(regenerateHandler(mockEvent)).resolves.toBeUndefined();
        });
    });
    describe("Feedback Functionality - Error Handling", () => {
        it("should handle null button references in thumbs up", () => {
            const mockEvent = {
                preventDefault: jest.fn(),
                stopPropagation: jest.fn(),
                currentTarget: null
            };
            const thumbsUpHandler = (e) => {
                e.preventDefault();
                e.stopPropagation();
                const button = e.currentTarget;
                if (button) {
                    button.style.backgroundColor = '#dcfce7';
                    button.style.transform = 'scale(1.1)';
                    setTimeout(() => {
                        if (button) {
                            button.style.backgroundColor = '';
                            button.style.transform = '';
                        }
                    }, 1000);
                }
            };
            // Should not throw error
            expect(() => thumbsUpHandler(mockEvent)).not.toThrow();
        });
        it("should handle null button references in thumbs down", () => {
            const mockEvent = {
                preventDefault: jest.fn(),
                stopPropagation: jest.fn(),
                currentTarget: null
            };
            const thumbsDownHandler = (e) => {
                e.preventDefault();
                e.stopPropagation();
                const button = e.currentTarget;
                if (button) {
                    button.style.backgroundColor = '#fef2f2';
                    button.style.transform = 'scale(1.1)';
                    setTimeout(() => {
                        if (button) {
                            button.style.backgroundColor = '';
                            button.style.transform = '';
                        }
                    }, 1000);
                }
            };
            // Should not throw error
            expect(() => thumbsDownHandler(mockEvent)).not.toThrow();
        });
    });
    describe("Type Safety Verification", () => {
        it("should properly type cast currentTarget", () => {
            const mockEvent = {
                currentTarget: mockButton
            };
            // Test the type casting approach
            const button = mockEvent.currentTarget;
            expect(button).toBeInstanceOf(HTMLButtonElement);
            expect(button.tagName).toBe('BUTTON');
        });
        it("should handle undefined currentTarget", () => {
            const mockEvent = {
                currentTarget: undefined
            };
            const button = mockEvent.currentTarget;
            expect(button).toBeUndefined();
            // The if check should prevent any operations
            if (button) {
                // This block should not execute
                expect(true).toBe(false);
            }
            else {
                // This is the expected path
                expect(button).toBeFalsy();
            }
        });
    });
    describe("Visual Feedback Integration", () => {
        it("should apply and remove visual feedback correctly", (done) => {
            const mockEvent = {
                preventDefault: jest.fn(),
                stopPropagation: jest.fn(),
                currentTarget: mockButton
            };
            const visualFeedbackHandler = (e) => {
                const button = e.currentTarget;
                if (button) {
                    button.style.backgroundColor = '#dcfce7';
                    button.style.transform = 'scale(1.1)';
                    setTimeout(() => {
                        if (button) {
                            button.style.backgroundColor = '';
                            button.style.transform = '';
                            // Verify cleanup happened
                            expect(button.style.backgroundColor).toBe('');
                            expect(button.style.transform).toBe('');
                            done();
                        }
                    }, 50);
                }
            };
            visualFeedbackHandler(mockEvent);
            // Verify initial styles were applied
            expect(mockButton.style.backgroundColor).toBe('rgb(220, 252, 231)');
            expect(mockButton.style.transform).toBe('scale(1.1)');
        });
    });
    describe("Error Recovery", () => {
        it("should recover gracefully from DOM manipulation errors", () => {
            // Create a mock button that throws errors
            const errorButton = {
                setAttribute: jest.fn(() => { throw new Error('DOM error'); }),
                style: {
                    backgroundColor: ''
                }
            };
            const mockEvent = {
                preventDefault: jest.fn(),
                stopPropagation: jest.fn(),
                currentTarget: errorButton
            };
            const safeHandler = (e) => {
                try {
                    const button = e.currentTarget;
                    if (button) {
                        button.setAttribute('title', 'Test');
                        button.style.backgroundColor = '#dcfce7';
                    }
                }
                catch (error) {
                    // Error should be caught and handled
                    expect(error).toBeInstanceOf(Error);
                }
            };
            // Should not throw unhandled errors
            expect(() => safeHandler(mockEvent)).not.toThrow();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,