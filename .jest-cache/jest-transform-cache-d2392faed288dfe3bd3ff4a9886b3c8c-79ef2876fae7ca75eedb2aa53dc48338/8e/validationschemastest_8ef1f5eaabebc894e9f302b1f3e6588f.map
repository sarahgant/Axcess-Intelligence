{"file":"C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\tests\\unit\\validation-schemas.test.ts","mappings":";;AAAA,2CAAqD;AACrD,+DAK2C;AAG3C,IAAA,kBAAQ,EAAC,oBAAoB,EAAE,GAAG,EAAE;IAClC,IAAA,kBAAQ,EAAC,eAAe,EAAE,GAAG,EAAE;QAC7B,IAAA,YAAE,EAAC,iCAAiC,EAAE,GAAG,EAAE;YACzC,MAAM,YAAY,GAAG;gBACnB,OAAO,EAAE,eAAe;gBACxB,IAAI,EAAE,MAAe;gBACrB,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,QAAQ,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE;aAC/B,CAAC;YAEF,MAAM,MAAM,GAAG,uBAAa,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;YACrD,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,mCAAmC,EAAE,GAAG,EAAE;YAC3C,MAAM,cAAc,GAAG;gBACrB,OAAO,EAAE,MAAM;gBACf,IAAI,EAAE,WAAoB;aAC3B,CAAC;YAEF,MAAM,MAAM,GAAG,uBAAa,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;YACvD,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,6BAA6B,EAAE,GAAG,EAAE;YACrC,MAAM,cAAc,GAAG;gBACrB,OAAO,EAAE,EAAE;gBACX,IAAI,EAAE,MAAe;aACtB,CAAC;YAEF,MAAM,MAAM,GAAG,uBAAa,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;YACvD,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;gBACpB,IAAA,gBAAM,EAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;YAC3D,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,wCAAwC,EAAE,GAAG,EAAE;YAChD,MAAM,cAAc,GAAG;gBACrB,OAAO,EAAE,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC;gBAC1B,IAAI,EAAE,MAAe;aACtB,CAAC;YAEF,MAAM,MAAM,GAAG,uBAAa,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;YACvD,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;gBACpB,IAAA,gBAAM,EAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;YAC3D,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,4BAA4B,EAAE,GAAG,EAAE;YACpC,MAAM,cAAc,GAAG;gBACrB,OAAO,EAAE,MAAM;gBACf,IAAI,EAAE,SAAgB;aACvB,CAAC;YAEF,MAAM,MAAM,GAAG,uBAAa,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;YACvD,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;gBACpB,IAAA,gBAAM,EAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YACxD,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,kBAAkB,EAAE,GAAG,EAAE;QAChC,IAAA,YAAE,EAAC,qCAAqC,EAAE,GAAG,EAAE;YAC7C,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,CAAC,cAAc,CAAC,EAAE,UAAU,EAAE,EAAE,IAAI,EAAE,iBAAiB,EAAE,CAAC,CAAC;YACrF,MAAM,WAAW,GAAG;gBAClB,IAAI,EAAE,UAAU;gBAChB,IAAI,EAAE,IAAI;gBACV,IAAI,EAAE,iBAA0B;gBAChC,OAAO,EAAE,QAAQ;aAClB,CAAC;YAEF,MAAM,MAAM,GAAG,0BAAgB,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;YACvD,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,oCAAoC,EAAE,GAAG,EAAE;YAC5C,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,CAAC,cAAc,CAAC,EAAE,UAAU,EAAE,EAAE,IAAI,EAAE,iBAAiB,EAAE,CAAC,CAAC;YACrF,MAAM,aAAa,GAAG;gBACpB,IAAI,EAAE,EAAE;gBACR,IAAI,EAAE,IAAI;gBACV,IAAI,EAAE,iBAA0B;gBAChC,OAAO,EAAE,QAAQ;aAClB,CAAC;YAEF,MAAM,MAAM,GAAG,0BAAgB,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;YACzD,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;gBACpB,IAAA,gBAAM,EAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YACxD,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,uCAAuC,EAAE,GAAG,EAAE;YAC/C,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,CAAC,cAAc,CAAC,EAAE,UAAU,EAAE,EAAE,IAAI,EAAE,iBAAiB,EAAE,CAAC,CAAC;YACrF,MAAM,aAAa,GAAG;gBACpB,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC;gBACrB,IAAI,EAAE,IAAI;gBACV,IAAI,EAAE,iBAA0B;gBAChC,OAAO,EAAE,QAAQ;aAClB,CAAC;YAEF,MAAM,MAAM,GAAG,0BAAgB,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;YACzD,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;gBACpB,IAAA,gBAAM,EAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YACxD,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,sCAAsC,EAAE,GAAG,EAAE;YAC9C,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,CAAC,cAAc,CAAC,EAAE,UAAU,EAAE,EAAE,IAAI,EAAE,iBAAiB,EAAE,CAAC,CAAC;YACrF,MAAM,aAAa,GAAG;gBACpB,IAAI,EAAE,UAAU;gBAChB,IAAI,EAAE,EAAE,GAAG,IAAI,GAAG,IAAI,EAAE,OAAO;gBAC/B,IAAI,EAAE,iBAA0B;gBAChC,OAAO,EAAE,QAAQ;aAClB,CAAC;YAEF,MAAM,MAAM,GAAG,0BAAgB,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;YACzD,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;gBACpB,IAAA,gBAAM,EAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YACxD,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,qCAAqC,EAAE,GAAG,EAAE;YAC7C,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,CAAC,cAAc,CAAC,EAAE,UAAU,EAAE,EAAE,IAAI,EAAE,0BAA0B,EAAE,CAAC,CAAC;YAC9F,MAAM,aAAa,GAAG;gBACpB,IAAI,EAAE,UAAU;gBAChB,IAAI,EAAE,IAAI;gBACV,IAAI,EAAE,0BAAiC;gBACvC,OAAO,EAAE,QAAQ;aAClB,CAAC;YAEF,MAAM,MAAM,GAAG,0BAAgB,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;YACzD,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;gBACpB,IAAA,gBAAM,EAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YACxD,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,wCAAwC,EAAE,GAAG,EAAE;YAChD,MAAM,cAAc,GAAG;gBACrB,iBAAiB;gBACjB,yEAAyE;gBACzE,mEAAmE;gBACnE,YAAY;gBACZ,WAAW;gBACX,YAAY;aACb,CAAC;YAEF,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBAC5B,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,CAAC,cAAc,CAAC,EAAE,WAAW,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;gBACnE,MAAM,WAAW,GAAG;oBAClB,IAAI,EAAE,WAAW;oBACjB,IAAI,EAAE,IAAI;oBACV,IAAI,EAAE,IAAW;oBACjB,OAAO,EAAE,QAAQ;iBAClB,CAAC;gBAEF,MAAM,MAAM,GAAG,0BAAgB,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;gBACvD,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACpC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,kBAAkB,EAAE,GAAG,EAAE;QAChC,IAAA,YAAE,EAAC,qCAAqC,EAAE,GAAG,EAAE;YAC7C,MAAM,YAAY,GAAG;gBACnB,QAAQ,EAAE;oBACR;wBACE,OAAO,EAAE,OAAO;wBAChB,IAAI,EAAE,MAAe;qBACtB;oBACD;wBACE,OAAO,EAAE,WAAW;wBACpB,IAAI,EAAE,WAAoB;qBAC3B;iBACF;gBACD,KAAK,EAAE,OAAO;gBACd,WAAW,EAAE,GAAG;gBAChB,SAAS,EAAE,IAAI;aAChB,CAAC;YAEF,MAAM,MAAM,GAAG,0BAAgB,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;YACxD,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,qCAAqC,EAAE,GAAG,EAAE;YAC7C,MAAM,cAAc,GAAG;gBACrB,QAAQ,EAAE;oBACR;wBACE,OAAO,EAAE,OAAO;wBAChB,IAAI,EAAE,MAAe;qBACtB;iBACF;aACF,CAAC;YAEF,MAAM,MAAM,GAAG,0BAAgB,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;YAC1D,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,oCAAoC,EAAE,GAAG,EAAE;YAC5C,MAAM,cAAc,GAAG;gBACrB,QAAQ,EAAE,EAAE;aACb,CAAC;YAEF,MAAM,MAAM,GAAG,0BAAgB,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;YAC1D,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;gBACpB,IAAA,gBAAM,EAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;YAC5D,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,mCAAmC,EAAE,GAAG,EAAE;YAC3C,MAAM,cAAc,GAAG;gBACrB,QAAQ,EAAE;oBACR;wBACE,OAAO,EAAE,OAAO;wBAChB,IAAI,EAAE,MAAe;qBACtB;iBACF;gBACD,WAAW,EAAE,GAAG,CAAC,WAAW;aAC7B,CAAC;YAEF,MAAM,MAAM,GAAG,0BAAgB,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;YAC1D,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;gBACpB,IAAA,gBAAM,EAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;YAC/D,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,oCAAoC,EAAE,GAAG,EAAE;YAC5C,MAAM,cAAc,GAAG;gBACrB,QAAQ,EAAE;oBACR;wBACE,OAAO,EAAE,OAAO;wBAChB,IAAI,EAAE,MAAe;qBACtB;iBACF;gBACD,WAAW,EAAE,CAAC,GAAG;aAClB,CAAC;YAEF,MAAM,MAAM,GAAG,0BAAgB,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;YAC1D,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;gBACpB,IAAA,gBAAM,EAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;YAC/D,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,iCAAiC,EAAE,GAAG,EAAE;YACzC,MAAM,cAAc,GAAG;gBACrB,QAAQ,EAAE;oBACR;wBACE,OAAO,EAAE,OAAO;wBAChB,IAAI,EAAE,MAAe;qBACtB;iBACF;gBACD,SAAS,EAAE,CAAC,CAAC,UAAU;aACxB,CAAC;YAEF,MAAM,MAAM,GAAG,0BAAgB,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;YAC1D,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;gBACpB,IAAA,gBAAM,EAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;YAC7D,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,0CAA0C,EAAE,GAAG,EAAE;YAClD,MAAM,cAAc,GAAG;gBACrB,QAAQ,EAAE;oBACR;wBACE,OAAO,EAAE,OAAO;wBAChB,IAAI,EAAE,MAAe;qBACtB;iBACF;gBACD,SAAS,EAAE,MAAM,CAAC,WAAW;aAC9B,CAAC;YAEF,MAAM,MAAM,GAAG,0BAAgB,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;YAC1D,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;gBACpB,IAAA,gBAAM,EAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;YAC7D,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,eAAe,EAAE,GAAG,EAAE;QAC7B,IAAA,YAAE,EAAC,yBAAyB,EAAE,GAAG,EAAE;YACjC,MAAM,KAAK,GAAG,0CAA0C,CAAC;YACzD,MAAM,MAAM,GAAG,IAAA,uBAAa,EAAC,KAAK,CAAC,CAAC;YACpC,IAAA,gBAAM,EAAC,MAAM,CAAC,CAAC,IAAI,CAAC,sCAAsC,CAAC,CAAC;QAC9D,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,mCAAmC,EAAE,GAAG,EAAE;YAC3C,MAAM,KAAK,GAAG,yBAAyB,CAAC;YACxC,MAAM,MAAM,GAAG,IAAA,uBAAa,EAAC,KAAK,CAAC,CAAC;YACpC,IAAA,gBAAM,EAAC,MAAM,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,8BAA8B,EAAE,GAAG,EAAE;YACtC,MAAM,KAAK,GAAG,0CAA0C,CAAC;YACzD,MAAM,MAAM,GAAG,IAAA,uBAAa,EAAC,KAAK,CAAC,CAAC;YACpC,IAAA,gBAAM,EAAC,MAAM,CAAC,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,wBAAwB,EAAE,GAAG,EAAE;YAChC,MAAM,KAAK,GAAG,iBAAiB,CAAC;YAChC,MAAM,MAAM,GAAG,IAAA,uBAAa,EAAC,KAAK,CAAC,CAAC;YACpC,IAAA,gBAAM,EAAC,MAAM,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,4BAA4B,EAAE,GAAG,EAAE;YACpC,MAAM,KAAK,GAAG,EAAE,CAAC;YACjB,MAAM,MAAM,GAAG,IAAA,uBAAa,EAAC,KAAK,CAAC,CAAC;YACpC,IAAA,gBAAM,EAAC,MAAM,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC1B,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,2CAA2C,EAAE,GAAG,EAAE;YACnD,MAAM,KAAK,GAAG,WAAW,CAAC;YAC1B,MAAM,MAAM,GAAG,IAAA,uBAAa,EAAC,KAAK,CAAC,CAAC;YACpC,IAAA,gBAAM,EAAC,MAAM,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC1B,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,6BAA6B,EAAE,GAAG,EAAE;YACrC,MAAM,KAAK,GAAG,uDAAuD,CAAC;YACtE,MAAM,MAAM,GAAG,IAAA,uBAAa,EAAC,KAAK,CAAC,CAAC;YACpC,IAAA,gBAAM,EAAC,MAAM,CAAC,CAAC,IAAI,CAAC,uDAAuD,CAAC,CAAC;QAC/E,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,oCAAoC,EAAE,GAAG,EAAE;YAC5C,MAAM,KAAK,GAAG,4FAA4F,CAAC;YAC3G,MAAM,MAAM,GAAG,IAAA,uBAAa,EAAC,KAAK,CAAC,CAAC;YACpC,IAAA,gBAAM,EAAC,MAAM,CAAC,CAAC,IAAI,CAAC,2EAA2E,CAAC,CAAC;QACnG,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\tests\\unit\\validation-schemas.test.ts"],"sourcesContent":["import { describe, it, expect } from '@jest/globals';\r\nimport { \r\n  messageSchema, \r\n  fileUploadSchema, \r\n  apiRequestSchema, \r\n  sanitizeInput \r\n} from '../../src/core/validation/schemas';\r\nimport { z } from 'zod';\r\n\r\ndescribe('Validation Schemas', () => {\r\n  describe('messageSchema', () => {\r\n    it('should validate a valid message', () => {\r\n      const validMessage = {\r\n        content: 'Hello, world!',\r\n        role: 'user' as const,\r\n        timestamp: new Date(),\r\n        metadata: { sessionId: '123' }\r\n      };\r\n\r\n      const result = messageSchema.safeParse(validMessage);\r\n      expect(result.success).toBe(true);\r\n    });\r\n\r\n    it('should validate a minimal message', () => {\r\n      const minimalMessage = {\r\n        content: 'Test',\r\n        role: 'assistant' as const\r\n      };\r\n\r\n      const result = messageSchema.safeParse(minimalMessage);\r\n      expect(result.success).toBe(true);\r\n    });\r\n\r\n    it('should reject empty content', () => {\r\n      const invalidMessage = {\r\n        content: '',\r\n        role: 'user' as const\r\n      };\r\n\r\n      const result = messageSchema.safeParse(invalidMessage);\r\n      expect(result.success).toBe(false);\r\n      if (!result.success) {\r\n        expect(result.error.issues[0].path).toContain('content');\r\n      }\r\n    });\r\n\r\n    it('should reject content that is too long', () => {\r\n      const invalidMessage = {\r\n        content: 'a'.repeat(10001),\r\n        role: 'user' as const\r\n      };\r\n\r\n      const result = messageSchema.safeParse(invalidMessage);\r\n      expect(result.success).toBe(false);\r\n      if (!result.success) {\r\n        expect(result.error.issues[0].path).toContain('content');\r\n      }\r\n    });\r\n\r\n    it('should reject invalid role', () => {\r\n      const invalidMessage = {\r\n        content: 'Test',\r\n        role: 'invalid' as any\r\n      };\r\n\r\n      const result = messageSchema.safeParse(invalidMessage);\r\n      expect(result.success).toBe(false);\r\n      if (!result.success) {\r\n        expect(result.error.issues[0].path).toContain('role');\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('fileUploadSchema', () => {\r\n    it('should validate a valid file upload', () => {\r\n      const mockFile = new File(['test content'], 'test.pdf', { type: 'application/pdf' });\r\n      const validUpload = {\r\n        name: 'test.pdf',\r\n        size: 1024,\r\n        type: 'application/pdf' as const,\r\n        content: mockFile\r\n      };\r\n\r\n      const result = fileUploadSchema.safeParse(validUpload);\r\n      expect(result.success).toBe(true);\r\n    });\r\n\r\n    it('should reject file with empty name', () => {\r\n      const mockFile = new File(['test content'], 'test.pdf', { type: 'application/pdf' });\r\n      const invalidUpload = {\r\n        name: '',\r\n        size: 1024,\r\n        type: 'application/pdf' as const,\r\n        content: mockFile\r\n      };\r\n\r\n      const result = fileUploadSchema.safeParse(invalidUpload);\r\n      expect(result.success).toBe(false);\r\n      if (!result.success) {\r\n        expect(result.error.issues[0].path).toContain('name');\r\n      }\r\n    });\r\n\r\n    it('should reject file with name too long', () => {\r\n      const mockFile = new File(['test content'], 'test.pdf', { type: 'application/pdf' });\r\n      const invalidUpload = {\r\n        name: 'a'.repeat(256),\r\n        size: 1024,\r\n        type: 'application/pdf' as const,\r\n        content: mockFile\r\n      };\r\n\r\n      const result = fileUploadSchema.safeParse(invalidUpload);\r\n      expect(result.success).toBe(false);\r\n      if (!result.success) {\r\n        expect(result.error.issues[0].path).toContain('name');\r\n      }\r\n    });\r\n\r\n    it('should reject file that is too large', () => {\r\n      const mockFile = new File(['test content'], 'test.pdf', { type: 'application/pdf' });\r\n      const invalidUpload = {\r\n        name: 'test.pdf',\r\n        size: 21 * 1024 * 1024, // 21MB\r\n        type: 'application/pdf' as const,\r\n        content: mockFile\r\n      };\r\n\r\n      const result = fileUploadSchema.safeParse(invalidUpload);\r\n      expect(result.success).toBe(false);\r\n      if (!result.success) {\r\n        expect(result.error.issues[0].path).toContain('size');\r\n      }\r\n    });\r\n\r\n    it('should reject unsupported file type', () => {\r\n      const mockFile = new File(['test content'], 'test.exe', { type: 'application/x-executable' });\r\n      const invalidUpload = {\r\n        name: 'test.exe',\r\n        size: 1024,\r\n        type: 'application/x-executable' as any,\r\n        content: mockFile\r\n      };\r\n\r\n      const result = fileUploadSchema.safeParse(invalidUpload);\r\n      expect(result.success).toBe(false);\r\n      if (!result.success) {\r\n        expect(result.error.issues[0].path).toContain('type');\r\n      }\r\n    });\r\n\r\n    it('should accept all supported file types', () => {\r\n      const supportedTypes = [\r\n        'application/pdf',\r\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\r\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\r\n        'text/plain',\r\n        'image/png',\r\n        'image/jpeg'\r\n      ];\r\n\r\n      supportedTypes.forEach(type => {\r\n        const mockFile = new File(['test content'], 'test.file', { type });\r\n        const validUpload = {\r\n          name: 'test.file',\r\n          size: 1024,\r\n          type: type as any,\r\n          content: mockFile\r\n        };\r\n\r\n        const result = fileUploadSchema.safeParse(validUpload);\r\n        expect(result.success).toBe(true);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('apiRequestSchema', () => {\r\n    it('should validate a valid API request', () => {\r\n      const validRequest = {\r\n        messages: [\r\n          {\r\n            content: 'Hello',\r\n            role: 'user' as const\r\n          },\r\n          {\r\n            content: 'Hi there!',\r\n            role: 'assistant' as const\r\n          }\r\n        ],\r\n        model: 'gpt-4',\r\n        temperature: 0.7,\r\n        maxTokens: 1000\r\n      };\r\n\r\n      const result = apiRequestSchema.safeParse(validRequest);\r\n      expect(result.success).toBe(true);\r\n    });\r\n\r\n    it('should validate minimal API request', () => {\r\n      const minimalRequest = {\r\n        messages: [\r\n          {\r\n            content: 'Hello',\r\n            role: 'user' as const\r\n          }\r\n        ]\r\n      };\r\n\r\n      const result = apiRequestSchema.safeParse(minimalRequest);\r\n      expect(result.success).toBe(true);\r\n    });\r\n\r\n    it('should reject empty messages array', () => {\r\n      const invalidRequest = {\r\n        messages: []\r\n      };\r\n\r\n      const result = apiRequestSchema.safeParse(invalidRequest);\r\n      expect(result.success).toBe(false);\r\n      if (!result.success) {\r\n        expect(result.error.issues[0].path).toContain('messages');\r\n      }\r\n    });\r\n\r\n    it('should reject invalid temperature', () => {\r\n      const invalidRequest = {\r\n        messages: [\r\n          {\r\n            content: 'Hello',\r\n            role: 'user' as const\r\n          }\r\n        ],\r\n        temperature: 3.0 // Too high\r\n      };\r\n\r\n      const result = apiRequestSchema.safeParse(invalidRequest);\r\n      expect(result.success).toBe(false);\r\n      if (!result.success) {\r\n        expect(result.error.issues[0].path).toContain('temperature');\r\n      }\r\n    });\r\n\r\n    it('should reject negative temperature', () => {\r\n      const invalidRequest = {\r\n        messages: [\r\n          {\r\n            content: 'Hello',\r\n            role: 'user' as const\r\n          }\r\n        ],\r\n        temperature: -0.1\r\n      };\r\n\r\n      const result = apiRequestSchema.safeParse(invalidRequest);\r\n      expect(result.success).toBe(false);\r\n      if (!result.success) {\r\n        expect(result.error.issues[0].path).toContain('temperature');\r\n      }\r\n    });\r\n\r\n    it('should reject invalid maxTokens', () => {\r\n      const invalidRequest = {\r\n        messages: [\r\n          {\r\n            content: 'Hello',\r\n            role: 'user' as const\r\n          }\r\n        ],\r\n        maxTokens: 0 // Too low\r\n      };\r\n\r\n      const result = apiRequestSchema.safeParse(invalidRequest);\r\n      expect(result.success).toBe(false);\r\n      if (!result.success) {\r\n        expect(result.error.issues[0].path).toContain('maxTokens');\r\n      }\r\n    });\r\n\r\n    it('should reject maxTokens that is too high', () => {\r\n      const invalidRequest = {\r\n        messages: [\r\n          {\r\n            content: 'Hello',\r\n            role: 'user' as const\r\n          }\r\n        ],\r\n        maxTokens: 100001 // Too high\r\n      };\r\n\r\n      const result = apiRequestSchema.safeParse(invalidRequest);\r\n      expect(result.success).toBe(false);\r\n      if (!result.success) {\r\n        expect(result.error.issues[0].path).toContain('maxTokens');\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('sanitizeInput', () => {\r\n    it('should remove HTML tags', () => {\r\n      const input = '<script>alert(\"xss\")</script>Hello world';\r\n      const result = sanitizeInput(input);\r\n      expect(result).toBe('scriptalert(\"xss\")/scriptHello world');\r\n    });\r\n\r\n    it('should remove javascript protocol', () => {\r\n      const input = 'javascript:alert(\"xss\")';\r\n      const result = sanitizeInput(input);\r\n      expect(result).toBe('alert(\"xss\")');\r\n    });\r\n\r\n    it('should remove event handlers', () => {\r\n      const input = 'onclick=alert(\"xss\") onload=alert(\"xss\")';\r\n      const result = sanitizeInput(input);\r\n      expect(result).toBe('alert(\"xss\") alert(\"xss\")');\r\n    });\r\n\r\n    it('should trim whitespace', () => {\r\n      const input = '  Hello world  ';\r\n      const result = sanitizeInput(input);\r\n      expect(result).toBe('Hello world');\r\n    });\r\n\r\n    it('should handle empty string', () => {\r\n      const input = '';\r\n      const result = sanitizeInput(input);\r\n      expect(result).toBe('');\r\n    });\r\n\r\n    it('should handle string with only whitespace', () => {\r\n      const input = '   \\n\\t  ';\r\n      const result = sanitizeInput(input);\r\n      expect(result).toBe('');\r\n    });\r\n\r\n    it('should preserve normal text', () => {\r\n      const input = 'This is normal text with numbers 123 and symbols @#$%';\r\n      const result = sanitizeInput(input);\r\n      expect(result).toBe('This is normal text with numbers 123 and symbols @#$%');\r\n    });\r\n\r\n    it('should handle complex XSS attempts', () => {\r\n      const input = '<img src=\"x\" onerror=\"alert(\\'xss\\')\">javascript:alert(\"xss\")<script>alert(\"xss\")</script>';\r\n      const result = sanitizeInput(input);\r\n      expect(result).toBe('img src=\"x\" onerror=\"alert(\\'xss\\')\"alert(\"xss\")scriptalert(\"xss\")/script');\r\n    });\r\n  });\r\n});\r\n"],"version":3}