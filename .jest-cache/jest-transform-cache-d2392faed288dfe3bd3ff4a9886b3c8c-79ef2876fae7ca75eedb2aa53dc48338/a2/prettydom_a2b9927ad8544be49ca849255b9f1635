52443444329f0c9c8341a4a7982213de
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logDOM = void 0;
exports.prettyDOM = prettyDOM;
exports.prettyFormat = void 0;
var prettyFormat = _interopRequireWildcard(require("pretty-format"));
exports.prettyFormat = prettyFormat;
var _DOMElementFilter = _interopRequireDefault(require("./DOMElementFilter"));
var _getUserCodeFrame = require("./get-user-code-frame");
var _helpers = require("./helpers");
var _config = require("./config");
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function (e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != typeof e && "function" != typeof e) return {
    default: e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
const shouldHighlight = () => {
  let colors;
  try {
    var _process;
    colors = JSON.parse((_process = process) == null || (_process = _process.env) == null ? void 0 : _process.COLORS);
  } catch (e) {
    // If this throws, process?.env?.COLORS wasn't parsable. Since we only
    // care about `true` or `false`, we can safely ignore the error.
  }
  if (typeof colors === 'boolean') {
    // If `colors` is set explicitly (both `true` and `false`), use that value.
    return colors;
  } else {
    // If `colors` is not set, colorize if we're in node.
    return typeof process !== 'undefined' && process.versions !== undefined && process.versions.node !== undefined;
  }
};
const {
  DOMCollection
} = prettyFormat.plugins;

// https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType#node_type_constants
const ELEMENT_NODE = 1;
const COMMENT_NODE = 8;

// https://github.com/facebook/jest/blob/615084195ae1ae61ddd56162c62bbdda17587569/packages/pretty-format/src/plugins/DOMElement.ts#L50
function filterCommentsAndDefaultIgnoreTagsTags(value) {
  return value.nodeType !== COMMENT_NODE && (value.nodeType !== ELEMENT_NODE || !value.matches((0, _config.getConfig)().defaultIgnore));
}
function prettyDOM(dom, maxLength, options = {}) {
  if (!dom) {
    dom = (0, _helpers.getDocument)().body;
  }
  if (typeof maxLength !== 'number') {
    maxLength = typeof process !== 'undefined' && process.env.DEBUG_PRINT_LIMIT || 7000;
  }
  if (maxLength === 0) {
    return '';
  }
  if (dom.documentElement) {
    dom = dom.documentElement;
  }
  let domTypeName = typeof dom;
  if (domTypeName === 'object') {
    domTypeName = dom.constructor.name;
  } else {
    // To don't fall with `in` operator
    dom = {};
  }
  if (!('outerHTML' in dom)) {
    throw new TypeError(`Expected an element or document but got ${domTypeName}`);
  }
  const {
    filterNode = filterCommentsAndDefaultIgnoreTagsTags,
    ...prettyFormatOptions
  } = options;
  const debugContent = prettyFormat.format(dom, {
    plugins: [(0, _DOMElementFilter.default)(filterNode), DOMCollection],
    printFunctionName: false,
    highlight: shouldHighlight(),
    ...prettyFormatOptions
  });
  return maxLength !== undefined && dom.outerHTML.length > maxLength ? `${debugContent.slice(0, maxLength)}...` : debugContent;
}
const logDOM = (...args) => {
  const userCodeFrame = (0, _getUserCodeFrame.getUserCodeFrame)();
  if (userCodeFrame) {
    console.log(`${prettyDOM(...args)}\n\n${userCodeFrame}`);
  } else {
    console.log(prettyDOM(...args));
  }
};
exports.logDOM = logDOM;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibG9nRE9NIiwicHJldHR5RE9NIiwicHJldHR5Rm9ybWF0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfRE9NRWxlbWVudEZpbHRlciIsIl9nZXRVc2VyQ29kZUZyYW1lIiwiX2hlbHBlcnMiLCJfY29uZmlnIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiZSIsIldlYWtNYXAiLCJyIiwidCIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiaGFzIiwiZ2V0IiwibiIsIl9fcHJvdG9fXyIsImEiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsInNob3VsZEhpZ2hsaWdodCIsImNvbG9ycyIsIl9wcm9jZXNzIiwiSlNPTiIsInBhcnNlIiwicHJvY2VzcyIsImVudiIsIkNPTE9SUyIsInZlcnNpb25zIiwidW5kZWZpbmVkIiwibm9kZSIsIkRPTUNvbGxlY3Rpb24iLCJwbHVnaW5zIiwiRUxFTUVOVF9OT0RFIiwiQ09NTUVOVF9OT0RFIiwiZmlsdGVyQ29tbWVudHNBbmREZWZhdWx0SWdub3JlVGFnc1RhZ3MiLCJub2RlVHlwZSIsIm1hdGNoZXMiLCJnZXRDb25maWciLCJkZWZhdWx0SWdub3JlIiwiZG9tIiwibWF4TGVuZ3RoIiwib3B0aW9ucyIsImdldERvY3VtZW50IiwiYm9keSIsIkRFQlVHX1BSSU5UX0xJTUlUIiwiZG9jdW1lbnRFbGVtZW50IiwiZG9tVHlwZU5hbWUiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJUeXBlRXJyb3IiLCJmaWx0ZXJOb2RlIiwicHJldHR5Rm9ybWF0T3B0aW9ucyIsImRlYnVnQ29udGVudCIsImZvcm1hdCIsInByaW50RnVuY3Rpb25OYW1lIiwiaGlnaGxpZ2h0Iiwib3V0ZXJIVE1MIiwibGVuZ3RoIiwic2xpY2UiLCJhcmdzIiwidXNlckNvZGVGcmFtZSIsImdldFVzZXJDb2RlRnJhbWUiLCJjb25zb2xlIiwibG9nIl0sInNvdXJjZXMiOlsicHJldHR5LWRvbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5sb2dET00gPSB2b2lkIDA7XG5leHBvcnRzLnByZXR0eURPTSA9IHByZXR0eURPTTtcbmV4cG9ydHMucHJldHR5Rm9ybWF0ID0gdm9pZCAwO1xudmFyIHByZXR0eUZvcm1hdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJwcmV0dHktZm9ybWF0XCIpKTtcbmV4cG9ydHMucHJldHR5Rm9ybWF0ID0gcHJldHR5Rm9ybWF0O1xudmFyIF9ET01FbGVtZW50RmlsdGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9ET01FbGVtZW50RmlsdGVyXCIpKTtcbnZhciBfZ2V0VXNlckNvZGVGcmFtZSA9IHJlcXVpcmUoXCIuL2dldC11c2VyLWNvZGUtZnJhbWVcIik7XG52YXIgX2hlbHBlcnMgPSByZXF1aXJlKFwiLi9oZWxwZXJzXCIpO1xudmFyIF9jb25maWcgPSByZXF1aXJlKFwiLi9jb25maWdcIik7XG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoZSkgeyBpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiBXZWFrTWFwKSByZXR1cm4gbnVsbDsgdmFyIHIgPSBuZXcgV2Vha01hcCgpLCB0ID0gbmV3IFdlYWtNYXAoKTsgcmV0dXJuIChfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiAoZSkgeyByZXR1cm4gZSA/IHQgOiByOyB9KShlKTsgfVxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoZSwgcikgeyBpZiAoIXIgJiYgZSAmJiBlLl9fZXNNb2R1bGUpIHJldHVybiBlOyBpZiAobnVsbCA9PT0gZSB8fCBcIm9iamVjdFwiICE9IHR5cGVvZiBlICYmIFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSkgcmV0dXJuIHsgZGVmYXVsdDogZSB9OyB2YXIgdCA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShyKTsgaWYgKHQgJiYgdC5oYXMoZSkpIHJldHVybiB0LmdldChlKTsgdmFyIG4gPSB7IF9fcHJvdG9fXzogbnVsbCB9LCBhID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIHUgaW4gZSkgaWYgKFwiZGVmYXVsdFwiICE9PSB1ICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLCB1KSkgeyB2YXIgaSA9IGEgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIHUpIDogbnVsbDsgaSAmJiAoaS5nZXQgfHwgaS5zZXQpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sIHUsIGkpIDogblt1XSA9IGVbdV07IH0gcmV0dXJuIG4uZGVmYXVsdCA9IGUsIHQgJiYgdC5zZXQoZSwgbiksIG47IH1cbmNvbnN0IHNob3VsZEhpZ2hsaWdodCA9ICgpID0+IHtcbiAgbGV0IGNvbG9ycztcbiAgdHJ5IHtcbiAgICB2YXIgX3Byb2Nlc3M7XG4gICAgY29sb3JzID0gSlNPTi5wYXJzZSgoX3Byb2Nlc3MgPSBwcm9jZXNzKSA9PSBudWxsIHx8IChfcHJvY2VzcyA9IF9wcm9jZXNzLmVudikgPT0gbnVsbCA/IHZvaWQgMCA6IF9wcm9jZXNzLkNPTE9SUyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJZiB0aGlzIHRocm93cywgcHJvY2Vzcz8uZW52Py5DT0xPUlMgd2Fzbid0IHBhcnNhYmxlLiBTaW5jZSB3ZSBvbmx5XG4gICAgLy8gY2FyZSBhYm91dCBgdHJ1ZWAgb3IgYGZhbHNlYCwgd2UgY2FuIHNhZmVseSBpZ25vcmUgdGhlIGVycm9yLlxuICB9XG4gIGlmICh0eXBlb2YgY29sb3JzID09PSAnYm9vbGVhbicpIHtcbiAgICAvLyBJZiBgY29sb3JzYCBpcyBzZXQgZXhwbGljaXRseSAoYm90aCBgdHJ1ZWAgYW5kIGBmYWxzZWApLCB1c2UgdGhhdCB2YWx1ZS5cbiAgICByZXR1cm4gY29sb3JzO1xuICB9IGVsc2Uge1xuICAgIC8vIElmIGBjb2xvcnNgIGlzIG5vdCBzZXQsIGNvbG9yaXplIGlmIHdlJ3JlIGluIG5vZGUuXG4gICAgcmV0dXJuIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBwcm9jZXNzLnZlcnNpb25zICE9PSB1bmRlZmluZWQgJiYgcHJvY2Vzcy52ZXJzaW9ucy5ub2RlICE9PSB1bmRlZmluZWQ7XG4gIH1cbn07XG5jb25zdCB7XG4gIERPTUNvbGxlY3Rpb25cbn0gPSBwcmV0dHlGb3JtYXQucGx1Z2lucztcblxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL05vZGUvbm9kZVR5cGUjbm9kZV90eXBlX2NvbnN0YW50c1xuY29uc3QgRUxFTUVOVF9OT0RFID0gMTtcbmNvbnN0IENPTU1FTlRfTk9ERSA9IDg7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9qZXN0L2Jsb2IvNjE1MDg0MTk1YWUxYWU2MWRkZDU2MTYyYzYyYmJkZGExNzU4NzU2OS9wYWNrYWdlcy9wcmV0dHktZm9ybWF0L3NyYy9wbHVnaW5zL0RPTUVsZW1lbnQudHMjTDUwXG5mdW5jdGlvbiBmaWx0ZXJDb21tZW50c0FuZERlZmF1bHRJZ25vcmVUYWdzVGFncyh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUubm9kZVR5cGUgIT09IENPTU1FTlRfTk9ERSAmJiAodmFsdWUubm9kZVR5cGUgIT09IEVMRU1FTlRfTk9ERSB8fCAhdmFsdWUubWF0Y2hlcygoMCwgX2NvbmZpZy5nZXRDb25maWcpKCkuZGVmYXVsdElnbm9yZSkpO1xufVxuZnVuY3Rpb24gcHJldHR5RE9NKGRvbSwgbWF4TGVuZ3RoLCBvcHRpb25zID0ge30pIHtcbiAgaWYgKCFkb20pIHtcbiAgICBkb20gPSAoMCwgX2hlbHBlcnMuZ2V0RG9jdW1lbnQpKCkuYm9keTtcbiAgfVxuICBpZiAodHlwZW9mIG1heExlbmd0aCAhPT0gJ251bWJlcicpIHtcbiAgICBtYXhMZW5ndGggPSB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy5lbnYuREVCVUdfUFJJTlRfTElNSVQgfHwgNzAwMDtcbiAgfVxuICBpZiAobWF4TGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIGlmIChkb20uZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgZG9tID0gZG9tLmRvY3VtZW50RWxlbWVudDtcbiAgfVxuICBsZXQgZG9tVHlwZU5hbWUgPSB0eXBlb2YgZG9tO1xuICBpZiAoZG9tVHlwZU5hbWUgPT09ICdvYmplY3QnKSB7XG4gICAgZG9tVHlwZU5hbWUgPSBkb20uY29uc3RydWN0b3IubmFtZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBUbyBkb24ndCBmYWxsIHdpdGggYGluYCBvcGVyYXRvclxuICAgIGRvbSA9IHt9O1xuICB9XG4gIGlmICghKCdvdXRlckhUTUwnIGluIGRvbSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBFeHBlY3RlZCBhbiBlbGVtZW50IG9yIGRvY3VtZW50IGJ1dCBnb3QgJHtkb21UeXBlTmFtZX1gKTtcbiAgfVxuICBjb25zdCB7XG4gICAgZmlsdGVyTm9kZSA9IGZpbHRlckNvbW1lbnRzQW5kRGVmYXVsdElnbm9yZVRhZ3NUYWdzLFxuICAgIC4uLnByZXR0eUZvcm1hdE9wdGlvbnNcbiAgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IGRlYnVnQ29udGVudCA9IHByZXR0eUZvcm1hdC5mb3JtYXQoZG9tLCB7XG4gICAgcGx1Z2luczogWygwLCBfRE9NRWxlbWVudEZpbHRlci5kZWZhdWx0KShmaWx0ZXJOb2RlKSwgRE9NQ29sbGVjdGlvbl0sXG4gICAgcHJpbnRGdW5jdGlvbk5hbWU6IGZhbHNlLFxuICAgIGhpZ2hsaWdodDogc2hvdWxkSGlnaGxpZ2h0KCksXG4gICAgLi4ucHJldHR5Rm9ybWF0T3B0aW9uc1xuICB9KTtcbiAgcmV0dXJuIG1heExlbmd0aCAhPT0gdW5kZWZpbmVkICYmIGRvbS5vdXRlckhUTUwubGVuZ3RoID4gbWF4TGVuZ3RoID8gYCR7ZGVidWdDb250ZW50LnNsaWNlKDAsIG1heExlbmd0aCl9Li4uYCA6IGRlYnVnQ29udGVudDtcbn1cbmNvbnN0IGxvZ0RPTSA9ICguLi5hcmdzKSA9PiB7XG4gIGNvbnN0IHVzZXJDb2RlRnJhbWUgPSAoMCwgX2dldFVzZXJDb2RlRnJhbWUuZ2V0VXNlckNvZGVGcmFtZSkoKTtcbiAgaWYgKHVzZXJDb2RlRnJhbWUpIHtcbiAgICBjb25zb2xlLmxvZyhgJHtwcmV0dHlET00oLi4uYXJncyl9XFxuXFxuJHt1c2VyQ29kZUZyYW1lfWApO1xuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUubG9nKHByZXR0eURPTSguLi5hcmdzKSk7XG4gIH1cbn07XG5leHBvcnRzLmxvZ0RPTSA9IGxvZ0RPTTsiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVosSUFBSUEsc0JBQXNCLEdBQUdDLE9BQU8sQ0FBQyw4Q0FBOEMsQ0FBQztBQUNwRkMsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FBQztBQUNGRCxPQUFPLENBQUNFLE1BQU0sR0FBRyxLQUFLLENBQUM7QUFDdkJGLE9BQU8sQ0FBQ0csU0FBUyxHQUFHQSxTQUFTO0FBQzdCSCxPQUFPLENBQUNJLFlBQVksR0FBRyxLQUFLLENBQUM7QUFDN0IsSUFBSUEsWUFBWSxHQUFHQyx1QkFBdUIsQ0FBQ1IsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ3BFRyxP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QUNNLGVBQWUsRUFBRTtJQUN2Qk4sR0FBRyxHQUFHQSxHQUFHLENBQUNNLGVBQWU7RUFDM0I7RUFDQSxJQUFJQyxXQUFXLEdBQUcsT0FBT1AsR0FBRztFQUM1QixJQUFJTyxXQUFXLEtBQUssUUFBUSxFQUFFO0lBQzVCQSxXQUFXLEdBQUdQLEdBQUcsQ0FBQ1EsV0FBVyxDQUFDQyxJQUFJO0VBQ3BDLENBQUMsTUFBTTtJQUNMO0lBQ0FULEdBQUcsR0FBRyxDQUFDLENBQUM7RUFDVjtFQUNBLElBQUksRUFBRSxXQUFXLElBQUlBLEdBQUcsQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sSUFBSVUsU0FBUyxDQUFDLDJDQUEyQ0gsV0FBVyxFQUFFLENBQUM7RUFDL0U7RUFDQSxNQUFNO0lBQ0pJLFVBQVUsR0FBR2hCLHNDQUFzQztJQUNuRCxHQUFHaUI7RUFDTCxDQUFDLEdBQUdWLE9BQU87RUFDWCxNQUFNVyxZQUFZLEdBQUcxRCxZQUFZLENBQUMyRCxNQUFNLENBQUNkLEdBQUcsRUFBRTtJQUM1Q1IsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUVuQyxpQkFBaUIsQ0FBQ1UsT0FBTyxFQUFFNEMsVUFBVSxDQUFDLEVBQUVwQixhQUFhLENBQUM7SUFDcEV3QixpQkFBaUIsRUFBRSxLQUFLO0lBQ3hCQyxTQUFTLEVBQUVwQyxlQUFlLENBQUMsQ0FBQztJQUM1QixHQUFHZ0M7RUFDTCxDQUFDLENBQUM7RUFDRixPQUFPWCxTQUFTLEtBQUtaLFNBQVMsSUFBSVcsR0FBRyxDQUFDaUIsU0FBUyxDQUFDQyxNQUFNLEdBQUdqQixTQUFTLEdBQUcsR0FBR1ksWUFBWSxDQUFDTSxLQUFLLENBQUMsQ0FBQyxFQUFFbEIsU0FBUyxDQUFDLEtBQUssR0FBR1ksWUFBWTtBQUM5SDtBQUNBLE1BQU01RCxNQUFNLEdBQUdBLENBQUMsR0FBR21FLElBQUksS0FBSztFQUMxQixNQUFNQyxhQUFhLEdBQUcsQ0FBQyxDQUFDLEVBQUUvRCxpQkFBaUIsQ0FBQ2dFLGdCQUFnQixFQUFFLENBQUM7RUFDL0QsSUFBSUQsYUFBYSxFQUFFO0lBQ2pCRSxPQUFPLENBQUNDLEdBQUcsQ0FBQyxHQUFHdEUsU0FBUyxDQUFDLEdBQUdrRSxJQUFJLENBQUMsT0FBT0MsYUFBYSxFQUFFLENBQUM7RUFDMUQsQ0FBQyxNQUFNO0lBQ0xFLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDdEUsU0FBUyxDQUFDLEdBQUdrRSxJQUFJLENBQUMsQ0FBQztFQUNqQztBQUNGLENBQUM7QUFDRHJFLE9BQU8sQ0FBQ0UsTUFBTSxHQUFHQSxNQUFNIiwiaWdub3JlTGlzdCI6W119