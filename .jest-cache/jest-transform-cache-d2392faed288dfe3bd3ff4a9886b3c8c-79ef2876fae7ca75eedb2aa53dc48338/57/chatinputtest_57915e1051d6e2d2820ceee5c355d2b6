39eae7e6ab507bf036b57ecc67487d5a
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
const user_event_1 = __importDefault(require("@testing-library/user-event"));
require("@testing-library/jest-dom");
const chat_input_1 = require("../../src/components/ui/chat-input");
describe("ChatInput", () => {
    const mockOnSend = jest.fn();
    const mockOnStop = jest.fn();
    beforeEach(() => {
        jest.clearAllMocks();
    });
    it("renders chat input with correct placeholder", () => {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend }));
        const textarea = react_2.screen.getByRole("textbox");
        expect(textarea).toBeInTheDocument();
        expect(textarea).toHaveAttribute("placeholder", "Type your message... (Enter to send, Shift+Enter for new line)");
    });
    it("displays send button when not streaming", () => {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend, isStreaming: false }));
        const sendButton = react_2.screen.getByRole("button", { name: /send message/i });
        expect(sendButton).toBeInTheDocument();
        expect(sendButton).toHaveTextContent("Send");
    });
    it("displays stop button when streaming", () => {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend, onStop: mockOnStop, isStreaming: true }));
        const stopButton = react_2.screen.getByRole("button", { name: /stop streaming response/i });
        expect(stopButton).toBeInTheDocument();
        expect(stopButton).toHaveTextContent("Stop");
    });
    it("sends message on Enter key press", async () => {
        const user = user_event_1.default.setup();
        (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend }));
        const textarea = react_2.screen.getByRole("textbox");
        await user.type(textarea, "Test message");
        await user.keyboard("{Enter}");
        expect(mockOnSend).toHaveBeenCalledWith("Test message");
    });
    it("adds new line on Shift+Enter", async () => {
        const user = user_event_1.default.setup();
        (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend }));
        const textarea = react_2.screen.getByRole("textbox");
        await user.type(textarea, "Line 1");
        await user.keyboard("{Shift>}{Enter}{/Shift}");
        await user.type(textarea, "Line 2");
        expect(textarea).toHaveValue("Line 1\nLine 2");
        expect(mockOnSend).not.toHaveBeenCalled();
    });
    it("sends message on button click", async () => {
        const user = user_event_1.default.setup();
        (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend }));
        const textarea = react_2.screen.getByRole("textbox");
        const sendButton = react_2.screen.getByRole("button", { name: /send message/i });
        await user.type(textarea, "Test message");
        await user.click(sendButton);
        expect(mockOnSend).toHaveBeenCalledWith("Test message");
    });
    it("clears input after sending message", async () => {
        const user = user_event_1.default.setup();
        (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend }));
        const textarea = react_2.screen.getByRole("textbox");
        await user.type(textarea, "Test message");
        await user.keyboard("{Enter}");
        expect(textarea).toHaveValue("");
    });
    it("disables send button for empty input", () => {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend }));
        const sendButton = react_2.screen.getByRole("button", { name: /send message/i });
        expect(sendButton).toBeDisabled();
    });
    it("disables send button for whitespace-only input", async () => {
        const user = user_event_1.default.setup();
        (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend }));
        const textarea = react_2.screen.getByRole("textbox");
        const sendButton = react_2.screen.getByRole("button", { name: /send message/i });
        await user.type(textarea, "   ");
        expect(sendButton).toBeDisabled();
    });
    it("enables send button for valid input", async () => {
        const user = user_event_1.default.setup();
        (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend }));
        const textarea = react_2.screen.getByRole("textbox");
        const sendButton = react_2.screen.getByRole("button", { name: /send message/i });
        await user.type(textarea, "Valid message");
        expect(sendButton).not.toBeDisabled();
    });
    it("calls onStop when stop button is clicked", async () => {
        const user = user_event_1.default.setup();
        (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend, onStop: mockOnStop, isStreaming: true }));
        const stopButton = react_2.screen.getByRole("button", { name: /stop streaming response/i });
        await user.click(stopButton);
        expect(mockOnStop).toHaveBeenCalled();
    });
    it("auto-resizes textarea as content grows", async () => {
        const user = user_event_1.default.setup();
        (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend, maxLines: 5 }));
        const textarea = react_2.screen.getByRole("textbox");
        const initialHeight = textarea.getBoundingClientRect().height;
        // Add multiple lines
        await user.type(textarea, "Line 1\nLine 2\nLine 3\nLine 4");
        // Wait for height adjustment
        await (0, react_2.waitFor)(() => {
            const newHeight = textarea.getBoundingClientRect().height;
            expect(newHeight).toBeGreaterThan(initialHeight);
        });
    });
    it("does not send empty messages", async () => {
        const user = user_event_1.default.setup();
        (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend }));
        const textarea = react_2.screen.getByRole("textbox");
        await user.keyboard("{Enter}");
        expect(mockOnSend).not.toHaveBeenCalled();
    });
    it("trims whitespace from messages before sending", async () => {
        const user = user_event_1.default.setup();
        (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend }));
        const textarea = react_2.screen.getByRole("textbox");
        await user.type(textarea, "  Test message  ");
        await user.keyboard("{Enter}");
        expect(mockOnSend).toHaveBeenCalledWith("Test message");
    });
    it("prevents sending when streaming", async () => {
        const user = user_event_1.default.setup();
        (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend, isStreaming: true }));
        const textarea = react_2.screen.getByRole("textbox");
        await user.type(textarea, "Test message");
        await user.keyboard("{Enter}");
        expect(mockOnSend).not.toHaveBeenCalled();
    });
    it("maintains focus after sending message", async () => {
        const user = user_event_1.default.setup();
        (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend }));
        const textarea = react_2.screen.getByRole("textbox");
        await user.type(textarea, "Test message");
        await user.keyboard("{Enter}");
        await (0, react_2.waitFor)(() => {
            expect(textarea).toHaveFocus();
        });
    });
    // New tests for expandable input field functionality
    describe("Expandable Input Field", () => {
        beforeEach(() => {
            // Mock getBoundingClientRect for consistent height calculations
            Object.defineProperty(HTMLElement.prototype, 'getBoundingClientRect', {
                configurable: true,
                value: jest.fn(() => ({
                    width: 400,
                    height: 40, // Base height for single line
                    top: 0,
                    left: 0,
                    bottom: 40,
                    right: 400,
                })),
            });
            // Mock getComputedStyle for line height
            Object.defineProperty(window, 'getComputedStyle', {
                value: jest.fn(() => ({
                    lineHeight: '20px',
                    fontSize: '14px',
                    paddingTop: '8px',
                    paddingBottom: '8px',
                })),
            });
        });
        it("starts with single line height (approximately 40px)", () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend }));
            const textarea = react_2.screen.getByRole("textbox");
            // Check initial height
            expect(textarea.style.height).toBe("40px");
        });
        it("expands height when text wraps to new line", async () => {
            const user = user_event_1.default.setup();
            (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend }));
            const textarea = react_2.screen.getByRole("textbox");
            // Mock scrollHeight to simulate text wrapping
            Object.defineProperty(textarea, 'scrollHeight', {
                configurable: true,
                value: 60, // Height for 2 lines
            });
            await user.type(textarea, "This is a very long line that will wrap to multiple lines in the textarea");
            await (0, react_2.waitFor)(() => {
                expect(textarea.style.height).toBe("60px");
            });
        });
        it("grows by one line height for each text line up to 3 lines", async () => {
            const user = user_event_1.default.setup();
            (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend }));
            const textarea = react_2.screen.getByRole("textbox");
            // Simulate 3 lines of text
            Object.defineProperty(textarea, 'scrollHeight', {
                configurable: true,
                value: 80, // Height for 3 lines (40 base + 40 for 2 additional lines)
            });
            await user.type(textarea, "Line 1\nLine 2\nLine 3");
            await (0, react_2.waitFor)(() => {
                expect(textarea.style.height).toBe("80px");
            });
        });
        it("displays scrollbar after 10 lines maximum", async () => {
            const user = user_event_1.default.setup();
            (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend, maxLines: 10 }));
            const textarea = react_2.screen.getByRole("textbox");
            // Simulate 15 lines of text (exceeds maximum)
            Object.defineProperty(textarea, 'scrollHeight', {
                configurable: true,
                value: 320, // Height for 15 lines
            });
            const longText = Array(15).fill("Line").map((line, i) => `${line} ${i + 1}`).join("\n");
            await user.type(textarea, longText);
            await (0, react_2.waitFor)(() => {
                // Should be capped at max height (10 lines * 20px line height + padding = 240px)
                expect(textarea.style.height).toBe("240px");
                expect(textarea.style.overflowY).toBe("auto");
            });
        });
        it("contracts when text is deleted to match content", async () => {
            const user = user_event_1.default.setup();
            (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend }));
            const textarea = react_2.screen.getByRole("textbox");
            // First, expand to 3 lines
            Object.defineProperty(textarea, 'scrollHeight', {
                configurable: true,
                value: 80,
            });
            await user.type(textarea, "Line 1\nLine 2\nLine 3");
            await (0, react_2.waitFor)(() => {
                expect(textarea.style.height).toBe("80px");
            });
            // Then contract to 1 line
            Object.defineProperty(textarea, 'scrollHeight', {
                configurable: true,
                value: 40,
            });
            await user.clear(textarea);
            await user.type(textarea, "Short");
            await (0, react_2.waitFor)(() => {
                expect(textarea.style.height).toBe("40px");
            });
        });
        it("maintains smooth expansion animation with 200ms transition", () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend }));
            const textarea = react_2.screen.getByRole("textbox");
            // Check for transition CSS property
            const computedStyle = getComputedStyle(textarea);
            expect(computedStyle.transition).toContain("height");
            expect(computedStyle.transition).toContain("200ms");
        });
        it("preserves expansion state during composition", async () => {
            const user = user_event_1.default.setup();
            (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend }));
            const textarea = react_2.screen.getByRole("textbox");
            // Expand to multiple lines
            Object.defineProperty(textarea, 'scrollHeight', {
                configurable: true,
                value: 80,
            });
            await user.type(textarea, "Line 1\nLine 2\nLine 3");
            await (0, react_2.waitFor)(() => {
                expect(textarea.style.height).toBe("80px");
            });
            // Continue typing without losing height
            await user.type(textarea, "\nLine 4");
            Object.defineProperty(textarea, 'scrollHeight', {
                configurable: true,
                value: 100,
            });
            await (0, react_2.waitFor)(() => {
                expect(textarea.style.height).toBe("100px");
            });
        });
        it("resets to single line after message sent", async () => {
            const user = user_event_1.default.setup();
            (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend }));
            const textarea = react_2.screen.getByRole("textbox");
            // Expand to multiple lines
            Object.defineProperty(textarea, 'scrollHeight', {
                configurable: true,
                value: 80,
            });
            await user.type(textarea, "Line 1\nLine 2\nLine 3");
            await (0, react_2.waitFor)(() => {
                expect(textarea.style.height).toBe("80px");
            });
            // Send message
            Object.defineProperty(textarea, 'scrollHeight', {
                configurable: true,
                value: 40, // Reset to single line height
            });
            await user.keyboard("{Enter}");
            await (0, react_2.waitFor)(() => {
                expect(textarea.style.height).toBe("40px");
                expect(textarea).toHaveValue("");
            });
        });
    });
    // Edge case tests
    describe("Edge Cases", () => {
        beforeEach(() => {
            // Setup mocks for edge case testing
            Object.defineProperty(HTMLElement.prototype, 'getBoundingClientRect', {
                configurable: true,
                value: jest.fn(() => ({
                    width: 400,
                    height: 40,
                    top: 0,
                    left: 0,
                    bottom: 40,
                    right: 400,
                })),
            });
            Object.defineProperty(window, 'getComputedStyle', {
                value: jest.fn(() => ({
                    lineHeight: '20px',
                    fontSize: '14px',
                    paddingTop: '8px',
                    paddingBottom: '8px',
                })),
            });
        });
        it("handles pasting 20 lines - verifies max 10 lines visible with scroll", async () => {
            const user = user_event_1.default.setup();
            (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend, maxLines: 10 }));
            const textarea = react_2.screen.getByRole("textbox");
            const twentyLines = Array(20).fill("Long line of text").map((line, i) => `${line} ${i + 1}`).join("\n");
            // Mock scrollHeight for 20 lines
            Object.defineProperty(textarea, 'scrollHeight', {
                configurable: true,
                value: 420, // 20 lines * 20px + padding
            });
            await user.click(textarea);
            await user.paste(twentyLines);
            await (0, react_2.waitFor)(() => {
                // Should be capped at 10 lines (240px)
                expect(textarea.style.height).toBe("240px");
                expect(textarea.scrollTop).toBeGreaterThanOrEqual(0);
            });
        });
        it("handles rapid expand/contract without flickering", async () => {
            const user = user_event_1.default.setup();
            (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend }));
            const textarea = react_2.screen.getByRole("textbox");
            // Rapid typing and deleting
            for (let i = 0; i < 5; i++) {
                Object.defineProperty(textarea, 'scrollHeight', {
                    configurable: true,
                    value: 60 + (i * 20),
                });
                await user.type(textarea, `\nLine ${i + 2}`);
                // Verify height increases
                await (0, react_2.waitFor)(() => {
                    expect(parseInt(textarea.style.height)).toBeGreaterThan(40);
                });
            }
            // Rapid deletion
            for (let i = 4; i >= 0; i--) {
                await user.keyboard("{Backspace}".repeat(10));
                Object.defineProperty(textarea, 'scrollHeight', {
                    configurable: true,
                    value: 60 + (i * 20),
                });
            }
            // Should handle rapid changes smoothly
            expect(textarea.style.transition).toContain("height");
        });
        it("handles wide characters causing wrap", async () => {
            const user = user_event_1.default.setup();
            (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend }));
            const textarea = react_2.screen.getByRole("textbox");
            // Wide characters and emojis
            const wideText = "🚀📊💼🎯⚡🔥💡🎨🌟✨" + "很长的中文字符串会导致文本换行";
            Object.defineProperty(textarea, 'scrollHeight', {
                configurable: true,
                value: 80, // Simulates wrapping
            });
            await user.type(textarea, wideText);
            await (0, react_2.waitFor)(() => {
                expect(textarea.style.height).toBe("80px");
            });
        });
        it("handles window resize during typing", async () => {
            const user = user_event_1.default.setup();
            (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend }));
            const textarea = react_2.screen.getByRole("textbox");
            await user.type(textarea, "Some text that might reflow");
            // Simulate window resize
            Object.defineProperty(textarea, 'scrollHeight', {
                configurable: true,
                value: 60,
            });
            // Trigger resize event
            (0, react_2.fireEvent)(window, new Event('resize'));
            await (0, react_2.waitFor)(() => {
                expect(textarea.style.height).toBe("60px");
            });
        });
    });
    // Negative test cases
    describe("Negative Tests", () => {
        beforeEach(() => {
            Object.defineProperty(HTMLElement.prototype, 'getBoundingClientRect', {
                configurable: true,
                value: jest.fn(() => ({
                    width: 400,
                    height: 40,
                    top: 0,
                    left: 0,
                    bottom: 40,
                    right: 400,
                })),
            });
            Object.defineProperty(window, 'getComputedStyle', {
                value: jest.fn(() => ({
                    lineHeight: '20px',
                    fontSize: '14px',
                    paddingTop: '8px',
                    paddingBottom: '8px',
                })),
            });
        });
        it("prevents expansion beyond maximum limit", async () => {
            const user = user_event_1.default.setup();
            (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend, maxLines: 10 }));
            const textarea = react_2.screen.getByRole("textbox");
            // Try to force expansion beyond 10 lines
            Object.defineProperty(textarea, 'scrollHeight', {
                configurable: true,
                value: 500, // Much larger than 10 lines
            });
            const manyLines = Array(15).fill("Line").map((line, i) => `${line} ${i + 1}`).join("\n");
            await user.type(textarea, manyLines);
            await (0, react_2.waitFor)(() => {
                // Should be capped at max height (10 lines * 20px + padding = 240px)
                expect(parseInt(textarea.style.height)).toBeLessThanOrEqual(240);
            });
        });
        it("maintains minimum height with negative or zero values", () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend }));
            const textarea = react_2.screen.getByRole("textbox");
            // Mock negative scrollHeight (shouldn't happen in real scenarios)
            Object.defineProperty(textarea, 'scrollHeight', {
                configurable: true,
                value: -10,
            });
            // Trigger height adjustment
            react_2.fireEvent.change(textarea, { target: { value: "" } });
            // Should maintain minimum height
            expect(parseInt(textarea.style.height)).toBeGreaterThanOrEqual(40);
        });
        it("handles invalid maxLines prop gracefully", () => {
            // Test with negative maxLines
            (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend, maxLines: -5 }));
            const textarea = react_2.screen.getByRole("textbox");
            // Should default to a reasonable minimum
            expect(textarea).toBeInTheDocument();
            // Test with zero maxLines
            (0, react_2.render)((0, jsx_runtime_1.jsx)(chat_input_1.ChatInput, { onSend: mockOnSend, maxLines: 0 }));
            const textarea2 = react_2.screen.getAllByRole("textbox")[1];
            expect(textarea2).toBeInTheDocument();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,