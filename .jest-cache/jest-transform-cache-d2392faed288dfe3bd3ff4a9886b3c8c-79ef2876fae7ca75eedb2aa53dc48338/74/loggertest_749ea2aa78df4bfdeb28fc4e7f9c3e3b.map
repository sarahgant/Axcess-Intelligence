{"file":"C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\tests\\unit\\logger.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\tests\\unit\\logger.test.ts"],"sourcesContent":["import { logger, LogLevel } from '../../src/core/logging/logger';\r\n\r\n// Mock console methods\r\nconst originalConsole = {\r\n  log: console.log,\r\n  error: console.error,\r\n  warn: console.warn\r\n};\r\n\r\nbeforeAll(() => {\r\n  // Mock console methods\r\n  console.log = jest.fn();\r\n  console.error = jest.fn();\r\n  console.warn = jest.fn();\r\n});\r\n\r\nafterAll(() => {\r\n  // Restore console methods\r\n  console.log = originalConsole.log;\r\n  console.error = originalConsole.error;\r\n  console.warn = originalConsole.warn;\r\n});\r\n\r\nbeforeEach(() => {\r\n  jest.clearAllMocks();\r\n  // Clear log buffer\r\n  if (typeof window !== 'undefined') {\r\n    window.__logBuffer = [];\r\n  }\r\n});\r\n\r\ndescribe('Logger', () => {\r\n  describe('Log Buffer', () => {\r\n    it('should store logs in buffer', () => {\r\n      logger.info('Test message', { test: 'data' });\r\n      \r\n      const buffer = logger.getLogBuffer();\r\n      expect(buffer).toHaveLength(1);\r\n      expect(buffer[0].message).toBe('Test message');\r\n      expect(buffer[0].meta).toEqual({ test: 'data' });\r\n    });\r\n\r\n    it('should limit buffer to 100 entries', () => {\r\n      // Add 101 logs\r\n      for (let i = 0; i < 101; i++) {\r\n        logger.info(`Message ${i}`);\r\n      }\r\n      \r\n      const buffer = logger.getLogBuffer();\r\n      expect(buffer).toHaveLength(100);\r\n      expect(buffer[0].message).toBe('Message 1'); // First message should be removed\r\n      expect(buffer[99].message).toBe('Message 100');\r\n    });\r\n\r\n    it('should clear buffer', () => {\r\n      logger.info('Test message');\r\n      expect(logger.getLogBuffer()).toHaveLength(1);\r\n      \r\n      logger.clearLogBuffer();\r\n      expect(logger.getLogBuffer()).toHaveLength(0);\r\n    });\r\n  });\r\n\r\n  describe('Log Export', () => {\r\n    it('should export logs as JSON', () => {\r\n      logger.info('Test message', { test: 'data' });\r\n      \r\n      const exported = logger.exportLogs();\r\n      const parsed = JSON.parse(exported);\r\n      \r\n      expect(parsed).toHaveLength(1);\r\n      expect(parsed[0].message).toBe('Test message');\r\n      expect(parsed[0].meta).toEqual({ test: 'data' });\r\n      expect(parsed[0]).toHaveProperty('timestamp');\r\n      expect(parsed[0]).toHaveProperty('level');\r\n    });\r\n  });\r\n\r\n  describe('Context Information', () => {\r\n    it('should include correlation ID', () => {\r\n      // Mock sessionStorage\r\n      Object.defineProperty(window, 'sessionStorage', {\r\n        value: {\r\n          getItem: jest.fn((key) => {\r\n            if (key === 'correlationId') return 'test-correlation-id';\r\n            return null;\r\n          })\r\n        },\r\n        writable: true\r\n      });\r\n\r\n      logger.info('Test message');\r\n      \r\n      const buffer = logger.getLogBuffer();\r\n      expect(buffer[0].correlationId).toBe('test-correlation-id');\r\n    });\r\n\r\n    it('should include user ID', () => {\r\n      // Mock sessionStorage\r\n      Object.defineProperty(window, 'sessionStorage', {\r\n        value: {\r\n          getItem: jest.fn((key) => {\r\n            if (key === 'userId') return 'test-user-id';\r\n            return null;\r\n          })\r\n        },\r\n        writable: true\r\n      });\r\n\r\n      logger.info('Test message');\r\n      \r\n      const buffer = logger.getLogBuffer();\r\n      expect(buffer[0].userId).toBe('test-user-id');\r\n    });\r\n\r\n    it('should include session ID', () => {\r\n      // Mock sessionStorage\r\n      Object.defineProperty(window, 'sessionStorage', {\r\n        value: {\r\n          getItem: jest.fn((key) => {\r\n            if (key === 'sessionId') return 'test-session-id';\r\n            return null;\r\n          })\r\n        },\r\n        writable: true\r\n      });\r\n\r\n      logger.info('Test message');\r\n      \r\n      const buffer = logger.getLogBuffer();\r\n      expect(buffer[0].sessionId).toBe('test-session-id');\r\n    });\r\n  });\r\n\r\n  describe('Global Access', () => {\r\n    it('should be available on window object', () => {\r\n      expect(window.__logger).toBeDefined();\r\n      expect(window.__logger).toBe(logger);\r\n    });\r\n  });\r\n\r\n  describe('Log Levels', () => {\r\n    it('should have correct log level enum values', () => {\r\n      expect(LogLevel.DEBUG).toBe(0);\r\n      expect(LogLevel.INFO).toBe(1);\r\n      expect(LogLevel.WARN).toBe(2);\r\n      expect(LogLevel.ERROR).toBe(3);\r\n      expect(LogLevel.FATAL).toBe(4);\r\n    });\r\n  });\r\n});\r\n"],"version":3}