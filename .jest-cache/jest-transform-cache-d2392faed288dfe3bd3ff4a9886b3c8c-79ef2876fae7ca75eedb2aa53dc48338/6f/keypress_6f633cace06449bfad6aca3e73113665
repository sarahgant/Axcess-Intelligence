084b5a88b84dfed2dcd719c588cdf340
'use strict';

var isElementType = require('../../utils/misc/isElementType.js');
require('../../utils/dataTransfer/Clipboard.js');
var isContentEditable = require('../../utils/edit/isContentEditable.js');
var isEditable = require('../../utils/edit/isEditable.js');
var input = require('../input.js');
var registry = require('./registry.js');
registry.behavior.keypress = (event, target, instance) => {
  if (event.key === 'Enter') {
    if (isElementType.isElementType(target, 'button') || isElementType.isElementType(target, 'input') && ClickInputOnEnter.includes(target.type) || isElementType.isElementType(target, 'a') && Boolean(target.href)) {
      return () => {
        instance.dispatchUIEvent(target, 'click');
      };
    } else if (isElementType.isElementType(target, 'input')) {
      const form = target.form;
      const submit = form === null || form === undefined ? undefined : form.querySelector('input[type="submit"], button:not([type]), button[type="submit"]');
      if (submit) {
        return () => instance.dispatchUIEvent(submit, 'click');
      } else if (form && SubmitSingleInputOnEnter.includes(target.type) && form.querySelectorAll('input').length === 1) {
        return () => instance.dispatchUIEvent(form, 'submit');
      } else {
        return;
      }
    }
  }
  if (isEditable.isEditable(target)) {
    const inputType = event.key === 'Enter' ? isContentEditable.isContentEditable(target) && !instance.system.keyboard.modifiers.Shift ? 'insertParagraph' : 'insertLineBreak' : 'insertText';
    const inputData = event.key === 'Enter' ? '\n' : event.key;
    return () => input.input(instance, target, inputData, inputType);
  }
};
const ClickInputOnEnter = ['button', 'color', 'file', 'image', 'reset', 'submit'];
const SubmitSingleInputOnEnter = ['email', 'month', 'password', 'search', 'tel', 'text', 'url', 'week'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpc0VsZW1lbnRUeXBlIiwicmVxdWlyZSIsImlzQ29udGVudEVkaXRhYmxlIiwiaXNFZGl0YWJsZSIsImlucHV0IiwicmVnaXN0cnkiLCJiZWhhdmlvciIsImtleXByZXNzIiwiZXZlbnQiLCJ0YXJnZXQiLCJpbnN0YW5jZSIsImtleSIsIkNsaWNrSW5wdXRPbkVudGVyIiwiaW5jbHVkZXMiLCJ0eXBlIiwiQm9vbGVhbiIsImhyZWYiLCJkaXNwYXRjaFVJRXZlbnQiLCJmb3JtIiwic3VibWl0IiwidW5kZWZpbmVkIiwicXVlcnlTZWxlY3RvciIsIlN1Ym1pdFNpbmdsZUlucHV0T25FbnRlciIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJsZW5ndGgiLCJpbnB1dFR5cGUiLCJzeXN0ZW0iLCJrZXlib2FyZCIsIm1vZGlmaWVycyIsIlNoaWZ0IiwiaW5wdXREYXRhIl0sInNvdXJjZXMiOlsia2V5cHJlc3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNFbGVtZW50VHlwZSA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL21pc2MvaXNFbGVtZW50VHlwZS5qcycpO1xucmVxdWlyZSgnLi4vLi4vdXRpbHMvZGF0YVRyYW5zZmVyL0NsaXBib2FyZC5qcycpO1xudmFyIGlzQ29udGVudEVkaXRhYmxlID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvZWRpdC9pc0NvbnRlbnRFZGl0YWJsZS5qcycpO1xudmFyIGlzRWRpdGFibGUgPSByZXF1aXJlKCcuLi8uLi91dGlscy9lZGl0L2lzRWRpdGFibGUuanMnKTtcbnZhciBpbnB1dCA9IHJlcXVpcmUoJy4uL2lucHV0LmpzJyk7XG52YXIgcmVnaXN0cnkgPSByZXF1aXJlKCcuL3JlZ2lzdHJ5LmpzJyk7XG5cbnJlZ2lzdHJ5LmJlaGF2aW9yLmtleXByZXNzID0gKGV2ZW50LCB0YXJnZXQsIGluc3RhbmNlKT0+e1xuICAgIGlmIChldmVudC5rZXkgPT09ICdFbnRlcicpIHtcbiAgICAgICAgaWYgKGlzRWxlbWVudFR5cGUuaXNFbGVtZW50VHlwZSh0YXJnZXQsICdidXR0b24nKSB8fCBpc0VsZW1lbnRUeXBlLmlzRWxlbWVudFR5cGUodGFyZ2V0LCAnaW5wdXQnKSAmJiBDbGlja0lucHV0T25FbnRlci5pbmNsdWRlcyh0YXJnZXQudHlwZSkgfHwgaXNFbGVtZW50VHlwZS5pc0VsZW1lbnRUeXBlKHRhcmdldCwgJ2EnKSAmJiBCb29sZWFuKHRhcmdldC5ocmVmKSkge1xuICAgICAgICAgICAgcmV0dXJuICgpPT57XG4gICAgICAgICAgICAgICAgaW5zdGFuY2UuZGlzcGF0Y2hVSUV2ZW50KHRhcmdldCwgJ2NsaWNrJyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKGlzRWxlbWVudFR5cGUuaXNFbGVtZW50VHlwZSh0YXJnZXQsICdpbnB1dCcpKSB7XG4gICAgICAgICAgICBjb25zdCBmb3JtID0gdGFyZ2V0LmZvcm07XG4gICAgICAgICAgICBjb25zdCBzdWJtaXQgPSBmb3JtID09PSBudWxsIHx8IGZvcm0gPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IGZvcm0ucXVlcnlTZWxlY3RvcignaW5wdXRbdHlwZT1cInN1Ym1pdFwiXSwgYnV0dG9uOm5vdChbdHlwZV0pLCBidXR0b25bdHlwZT1cInN1Ym1pdFwiXScpO1xuICAgICAgICAgICAgaWYgKHN1Ym1pdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoKT0+aW5zdGFuY2UuZGlzcGF0Y2hVSUV2ZW50KHN1Ym1pdCwgJ2NsaWNrJyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZvcm0gJiYgU3VibWl0U2luZ2xlSW5wdXRPbkVudGVyLmluY2x1ZGVzKHRhcmdldC50eXBlKSAmJiBmb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0JykubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgpPT5pbnN0YW5jZS5kaXNwYXRjaFVJRXZlbnQoZm9ybSwgJ3N1Ym1pdCcpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRWRpdGFibGUuaXNFZGl0YWJsZSh0YXJnZXQpKSB7XG4gICAgICAgIGNvbnN0IGlucHV0VHlwZSA9IGV2ZW50LmtleSA9PT0gJ0VudGVyJyA/IGlzQ29udGVudEVkaXRhYmxlLmlzQ29udGVudEVkaXRhYmxlKHRhcmdldCkgJiYgIWluc3RhbmNlLnN5c3RlbS5rZXlib2FyZC5tb2RpZmllcnMuU2hpZnQgPyAnaW5zZXJ0UGFyYWdyYXBoJyA6ICdpbnNlcnRMaW5lQnJlYWsnIDogJ2luc2VydFRleHQnO1xuICAgICAgICBjb25zdCBpbnB1dERhdGEgPSBldmVudC5rZXkgPT09ICdFbnRlcicgPyAnXFxuJyA6IGV2ZW50LmtleTtcbiAgICAgICAgcmV0dXJuICgpPT5pbnB1dC5pbnB1dChpbnN0YW5jZSwgdGFyZ2V0LCBpbnB1dERhdGEsIGlucHV0VHlwZSk7XG4gICAgfVxufTtcbmNvbnN0IENsaWNrSW5wdXRPbkVudGVyID0gW1xuICAgICdidXR0b24nLFxuICAgICdjb2xvcicsXG4gICAgJ2ZpbGUnLFxuICAgICdpbWFnZScsXG4gICAgJ3Jlc2V0JyxcbiAgICAnc3VibWl0J1xuXTtcbmNvbnN0IFN1Ym1pdFNpbmdsZUlucHV0T25FbnRlciA9IFtcbiAgICAnZW1haWwnLFxuICAgICdtb250aCcsXG4gICAgJ3Bhc3N3b3JkJyxcbiAgICAnc2VhcmNoJyxcbiAgICAndGVsJyxcbiAgICAndGV4dCcsXG4gICAgJ3VybCcsXG4gICAgJ3dlZWsnXG5dO1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaLElBQUlBLGFBQWEsR0FBR0MsT0FBTyxDQUFDLG1DQUFtQyxDQUFDO0FBQ2hFQSxPQUFPLENBQUMsdUNBQXVDLENBQUM7QUFDaEQsSUFBSUMsaUJBQWlCLEdBQUdELE9BQU8sQ0FBQyx1Q0FBdUMsQ0FBQztBQUN4RSxJQUFJRSxVQUFVLEdBQUdGLE9BQU8sQ0FBQyxnQ0FB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