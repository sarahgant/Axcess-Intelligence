{"file":"C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\tests\\unit\\config-loader.test.tsx","mappings":"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","names":[],"sources":["C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\tests\\unit\\config-loader.test.tsx"],"sourcesContent":["/**\r\n * Unit tests for ConfigLoader\r\n * Tests configuration loading, validation, and error handling\r\n */\r\n\r\nimport { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';\r\nimport { ConfigLoader } from '../../src/config/loader';\r\nimport { DEFAULT_CONFIG } from '../../src/config/defaults';\r\n\r\n// Mock environment variables\r\nconst mockEnv = {\r\n  ANTHROPIC_API_KEY: 'test-anthropic-key-1234567890',\r\n  OPENAI_API_KEY: 'test-openai-key-1234567890',\r\n  ENCRYPTION_KEY: 'test-encryption-key-32-characters',\r\n  NODE_ENV: 'test',\r\n  ENABLE_STREAMING: 'true',\r\n  MAX_DOCUMENTS_PER_SESSION: '5'\r\n};\r\n\r\ndescribe('ConfigLoader', () => {\r\n  let originalEnv: NodeJS.ProcessEnv;\r\n\r\n  beforeEach(() => {\r\n    // Save original environment\r\n    originalEnv = { ...process.env };\r\n    \r\n    // Reset ConfigLoader instance\r\n    (ConfigLoader as any).instance = null;\r\n    (ConfigLoader as any).loadPromise = null;\r\n    \r\n    // Clear environment\r\n    Object.keys(process.env).forEach(key => {\r\n      if (key.startsWith('ANTHROPIC_') || key.startsWith('OPENAI_') || key.startsWith('ENABLE_')) {\r\n        delete process.env[key];\r\n      }\r\n    });\r\n  });\r\n\r\n  afterEach(() => {\r\n    // Restore original environment\r\n    process.env = originalEnv;\r\n  });\r\n\r\n  describe('load()', () => {\r\n    it('should load configuration with valid environment variables', async () => {\r\n      // Set up test environment\r\n      Object.assign(process.env, mockEnv);\r\n\r\n      const config = await ConfigLoader.load();\r\n\r\n      expect(config).toBeDefined();\r\n      expect(config.providers.anthropic.apiKey).toBe('test-anthropic-key-1234567890');\r\n      expect(config.providers.openai.apiKey).toBe('test-openai-key-1234567890');\r\n      expect(config.security.encryptionKey).toBe('test-encryption-key-32-characters');\r\n      expect(config.environment).toBe('test');\r\n    });\r\n\r\n    it('should return cached instance on subsequent calls', async () => {\r\n      Object.assign(process.env, mockEnv);\r\n\r\n      const config1 = await ConfigLoader.load();\r\n      const config2 = await ConfigLoader.load();\r\n\r\n      expect(config1).toBe(config2); // Same instance\r\n    });\r\n\r\n    it('should throw error for missing required API keys', async () => {\r\n      // Set up environment without API keys\r\n      process.env.ENCRYPTION_KEY = 'test-encryption-key-32-characters';\r\n      process.env.NODE_ENV = 'test';\r\n\r\n      await expect(ConfigLoader.load()).rejects.toThrow(/API key is required/);\r\n    });\r\n\r\n    it('should throw error for invalid encryption key', async () => {\r\n      Object.assign(process.env, {\r\n        ...mockEnv,\r\n        ENCRYPTION_KEY: 'short' // Too short\r\n      });\r\n\r\n      await expect(ConfigLoader.load()).rejects.toThrow(/at least 32 characters/);\r\n    });\r\n\r\n    it('should merge environment variables with defaults', async () => {\r\n      Object.assign(process.env, {\r\n        ...mockEnv,\r\n        ENABLE_STREAMING: 'false',\r\n        MAX_DOCUMENTS_PER_SESSION: '15'\r\n      });\r\n\r\n      const config = await ConfigLoader.load();\r\n\r\n      expect(config.features.enableStreaming).toBe(false);\r\n      expect(config.features.maxDocumentsPerSession).toBe(15);\r\n      expect(config.features.enableDocumentAnalysis).toBe(DEFAULT_CONFIG.features.enableDocumentAnalysis);\r\n    });\r\n  });\r\n\r\n  describe('reload()', () => {\r\n    it('should reload configuration with new environment variables', async () => {\r\n      // Initial load\r\n      Object.assign(process.env, mockEnv);\r\n      const config1 = await ConfigLoader.load();\r\n      \r\n      // Change environment\r\n      process.env.ANTHROPIC_DEFAULT_MODEL = 'claude-sonnet-4-20250514';\r\n      \r\n      // Reload\r\n      const config2 = await ConfigLoader.reload();\r\n      \r\n      expect(config2.providers.anthropic.defaultModel).toBe('claude-sonnet-4-20250514');\r\n    });\r\n  });\r\n\r\n  describe('getInstance()', () => {\r\n    it('should return loaded configuration', async () => {\r\n      Object.assign(process.env, mockEnv);\r\n      await ConfigLoader.load();\r\n\r\n      const config = ConfigLoader.getInstance();\r\n      expect(config).toBeDefined();\r\n      expect(config.providers.anthropic.apiKey).toBe('test-anthropic-key-1234567890');\r\n    });\r\n\r\n    it('should throw error if not loaded', () => {\r\n      expect(() => ConfigLoader.getInstance()).toThrow(/Configuration not loaded/);\r\n    });\r\n  });\r\n\r\n  describe('isLoaded()', () => {\r\n    it('should return false initially', () => {\r\n      expect(ConfigLoader.isLoaded()).toBe(false);\r\n    });\r\n\r\n    it('should return true after loading', async () => {\r\n      Object.assign(process.env, mockEnv);\r\n      await ConfigLoader.load();\r\n\r\n      expect(ConfigLoader.isLoaded()).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('getConfigSummary()', () => {\r\n    it('should return not loaded status initially', () => {\r\n      const summary = ConfigLoader.getConfigSummary();\r\n      expect(summary.loaded).toBe(false);\r\n    });\r\n\r\n    it('should return masked configuration after loading', async () => {\r\n      Object.assign(process.env, mockEnv);\r\n      await ConfigLoader.load();\r\n\r\n      const summary = ConfigLoader.getConfigSummary();\r\n      expect(summary.loaded).toBe(true);\r\n      expect(summary.config.providers.anthropic.apiKey).toMatch(/^\\*\\*\\*\\d{4}$/);\r\n      expect(summary.config.providers.openai.apiKey).toMatch(/^\\*\\*\\*\\d{4}$/);\r\n    });\r\n  });\r\n\r\n  describe('Environment-specific overrides', () => {\r\n    it('should apply development overrides', async () => {\r\n      Object.assign(process.env, {\r\n        ...mockEnv,\r\n        NODE_ENV: 'development'\r\n      });\r\n\r\n      const config = await ConfigLoader.load();\r\n      expect(config.environment).toBe('development');\r\n      expect(config.logLevel).toBe('debug');\r\n    });\r\n\r\n    it('should apply production overrides', async () => {\r\n      Object.assign(process.env, {\r\n        ...mockEnv,\r\n        NODE_ENV: 'production'\r\n      });\r\n\r\n      const config = await ConfigLoader.load();\r\n      expect(config.environment).toBe('production');\r\n      expect(config.logLevel).toBe('warn');\r\n    });\r\n  });\r\n\r\n  describe('Error handling', () => {\r\n    it('should provide detailed validation errors', async () => {\r\n      process.env.ANTHROPIC_API_KEY = 'test-key';\r\n      // Missing OPENAI_API_KEY and ENCRYPTION_KEY\r\n\r\n      try {\r\n        await ConfigLoader.load();\r\n        expect.fail('Should have thrown validation error');\r\n      } catch (error) {\r\n        expect(error).toBeInstanceOf(Error);\r\n        expect(error.message).toContain('Configuration validation failed');\r\n      }\r\n    });\r\n\r\n    it('should handle malformed environment variables gracefully', async () => {\r\n      Object.assign(process.env, {\r\n        ...mockEnv,\r\n        MAX_DOCUMENTS_PER_SESSION: 'not-a-number'\r\n      });\r\n\r\n      // Should still load with default value\r\n      const config = await ConfigLoader.load();\r\n      expect(config.features.maxDocumentsPerSession).toBe(DEFAULT_CONFIG.features.maxDocumentsPerSession);\r\n    });\r\n  });\r\n});"],"version":3}