ac6f274f6032c262271c48d14873d1c9
"use strict";
/**
 * Unit tests for ConfigLoader
 * Tests configuration loading, validation, and error handling
 */
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const loader_1 = require("../../src/config/loader");
const defaults_1 = require("../../src/config/defaults");
// Mock environment variables
const mockEnv = {
    ANTHROPIC_API_KEY: 'test-anthropic-key-1234567890',
    OPENAI_API_KEY: 'test-openai-key-1234567890',
    ENCRYPTION_KEY: 'test-encryption-key-32-characters',
    NODE_ENV: 'test',
    ENABLE_STREAMING: 'true',
    MAX_DOCUMENTS_PER_SESSION: '5'
};
(0, vitest_1.describe)('ConfigLoader', () => {
    let originalEnv;
    (0, vitest_1.beforeEach)(() => {
        // Save original environment
        originalEnv = { ...process.env };
        // Reset ConfigLoader instance
        loader_1.ConfigLoader.instance = null;
        loader_1.ConfigLoader.loadPromise = null;
        // Clear environment
        Object.keys(process.env).forEach(key => {
            if (key.startsWith('ANTHROPIC_') || key.startsWith('OPENAI_') || key.startsWith('ENABLE_')) {
                delete process.env[key];
            }
        });
    });
    (0, vitest_1.afterEach)(() => {
        // Restore original environment
        process.env = originalEnv;
    });
    (0, vitest_1.describe)('load()', () => {
        (0, vitest_1.it)('should load configuration with valid environment variables', async () => {
            // Set up test environment
            Object.assign(process.env, mockEnv);
            const config = await loader_1.ConfigLoader.load();
            (0, vitest_1.expect)(config).toBeDefined();
            (0, vitest_1.expect)(config.providers.anthropic.apiKey).toBe('test-anthropic-key-1234567890');
            (0, vitest_1.expect)(config.providers.openai.apiKey).toBe('test-openai-key-1234567890');
            (0, vitest_1.expect)(config.security.encryptionKey).toBe('test-encryption-key-32-characters');
            (0, vitest_1.expect)(config.environment).toBe('test');
        });
        (0, vitest_1.it)('should return cached instance on subsequent calls', async () => {
            Object.assign(process.env, mockEnv);
            const config1 = await loader_1.ConfigLoader.load();
            const config2 = await loader_1.ConfigLoader.load();
            (0, vitest_1.expect)(config1).toBe(config2); // Same instance
        });
        (0, vitest_1.it)('should throw error for missing required API keys', async () => {
            // Set up environment without API keys
            process.env.ENCRYPTION_KEY = 'test-encryption-key-32-characters';
            process.env.NODE_ENV = 'test';
            await (0, vitest_1.expect)(loader_1.ConfigLoader.load()).rejects.toThrow(/API key is required/);
        });
        (0, vitest_1.it)('should throw error for invalid encryption key', async () => {
            Object.assign(process.env, {
                ...mockEnv,
                ENCRYPTION_KEY: 'short' // Too short
            });
            await (0, vitest_1.expect)(loader_1.ConfigLoader.load()).rejects.toThrow(/at least 32 characters/);
        });
        (0, vitest_1.it)('should merge environment variables with defaults', async () => {
            Object.assign(process.env, {
                ...mockEnv,
                ENABLE_STREAMING: 'false',
                MAX_DOCUMENTS_PER_SESSION: '15'
            });
            const config = await loader_1.ConfigLoader.load();
            (0, vitest_1.expect)(config.features.enableStreaming).toBe(false);
            (0, vitest_1.expect)(config.features.maxDocumentsPerSession).toBe(15);
            (0, vitest_1.expect)(config.features.enableDocumentAnalysis).toBe(defaults_1.DEFAULT_CONFIG.features.enableDocumentAnalysis);
        });
    });
    (0, vitest_1.describe)('reload()', () => {
        (0, vitest_1.it)('should reload configuration with new environment variables', async () => {
            // Initial load
            Object.assign(process.env, mockEnv);
            const config1 = await loader_1.ConfigLoader.load();
            // Change environment
            process.env.ANTHROPIC_DEFAULT_MODEL = 'claude-sonnet-4-20250514';
            // Reload
            const config2 = await loader_1.ConfigLoader.reload();
            (0, vitest_1.expect)(config2.providers.anthropic.defaultModel).toBe('claude-sonnet-4-20250514');
        });
    });
    (0, vitest_1.describe)('getInstance()', () => {
        (0, vitest_1.it)('should return loaded configuration', async () => {
            Object.assign(process.env, mockEnv);
            await loader_1.ConfigLoader.load();
            const config = loader_1.ConfigLoader.getInstance();
            (0, vitest_1.expect)(config).toBeDefined();
            (0, vitest_1.expect)(config.providers.anthropic.apiKey).toBe('test-anthropic-key-1234567890');
        });
        (0, vitest_1.it)('should throw error if not loaded', () => {
            (0, vitest_1.expect)(() => loader_1.ConfigLoader.getInstance()).toThrow(/Configuration not loaded/);
        });
    });
    (0, vitest_1.describe)('isLoaded()', () => {
        (0, vitest_1.it)('should return false initially', () => {
            (0, vitest_1.expect)(loader_1.ConfigLoader.isLoaded()).toBe(false);
        });
        (0, vitest_1.it)('should return true after loading', async () => {
            Object.assign(process.env, mockEnv);
            await loader_1.ConfigLoader.load();
            (0, vitest_1.expect)(loader_1.ConfigLoader.isLoaded()).toBe(true);
        });
    });
    (0, vitest_1.describe)('getConfigSummary()', () => {
        (0, vitest_1.it)('should return not loaded status initially', () => {
            const summary = loader_1.ConfigLoader.getConfigSummary();
            (0, vitest_1.expect)(summary.loaded).toBe(false);
        });
        (0, vitest_1.it)('should return masked configuration after loading', async () => {
            Object.assign(process.env, mockEnv);
            await loader_1.ConfigLoader.load();
            const summary = loader_1.ConfigLoader.getConfigSummary();
            (0, vitest_1.expect)(summary.loaded).toBe(true);
            (0, vitest_1.expect)(summary.config.providers.anthropic.apiKey).toMatch(/^\*\*\*\d{4}$/);
            (0, vitest_1.expect)(summary.config.providers.openai.apiKey).toMatch(/^\*\*\*\d{4}$/);
        });
    });
    (0, vitest_1.describe)('Environment-specific overrides', () => {
        (0, vitest_1.it)('should apply development overrides', async () => {
            Object.assign(process.env, {
                ...mockEnv,
                NODE_ENV: 'development'
            });
            const config = await loader_1.ConfigLoader.load();
            (0, vitest_1.expect)(config.environment).toBe('development');
            (0, vitest_1.expect)(config.logLevel).toBe('debug');
        });
        (0, vitest_1.it)('should apply production overrides', async () => {
            Object.assign(process.env, {
                ...mockEnv,
                NODE_ENV: 'production'
            });
            const config = await loader_1.ConfigLoader.load();
            (0, vitest_1.expect)(config.environment).toBe('production');
            (0, vitest_1.expect)(config.logLevel).toBe('warn');
        });
    });
    (0, vitest_1.describe)('Error handling', () => {
        (0, vitest_1.it)('should provide detailed validation errors', async () => {
            process.env.ANTHROPIC_API_KEY = 'test-key';
            // Missing OPENAI_API_KEY and ENCRYPTION_KEY
            try {
                await loader_1.ConfigLoader.load();
                vitest_1.expect.fail('Should have thrown validation error');
            }
            catch (error) {
                (0, vitest_1.expect)(error).toBeInstanceOf(Error);
                (0, vitest_1.expect)(error.message).toContain('Configuration validation failed');
            }
        });
        (0, vitest_1.it)('should handle malformed environment variables gracefully', async () => {
            Object.assign(process.env, {
                ...mockEnv,
                MAX_DOCUMENTS_PER_SESSION: 'not-a-number'
            });
            // Should still load with default value
            const config = await loader_1.ConfigLoader.load();
            (0, vitest_1.expect)(config.features.maxDocumentsPerSession).toBe(defaults_1.DEFAULT_CONFIG.features.maxDocumentsPerSession);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,