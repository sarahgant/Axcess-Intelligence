{"file":"C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\src\\core\\logging\\logger.ts","mappings":"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","names":[],"sources":["C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\src\\core\\logging\\logger.ts"],"sourcesContent":["export enum LogLevel {\r\n  DEBUG = 0,\r\n  INFO = 1,\r\n  WARN = 2,\r\n  ERROR = 3,\r\n  FATAL = 4\r\n}\r\n\r\ninterface LogContext {\r\n  timestamp: string;\r\n  level: LogLevel;\r\n  message: string;\r\n  meta?: any;\r\n  correlationId?: string;\r\n  userId?: string;\r\n  sessionId?: string;\r\n  component?: string;\r\n  action?: string;\r\n}\r\n\r\n// Extend Window interface for debugging\r\ndeclare global {\r\n  interface Window {\r\n    __logBuffer?: LogContext[];\r\n    __logger?: Logger;\r\n  }\r\n}\r\n\r\nclass Logger {\r\n  private isDevelopment = process.env.NODE_ENV === 'development' || import.meta?.env?.DEV;\r\n  private logLevel = this.isDevelopment ? LogLevel.DEBUG : LogLevel.INFO;\r\n\r\n  private formatLog(context: LogContext): string {\r\n    return JSON.stringify(context);\r\n  }\r\n\r\n  private shouldLog(level: LogLevel): boolean {\r\n    return level >= this.logLevel;\r\n  }\r\n\r\n  private log(level: LogLevel, message: string, meta?: any, context?: Partial<LogContext>) {\r\n    if (!this.shouldLog(level)) return;\r\n\r\n    const logContext: LogContext = {\r\n      timestamp: new Date().toISOString(),\r\n      level,\r\n      message,\r\n      meta,\r\n      correlationId: this.getCorrelationId(),\r\n      userId: this.getUserId(),\r\n      sessionId: this.getSessionId(),\r\n      ...context\r\n    };\r\n\r\n    // In development, use console for readability\r\n    if (this.isDevelopment) {\r\n      const color = this.getConsoleColor(level);\r\n      const levelName = LogLevel[level];\r\n      console.log(`%c[${levelName}]`, color, message, meta || '');\r\n    } else {\r\n      // In production, send to monitoring service\r\n      this.sendToMonitoring(logContext);\r\n    }\r\n\r\n    // Store in local buffer for debugging\r\n    this.storeInBuffer(logContext);\r\n  }\r\n\r\n  debug(message: string, meta?: any, context?: Partial<LogContext>) {\r\n    this.log(LogLevel.DEBUG, message, meta, context);\r\n  }\r\n\r\n  info(message: string, meta?: any, context?: Partial<LogContext>) {\r\n    this.log(LogLevel.INFO, message, meta, context);\r\n  }\r\n\r\n  warn(message: string, meta?: any, context?: Partial<LogContext>) {\r\n    this.log(LogLevel.WARN, message, meta, context);\r\n  }\r\n\r\n  error(message: string, meta?: any, context?: Partial<LogContext>) {\r\n    this.log(LogLevel.ERROR, message, meta, context);\r\n  }\r\n\r\n  fatal(message: string, meta?: any, context?: Partial<LogContext>) {\r\n    this.log(LogLevel.FATAL, message, meta, context);\r\n  }\r\n\r\n  // Component-specific logging methods\r\n  component(componentName: string) {\r\n    return {\r\n      debug: (message: string, meta?: any) => this.debug(message, meta, { component: componentName }),\r\n      info: (message: string, meta?: any) => this.info(message, meta, { component: componentName }),\r\n      warn: (message: string, meta?: any) => this.warn(message, meta, { component: componentName }),\r\n      error: (message: string, meta?: any) => this.error(message, meta, { component: componentName }),\r\n      fatal: (message: string, meta?: any) => this.fatal(message, meta, { component: componentName })\r\n    };\r\n  }\r\n\r\n  // Action-specific logging methods\r\n  action(actionName: string) {\r\n    return {\r\n      debug: (message: string, meta?: any) => this.debug(message, meta, { action: actionName }),\r\n      info: (message: string, meta?: any) => this.info(message, meta, { action: actionName }),\r\n      warn: (message: string, meta?: any) => this.warn(message, meta, { action: actionName }),\r\n      error: (message: string, meta?: any) => this.error(message, meta, { action: actionName }),\r\n      fatal: (message: string, meta?: any) => this.fatal(message, meta, { action: actionName })\r\n    };\r\n  }\r\n\r\n  // Helper methods\r\n  private getConsoleColor(level: LogLevel): string {\r\n    const colors = {\r\n      [LogLevel.DEBUG]: 'color: gray',\r\n      [LogLevel.INFO]: 'color: blue',\r\n      [LogLevel.WARN]: 'color: orange',\r\n      [LogLevel.ERROR]: 'color: red',\r\n      [LogLevel.FATAL]: 'color: darkred; font-weight: bold'\r\n    };\r\n    return colors[level];\r\n  }\r\n\r\n  private getCorrelationId(): string {\r\n    if (typeof window === 'undefined') return 'server-side';\r\n    return sessionStorage.getItem('correlationId') || 'no-correlation-id';\r\n  }\r\n\r\n  private getUserId(): string {\r\n    if (typeof window === 'undefined') return 'server-side';\r\n    return sessionStorage.getItem('userId') || 'anonymous';\r\n  }\r\n\r\n  private getSessionId(): string {\r\n    if (typeof window === 'undefined') return 'server-side';\r\n    return sessionStorage.getItem('sessionId') || 'no-session';\r\n  }\r\n\r\n  private sendToMonitoring(context: LogContext) {\r\n    // Future: Send to Azure Application Insights\r\n    // For now, store in IndexedDB for retrieval\r\n    if (typeof window !== 'undefined') {\r\n      this.storeInIndexedDB(context);\r\n    }\r\n  }\r\n\r\n  private storeInBuffer(context: LogContext) {\r\n    // Store last 100 logs in memory for debugging\r\n    if (typeof window === 'undefined') return;\r\n    \r\n    if (!window.__logBuffer) window.__logBuffer = [];\r\n    window.__logBuffer.push(context);\r\n    if (window.__logBuffer.length > 100) {\r\n      window.__logBuffer.shift();\r\n    }\r\n  }\r\n\r\n  private async storeInIndexedDB(context: LogContext) {\r\n    try {\r\n      // Simple IndexedDB storage for production logs\r\n      const dbName = 'CCHLogs';\r\n      const storeName = 'logs';\r\n      \r\n      const request = indexedDB.open(dbName, 1);\r\n      \r\n      request.onupgradeneeded = (event) => {\r\n        const db = (event.target as IDBOpenDBRequest).result;\r\n        if (!db.objectStoreNames.contains(storeName)) {\r\n          db.createObjectStore(storeName, { keyPath: 'timestamp' });\r\n        }\r\n      };\r\n\r\n      request.onsuccess = (event) => {\r\n        const db = (event.target as IDBOpenDBRequest).result;\r\n        const transaction = db.transaction([storeName], 'readwrite');\r\n        const store = transaction.objectStore(storeName);\r\n        store.add(context);\r\n      };\r\n    } catch (error) {\r\n      // Fallback to console if IndexedDB fails\r\n      console.error('Failed to store log in IndexedDB:', error);\r\n    }\r\n  }\r\n\r\n  // Utility methods for debugging\r\n  getLogBuffer(): LogContext[] {\r\n    if (typeof window === 'undefined') return [];\r\n    return window.__logBuffer || [];\r\n  }\r\n\r\n  clearLogBuffer(): void {\r\n    if (typeof window === 'undefined') return;\r\n    window.__logBuffer = [];\r\n  }\r\n\r\n  // Export logs for debugging\r\n  exportLogs(): string {\r\n    const logs = this.getLogBuffer();\r\n    return JSON.stringify(logs, null, 2);\r\n  }\r\n}\r\n\r\nexport const logger = new Logger();\r\n\r\n// Add to window for debugging in production\r\nif (typeof window !== 'undefined') {\r\n  window.__logger = logger;\r\n}\r\n"],"version":3}