{"file":"C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\tests\\unit\\message-functionality.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\tests\\unit\\message-functionality.test.ts"],"sourcesContent":["/**\r\n * Test suite for message functionality features\r\n * Tests copy, reload/regenerate, and thumbs up/down features\r\n */\r\n\r\ndescribe(\"Message Functionality\", () => {\r\n  // Mock clipboard API\r\n  const mockClipboard = {\r\n    writeText: jest.fn(),\r\n  };\r\n  \r\n  // Mock DOM methods\r\n  const mockExecCommand = jest.fn();\r\n  \r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    \r\n    // Mock clipboard API\r\n    Object.assign(navigator, {\r\n      clipboard: mockClipboard,\r\n    });\r\n    \r\n    // Mock document.execCommand for fallback\r\n    document.execCommand = mockExecCommand;\r\n    \r\n    // Mock window.isSecureContext\r\n    Object.defineProperty(window, 'isSecureContext', {\r\n      writable: true,\r\n      value: true,\r\n    });\r\n  });\r\n\r\n  describe(\"Copy Functionality\", () => {\r\n    it(\"should copy message text using modern clipboard API\", async () => {\r\n      const testMessage = \"This is a test message\";\r\n      mockClipboard.writeText.mockResolvedValue(undefined);\r\n      \r\n      // Test the copy functionality directly\r\n      const copyFunction = async (message: string) => {\r\n        try {\r\n          if (navigator.clipboard && window.isSecureContext) {\r\n            await navigator.clipboard.writeText(message);\r\n          }\r\n        } catch (error) {\r\n          console.error('Failed to copy text:', error);\r\n        }\r\n      };\r\n      \r\n      await copyFunction(testMessage);\r\n      \r\n      expect(mockClipboard.writeText).toHaveBeenCalledWith(testMessage);\r\n    });\r\n\r\n    it(\"should fallback to execCommand when clipboard API is not available\", async () => {\r\n      const testMessage = \"Test message for fallback\";\r\n      \r\n      // Mock clipboard API as unavailable\r\n      Object.assign(navigator, {\r\n        clipboard: undefined,\r\n      });\r\n      \r\n      // Mock DOM manipulation\r\n      const mockTextArea = {\r\n        value: '',\r\n        style: { position: '', left: '', top: '' },\r\n        focus: jest.fn(),\r\n        select: jest.fn(),\r\n        remove: jest.fn(),\r\n      };\r\n      \r\n      const mockCreateElement = jest.fn(() => mockTextArea);\r\n      const mockAppendChild = jest.fn();\r\n      \r\n      document.createElement = mockCreateElement;\r\n      document.body.appendChild = mockAppendChild;\r\n      mockExecCommand.mockReturnValue(true);\r\n      \r\n      const copyFallbackFunction = async (message: string) => {\r\n        try {\r\n          if (navigator.clipboard && window.isSecureContext) {\r\n            await navigator.clipboard.writeText(message);\r\n          } else {\r\n            // Fallback implementation\r\n            const textArea = document.createElement('textarea');\r\n            textArea.value = message;\r\n            textArea.style.position = 'fixed';\r\n            textArea.style.left = '-999999px';\r\n            textArea.style.top = '-999999px';\r\n            document.body.appendChild(textArea);\r\n            textArea.focus();\r\n            textArea.select();\r\n            document.execCommand('copy');\r\n            textArea.remove();\r\n          }\r\n        } catch (error) {\r\n          console.error('Failed to copy text:', error);\r\n        }\r\n      };\r\n      \r\n      await copyFallbackFunction(testMessage);\r\n      \r\n      expect(mockCreateElement).toHaveBeenCalledWith('textarea');\r\n      expect(mockTextArea.value).toBe(testMessage);\r\n      expect(mockExecCommand).toHaveBeenCalledWith('copy');\r\n    });\r\n\r\n    it(\"should handle copy failures gracefully\", async () => {\r\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\r\n      mockClipboard.writeText.mockRejectedValue(new Error('Clipboard not available'));\r\n      \r\n      const copyFunction = async (message: string) => {\r\n        try {\r\n          await navigator.clipboard.writeText(message);\r\n        } catch (error) {\r\n          console.error('Failed to copy text:', error);\r\n        }\r\n      };\r\n      \r\n      await copyFunction(\"test message\");\r\n      \r\n      expect(consoleSpy).toHaveBeenCalledWith(\r\n        'Failed to copy text:', \r\n        expect.any(Error)\r\n      );\r\n      \r\n      consoleSpy.mockRestore();\r\n    });\r\n  });\r\n\r\n  describe(\"Regenerate/Reload Functionality\", () => {\r\n    it(\"should regenerate AI response\", async () => {\r\n      const mockUpdateMessage = jest.fn();\r\n      const mockGenerateResponse = jest.fn(() => \"New regenerated response\");\r\n      \r\n      const regenerateFunction = async (messageId: string, userMessage: string) => {\r\n        try {\r\n          // Simulate API delay\r\n          await new Promise(resolve => setTimeout(resolve, 10));\r\n          const newResponse = mockGenerateResponse(userMessage);\r\n          mockUpdateMessage(messageId, { text: newResponse, timestamp: new Date() });\r\n          return newResponse;\r\n        } catch (error) {\r\n          console.error('Regeneration failed:', error);\r\n          throw error;\r\n        }\r\n      };\r\n      \r\n      const result = await regenerateFunction(\"message-id\", \"user message\");\r\n      \r\n      expect(mockGenerateResponse).toHaveBeenCalledWith(\"user message\");\r\n      expect(mockUpdateMessage).toHaveBeenCalledWith(\r\n        \"message-id\", \r\n        expect.objectContaining({\r\n          text: \"New regenerated response\",\r\n          timestamp: expect.any(Date)\r\n        })\r\n      );\r\n      expect(result).toBe(\"New regenerated response\");\r\n    });\r\n\r\n    it(\"should handle regeneration failures gracefully\", async () => {\r\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\r\n      const mockFailingRegenerate = jest.fn(() => {\r\n        throw new Error('API Error');\r\n      });\r\n      \r\n      const regenerateFunction = async () => {\r\n        try {\r\n          await mockFailingRegenerate();\r\n        } catch (error) {\r\n          console.error('Regeneration failed:', error);\r\n          throw error;\r\n        }\r\n      };\r\n      \r\n      await expect(regenerateFunction()).rejects.toThrow('API Error');\r\n      \r\n      expect(consoleSpy).toHaveBeenCalledWith(\r\n        'Regeneration failed:', \r\n        expect.any(Error)\r\n      );\r\n      \r\n      consoleSpy.mockRestore();\r\n    });\r\n  });\r\n\r\n  describe(\"Thumbs Up/Down Feedback\", () => {\r\n    it(\"should handle positive feedback (thumbs up)\", () => {\r\n      const mockLogFeedback = jest.fn();\r\n      \r\n      const feedbackFunction = (messageId: string, isPositive: boolean) => {\r\n        mockLogFeedback({\r\n          messageId,\r\n          isPositive,\r\n          action: isPositive ? 'feedback_positive' : 'feedback_negative'\r\n        });\r\n      };\r\n      \r\n      feedbackFunction(\"test-message-id\", true);\r\n      \r\n      expect(mockLogFeedback).toHaveBeenCalledWith({\r\n        messageId: \"test-message-id\",\r\n        isPositive: true,\r\n        action: 'feedback_positive'\r\n      });\r\n    });\r\n\r\n    it(\"should handle negative feedback (thumbs down)\", () => {\r\n      const mockLogFeedback = jest.fn();\r\n      const mockShowFeedbackModal = jest.fn();\r\n      \r\n      const feedbackFunction = (messageId: string, isPositive: boolean) => {\r\n        mockLogFeedback({\r\n          messageId,\r\n          isPositive,\r\n          action: isPositive ? 'feedback_positive' : 'feedback_negative'\r\n        });\r\n        \r\n        if (!isPositive) {\r\n          mockShowFeedbackModal(true);\r\n        }\r\n      };\r\n      \r\n      feedbackFunction(\"test-message-id\", false);\r\n      \r\n      expect(mockLogFeedback).toHaveBeenCalledWith({\r\n        messageId: \"test-message-id\",\r\n        isPositive: false,\r\n        action: 'feedback_negative'\r\n      });\r\n      expect(mockShowFeedbackModal).toHaveBeenCalledWith(true);\r\n    });\r\n\r\n    it(\"should log feedback actions properly\", () => {\r\n      const loggerMock = {\r\n        info: jest.fn(),\r\n      };\r\n      \r\n      const feedbackWithLogging = (messageId: string, isPositive: boolean) => {\r\n        loggerMock.info('Message feedback submitted', {\r\n          messageId,\r\n          isPositive\r\n        });\r\n      };\r\n      \r\n      feedbackWithLogging(\"msg-123\", true);\r\n      feedbackWithLogging(\"msg-456\", false);\r\n      \r\n      expect(loggerMock.info).toHaveBeenCalledTimes(2);\r\n      expect(loggerMock.info).toHaveBeenNthCalledWith(1, 'Message feedback submitted', {\r\n        messageId: \"msg-123\",\r\n        isPositive: true\r\n      });\r\n      expect(loggerMock.info).toHaveBeenNthCalledWith(2, 'Message feedback submitted', {\r\n        messageId: \"msg-456\",\r\n        isPositive: false\r\n      });\r\n    });\r\n  });\r\n\r\n  describe(\"Integration Tests\", () => {\r\n    it(\"should handle multiple operations in sequence\", async () => {\r\n      const mockLogger = { info: jest.fn() };\r\n      const mockUpdateMessage = jest.fn();\r\n      mockClipboard.writeText.mockResolvedValue(undefined);\r\n      \r\n      const messageOperations = {\r\n        copy: async (messageId: string, text: string) => {\r\n          await navigator.clipboard.writeText(text);\r\n          mockLogger.info('Message copied to clipboard', { messageId });\r\n        },\r\n        \r\n        feedback: (messageId: string, isPositive: boolean) => {\r\n          mockLogger.info('Message feedback submitted', { messageId, isPositive });\r\n        },\r\n        \r\n        regenerate: async (messageId: string) => {\r\n          const newText = \"Regenerated response\";\r\n          mockUpdateMessage(messageId, { text: newText });\r\n          mockLogger.info('Message regeneration requested', { messageId });\r\n          return newText;\r\n        }\r\n      };\r\n      \r\n      const messageId = \"test-message-id\";\r\n      const messageText = \"Original message text\";\r\n      \r\n      // Test copy\r\n      await messageOperations.copy(messageId, messageText);\r\n      \r\n      // Test feedback\r\n      messageOperations.feedback(messageId, true);\r\n      \r\n      // Test regenerate\r\n      const newText = await messageOperations.regenerate(messageId);\r\n      \r\n      expect(mockClipboard.writeText).toHaveBeenCalledWith(messageText);\r\n      expect(mockLogger.info).toHaveBeenCalledTimes(3);\r\n      expect(mockUpdateMessage).toHaveBeenCalledWith(messageId, { text: \"Regenerated response\" });\r\n      expect(newText).toBe(\"Regenerated response\");\r\n    });\r\n  });\r\n\r\n  describe(\"Visual Feedback Simulation\", () => {\r\n    it(\"should simulate button visual feedback\", () => {\r\n      // Mock button element\r\n      const mockButton = {\r\n        style: {\r\n          backgroundColor: '',\r\n          transform: ''\r\n        },\r\n        setAttribute: jest.fn(),\r\n        getAttribute: jest.fn(() => 'Copy message')\r\n      };\r\n      \r\n      const applyVisualFeedback = (button: any, success: boolean) => {\r\n        if (success) {\r\n          button.style.backgroundColor = '#dcfce7';\r\n          button.setAttribute('title', 'Copied!');\r\n        } else {\r\n          button.style.backgroundColor = '#fef2f2';\r\n          button.setAttribute('title', 'Copy failed');\r\n        }\r\n      };\r\n      \r\n      // Test success feedback\r\n      applyVisualFeedback(mockButton, true);\r\n      expect(mockButton.style.backgroundColor).toBe('#dcfce7');\r\n      expect(mockButton.setAttribute).toHaveBeenCalledWith('title', 'Copied!');\r\n      \r\n      // Reset\r\n      mockButton.style.backgroundColor = '';\r\n      jest.clearAllMocks();\r\n      \r\n      // Test error feedback\r\n      applyVisualFeedback(mockButton, false);\r\n      expect(mockButton.style.backgroundColor).toBe('#fef2f2');\r\n      expect(mockButton.setAttribute).toHaveBeenCalledWith('title', 'Copy failed');\r\n    });\r\n  });\r\n});\r\n"],"version":3}