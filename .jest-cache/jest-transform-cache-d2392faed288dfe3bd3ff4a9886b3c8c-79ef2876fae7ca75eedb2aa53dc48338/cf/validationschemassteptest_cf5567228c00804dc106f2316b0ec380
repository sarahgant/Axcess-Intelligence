239ab87a1358a06fc1994663399b0689
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const z = __importStar(require("zod"));
(0, globals_1.describe)('Validation Schemas Step by Step', () => {
    (0, globals_1.it)('should create messageSchema', () => {
        const messageSchema = z.object({
            content: z.string().min(1).max(10000),
            role: z.enum(['user', 'assistant', 'system']),
            timestamp: z.date().optional(),
            metadata: z.record(z.string()).optional()
        });
        const validMessage = {
            content: 'Hello, world!',
            role: 'user',
            timestamp: new Date(),
            metadata: { sessionId: '123' }
        };
        const result = messageSchema.safeParse(validMessage);
        (0, globals_1.expect)(result.success).toBe(true);
    });
    (0, globals_1.it)('should create fileUploadSchema', () => {
        const fileUploadSchema = z.object({
            name: z.string().min(1).max(255),
            size: z.number().max(20 * 1024 * 1024),
            type: z.enum([
                'application/pdf',
                'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                'text/plain',
                'image/png',
                'image/jpeg'
            ]),
            content: z.instanceof(File)
        });
        const mockFile = new File(['test content'], 'test.pdf', { type: 'application/pdf' });
        const validUpload = {
            name: 'test.pdf',
            size: 1024,
            type: 'application/pdf',
            content: mockFile
        };
        const result = fileUploadSchema.safeParse(validUpload);
        (0, globals_1.expect)(result.success).toBe(true);
    });
    (0, globals_1.it)('should create apiRequestSchema', () => {
        const messageSchema = z.object({
            content: z.string().min(1).max(10000),
            role: z.enum(['user', 'assistant', 'system']),
            timestamp: z.date().optional(),
            metadata: z.record(z.string()).optional()
        });
        const apiRequestSchema = z.object({
            messages: z.array(messageSchema).min(1),
            model: z.string().optional(),
            temperature: z.number().min(0).max(2).optional(),
            maxTokens: z.number().min(1).max(100000).optional()
        });
        const validRequest = {
            messages: [
                {
                    content: 'Hello',
                    role: 'user'
                },
                {
                    content: 'Hi there!',
                    role: 'assistant'
                }
            ],
            model: 'gpt-4',
            temperature: 0.7,
            maxTokens: 1000
        };
        const result = apiRequestSchema.safeParse(validRequest);
        (0, globals_1.expect)(result.success).toBe(true);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxzYXJhaFxcUmVwb3NcXENDSCBBeGNlc3MgSW50ZWxsaWdlbmNlIFZpYmVkXFx0ZXN0c1xcdW5pdFxcdmFsaWRhdGlvbi1zY2hlbWFzLXN0ZXAudGVzdC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDJDQUFxRDtBQUNyRCx1Q0FBeUI7QUFFekIsSUFBQSxrQkFBUSxFQUFDLGlDQUFpQyxFQUFFLEdBQUcsRUFBRTtJQUMvQyxJQUFBLFlBQUUsRUFBQyw2QkFBNkIsRUFBRSxHQUFHLEVBQUU7UUFDckMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQztZQUM3QixPQUFPLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDO1lBQ3JDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxFQUFFLFdBQVcsRUFBRSxRQUFRLENBQUMsQ0FBQztZQUM3QyxTQUFTLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLFFBQVEsRUFBRTtZQUM5QixRQUFRLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxRQUFRLEVBQUU7U0FDMUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxZQUFZLEdBQUc7WUFDbkIsT0FBTyxFQUFFLGVBQWU7WUFDeEIsSUFBSSxFQUFFLE1BQWU7WUFDckIsU0FBUyxFQUFFLElBQUksSUFBSSxFQUFFO1lBQ3JCLFFBQVEsRUFBRSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUU7U0FDL0IsQ0FBQztRQUVGLE1BQU0sTUFBTSxHQUFHLGFBQWEsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDckQsSUFBQSxnQkFBTSxFQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDcEMsQ0FBQyxD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aEIsQ0FBQztRQUVGLE1BQU0sTUFBTSxHQUFHLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUN4RCxJQUFBLGdCQUFNLEVBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNwQyxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcc2FyYWhcXFJlcG9zXFxDQ0ggQXhjZXNzIEludGVsbGlnZW5jZSBWaWJlZFxcdGVzdHNcXHVuaXRcXHZhbGlkYXRpb24tc2NoZW1hcy1zdGVwLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVzY3JpYmUsIGl0LCBleHBlY3QgfSBmcm9tICdAamVzdC9nbG9iYWxzJztcclxuaW1wb3J0ICogYXMgeiBmcm9tICd6b2QnO1xyXG5cclxuZGVzY3JpYmUoJ1ZhbGlkYXRpb24gU2NoZW1hcyBTdGVwIGJ5IFN0ZXAnLCAoKSA9PiB7XHJcbiAgaXQoJ3Nob3VsZCBjcmVhdGUgbWVzc2FnZVNjaGVtYScsICgpID0+IHtcclxuICAgIGNvbnN0IG1lc3NhZ2VTY2hlbWEgPSB6Lm9iamVjdCh7XHJcbiAgICAgIGNvbnRlbnQ6IHouc3RyaW5nKCkubWluKDEpLm1heCgxMDAwMCksXHJcbiAgICAgIHJvbGU6IHouZW51bShbJ3VzZXInLCAnYXNzaXN0YW50JywgJ3N5c3RlbSddKSxcclxuICAgICAgdGltZXN0YW1wOiB6LmRhdGUoKS5vcHRpb25hbCgpLFxyXG4gICAgICBtZXRhZGF0YTogei5yZWNvcmQoei5zdHJpbmcoKSkub3B0aW9uYWwoKVxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgdmFsaWRNZXNzYWdlID0ge1xyXG4gICAgICBjb250ZW50OiAnSGVsbG8sIHdvcmxkIScsXHJcbiAgICAgIHJvbGU6ICd1c2VyJyBhcyBjb25zdCxcclxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxyXG4gICAgICBtZXRhZGF0YTogeyBzZXNzaW9uSWQ6ICcxMjMnIH1cclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgcmVzdWx0ID0gbWVzc2FnZVNjaGVtYS5zYWZlUGFyc2UodmFsaWRNZXNzYWdlKTtcclxuICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZSh0cnVlKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCBjcmVhdGUgZmlsZVVwbG9hZFNjaGVtYScsICgpID0+IHtcclxuICAgIGNvbnN0IGZpbGVVcGxvYWRTY2hlbWEgPSB6Lm9iamVjdCh7XHJcbiAgICAgIG5hbWU6IHouc3RyaW5nKCkubWluKDEpLm1heCgyNTUpLFxyXG4gICAgICBzaXplOiB6Lm51bWJlcigpLm1heCgyMCAqIDEwMjQgKiAxMDI0KSxcclxuICAgICAgdHlwZTogei5lbnVtKFtcclxuICAgICAgICAnYXBwbGljYXRpb24vcGRmJyxcclxuICAgICAgICAnYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuZG9jdW1lbnQnLFxyXG4gICAgICAgICdhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5zaGVldCcsXHJcbiAgICAgICAgJ3RleHQvcGxhaW4nLFxyXG4gICAgICAgICdpbWFnZS9wbmcnLFxyXG4gICAgICAgICdpbWFnZS9qcGVnJ1xyXG4gICAgICBdKSxcclxuICAgICAgY29udGVudDogei5pbnN0YW5jZW9mKEZpbGUpXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBtb2NrRmlsZSA9IG5ldyBGaWxlKFsndGVzdCBjb250ZW50J10sICd0ZXN0LnBkZicsIHsgdHlwZTogJ2FwcGxpY2F0aW9uL3BkZicgfSk7XHJcbiAgICBjb25zdCB2YWxpZFVwbG9hZCA9IHtcclxuICAgICAgbmFtZTogJ3Rlc3QucGRmJyxcclxuICAgICAgc2l6ZTogMTAyNCxcclxuICAgICAgdHlwZTogJ2FwcGxpY2F0aW9uL3BkZicgYXMgY29uc3QsXHJcbiAgICAgIGNvbnRlbnQ6IG1vY2tGaWxlXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IHJlc3VsdCA9IGZpbGVVcGxvYWRTY2hlbWEuc2FmZVBhcnNlKHZhbGlkVXBsb2FkKTtcclxuICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZSh0cnVlKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCBjcmVhdGUgYXBpUmVxdWVzdFNjaGVtYScsICgpID0+IHtcclxuICAgIGNvbnN0IG1lc3NhZ2VTY2hlbWEgPSB6Lm9iamVjdCh7XHJcbiAgICAgIGNvbnRlbnQ6IHouc3RyaW5nKCkubWluKDEpLm1heCgxMDAwMCksXHJcbiAgICAgIHJvbGU6IHouZW51bShbJ3VzZXInLCAnYXNzaXN0YW50JywgJ3N5c3RlbSddKSxcclxuICAgICAgdGltZXN0YW1wOiB6LmRhdGUoKS5vcHRpb25hbCgpLFxyXG4gICAgICBtZXRhZGF0YTogei5yZWNvcmQoei5zdHJpbmcoKSkub3B0aW9uYWwoKVxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgYXBpUmVxdWVzdFNjaGVtYSA9IHoub2JqZWN0KHtcclxuICAgICAgbWVzc2FnZXM6IHouYXJyYXkobWVzc2FnZVNjaGVtYSkubWluKDEpLFxyXG4gICAgICBtb2RlbDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxyXG4gICAgICB0ZW1wZXJhdHVyZTogei5udW1iZXIoKS5taW4oMCkubWF4KDIpLm9wdGlvbmFsKCksXHJcbiAgICAgIG1heFRva2Vuczogei5udW1iZXIoKS5taW4oMSkubWF4KDEwMDAwMCkub3B0aW9uYWwoKVxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgdmFsaWRSZXF1ZXN0ID0ge1xyXG4gICAgICBtZXNzYWdlczogW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgIGNvbnRlbnQ6ICdIZWxsbycsXHJcbiAgICAgICAgICByb2xlOiAndXNlcicgYXMgY29uc3RcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGNvbnRlbnQ6ICdIaSB0aGVyZSEnLFxyXG4gICAgICAgICAgcm9sZTogJ2Fzc2lzdGFudCcgYXMgY29uc3RcclxuICAgICAgICB9XHJcbiAgICAgIF0sXHJcbiAgICAgIG1vZGVsOiAnZ3B0LTQnLFxyXG4gICAgICB0ZW1wZXJhdHVyZTogMC43LFxyXG4gICAgICBtYXhUb2tlbnM6IDEwMDBcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgcmVzdWx0ID0gYXBpUmVxdWVzdFNjaGVtYS5zYWZlUGFyc2UodmFsaWRSZXF1ZXN0KTtcclxuICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZSh0cnVlKTtcclxuICB9KTtcclxufSk7XHJcbiJdLCJ2ZXJzaW9uIjozfQ==