85d216554749ad128155384b20d4b7d7
"use strict";
/**
 * Unit tests for PromptRegistry
 * Tests prompt template registration, compilation, and management
 */
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const registry_1 = require("../../src/prompts/registry");
const builder_1 = require("../../src/prompts/builder");
const types_1 = require("../../src/prompts/types");
(0, vitest_1.describe)('PromptRegistry', () => {
    let registry;
    const samplePrompt = {
        id: 'test.basic',
        name: 'Basic Test Prompt',
        category: 'user',
        template: 'Hello {{name}}, welcome to {{service}}!',
        variables: ['name', 'service'],
        version: '1.0.0',
        metadata: {
            author: 'test',
            lastModified: new Date(),
            description: 'Basic test prompt',
            tags: ['test']
        }
    };
    (0, vitest_1.beforeEach)(() => {
        registry = new registry_1.PromptRegistry({
            enableLogging: false // Disable logging for tests
        });
    });
    (0, vitest_1.describe)('register()', () => {
        (0, vitest_1.it)('should register a valid prompt template', () => {
            (0, vitest_1.expect)(() => registry.register(samplePrompt)).not.toThrow();
            (0, vitest_1.expect)(registry.has('test.basic')).toBe(true);
        });
        (0, vitest_1.it)('should throw error for duplicate prompt IDs', () => {
            registry.register(samplePrompt);
            (0, vitest_1.expect)(() => registry.register(samplePrompt)).toThrow(/already exists/);
        });
        (0, vitest_1.it)('should validate prompt structure', () => {
            const invalidPrompt = {
                ...samplePrompt,
                id: '', // Invalid empty ID
            };
            (0, vitest_1.expect)(() => registry.register(invalidPrompt)).toThrow(types_1.PromptValidationError);
        });
        (0, vitest_1.it)('should validate that template variables are declared', () => {
            const invalidPrompt = {
                ...samplePrompt,
                template: 'Hello {{name}}, welcome to {{undeclaredVar}}!',
                variables: ['name'] // Missing 'undeclaredVar'
            };
            (0, vitest_1.expect)(() => registry.register(invalidPrompt)).toThrow(types_1.PromptValidationError);
        });
    });
    (0, vitest_1.describe)('get()', () => {
        (0, vitest_1.beforeEach)(() => {
            registry.register(samplePrompt);
        });
        (0, vitest_1.it)('should retrieve registered prompt', () => {
            const prompt = registry.get('test.basic');
            (0, vitest_1.expect)(prompt.id).toBe('test.basic');
            (0, vitest_1.expect)(prompt.name).toBe('Basic Test Prompt');
        });
        (0, vitest_1.it)('should throw error for non-existent prompt', () => {
            (0, vitest_1.expect)(() => registry.get('non.existent')).toThrow(types_1.PromptNotFoundError);
        });
        (0, vitest_1.it)('should return model-specific version when available', () => {
            const promptWithVariants = {
                ...samplePrompt,
                id: 'test.variants',
                modelSpecific: {
                    anthropic: 'Human: {{message}}\nAssistant:',
                    openai: 'System: {{message}}'
                }
            };
            registry.register(promptWithVariants);
            const anthropicVersion = registry.get('test.variants', 'anthropic');
            const openaiVersion = registry.get('test.variants', 'openai');
            (0, vitest_1.expect)(anthropicVersion.template).toBe('Human: {{message}}\nAssistant:');
            (0, vitest_1.expect)(openaiVersion.template).toBe('System: {{message}}');
        });
    });
    (0, vitest_1.describe)('compile()', () => {
        (0, vitest_1.beforeEach)(() => {
            registry.register(samplePrompt);
        });
        (0, vitest_1.it)('should compile prompt with variables', () => {
            const compiled = registry.compile('test.basic', {
                name: 'John',
                service: 'CCH Intelligence'
            });
            (0, vitest_1.expect)(compiled.text).toBe('Hello John, welcome to CCH Intelligence!');
            (0, vitest_1.expect)(compiled.templateId).toBe('test.basic');
            (0, vitest_1.expect)(compiled.variables).toEqual({
                name: 'John',
                service: 'CCH Intelligence'
            });
        });
        (0, vitest_1.it)('should validate required variables', () => {
            (0, vitest_1.expect)(() => {
                registry.compile('test.basic', {
                    name: 'John'
                    // Missing 'service' variable
                });
            }).toThrow(types_1.PromptValidationError);
        });
        (0, vitest_1.it)('should handle missing variables gracefully when validation disabled', () => {
            const compiled = registry.compile('test.basic', {
                name: 'John'
                // Missing 'service' variable
            }, { validate: false });
            (0, vitest_1.expect)(compiled.text).toBe('Hello John, welcome to {{service}}!');
        });
        (0, vitest_1.it)('should use cache when enabled', () => {
            const variables = { name: 'John', service: 'CCH Intelligence' };
            const compiled1 = registry.compile('test.basic', variables, { useCache: true });
            const compiled2 = registry.compile('test.basic', variables, { useCache: true });
            // Should return same result (cached)
            (0, vitest_1.expect)(compiled1.text).toBe(compiled2.text);
            (0, vitest_1.expect)(compiled1.metadata.compiledAt).toEqual(compiled2.metadata.compiledAt);
        });
        (0, vitest_1.it)('should handle different providers', () => {
            const promptWithVariants = {
                ...samplePrompt,
                id: 'test.provider',
                modelSpecific: {
                    anthropic: 'Human: Hello {{name}}\nAssistant:',
                    openai: 'Hello {{name}}'
                }
            };
            registry.register(promptWithVariants);
            const anthropicCompiled = registry.compile('test.provider', { name: 'John' }, { provider: 'anthropic' });
            const openaiCompiled = registry.compile('test.provider', { name: 'John' }, { provider: 'openai' });
            (0, vitest_1.expect)(anthropicCompiled.text).toBe('Human: Hello John\nAssistant:');
            (0, vitest_1.expect)(openaiCompiled.text).toBe('Hello John');
        });
    });
    (0, vitest_1.describe)('search()', () => {
        (0, vitest_1.beforeEach)(() => {
            registry.register(samplePrompt);
            registry.register({
                ...samplePrompt,
                id: 'test.system',
                category: 'system',
                metadata: {
                    ...samplePrompt.metadata,
                    tags: ['system', 'core']
                }
            });
        });
        (0, vitest_1.it)('should search by category', () => {
            const systemPrompts = registry.search({ category: 'system' });
            (0, vitest_1.expect)(systemPrompts).toHaveLength(1);
            (0, vitest_1.expect)(systemPrompts[0].id).toBe('test.system');
        });
        (0, vitest_1.it)('should search by tags', () => {
            const corePrompts = registry.search({ tags: ['core'] });
            (0, vitest_1.expect)(corePrompts).toHaveLength(1);
            (0, vitest_1.expect)(corePrompts[0].id).toBe('test.system');
        });
        (0, vitest_1.it)('should search by text query', () => {
            const results = registry.search({ query: 'Basic' });
            (0, vitest_1.expect)(results).toHaveLength(1);
            (0, vitest_1.expect)(results[0].id).toBe('test.basic');
        });
    });
    (0, vitest_1.describe)('registerBatch()', () => {
        (0, vitest_1.it)('should register multiple prompts', () => {
            const prompts = [
                { ...samplePrompt, id: 'batch.1' },
                { ...samplePrompt, id: 'batch.2' },
                { ...samplePrompt, id: 'batch.3' }
            ];
            registry.registerBatch(prompts);
            (0, vitest_1.expect)(registry.has('batch.1')).toBe(true);
            (0, vitest_1.expect)(registry.has('batch.2')).toBe(true);
            (0, vitest_1.expect)(registry.has('batch.3')).toBe(true);
        });
        (0, vitest_1.it)('should handle partial failures gracefully', () => {
            const prompts = [
                { ...samplePrompt, id: 'batch.valid' },
                { ...samplePrompt, id: '' }, // Invalid
                { ...samplePrompt, id: 'batch.valid2' }
            ];
            // Should not throw but log warnings
            (0, vitest_1.expect)(() => registry.registerBatch(prompts)).not.toThrow();
            (0, vitest_1.expect)(registry.has('batch.valid')).toBe(true);
            (0, vitest_1.expect)(registry.has('batch.valid2')).toBe(true);
        });
    });
    (0, vitest_1.describe)('usage statistics', () => {
        (0, vitest_1.beforeEach)(() => {
            registry.register(samplePrompt);
        });
        (0, vitest_1.it)('should track usage statistics', () => {
            registry.compile('test.basic', { name: 'John', service: 'Test' });
            registry.compile('test.basic', { name: 'Jane', service: 'Test' });
            const stats = registry.getUsageStats('test.basic');
            (0, vitest_1.expect)(stats?.usageCount).toBe(2);
            (0, vitest_1.expect)(stats?.templateId).toBe('test.basic');
        });
        (0, vitest_1.it)('should track error statistics', () => {
            try {
                registry.compile('test.basic', {}); // Missing variables
            }
            catch (error) {
                // Expected error
            }
            const stats = registry.getUsageStats('test.basic');
            (0, vitest_1.expect)(stats?.errorCount).toBe(1);
        });
    });
    (0, vitest_1.describe)('cache management', () => {
        (0, vitest_1.beforeEach)(() => {
            registry.register(samplePrompt);
        });
        (0, vitest_1.it)('should clear cache', () => {
            registry.compile('test.basic', { name: 'John', service: 'Test' });
            (0, vitest_1.expect)(() => registry.clearCache()).not.toThrow();
        });
        (0, vitest_1.it)('should clear cache for specific prompt when unregistered', () => {
            registry.compile('test.basic', { name: 'John', service: 'Test' });
            const removed = registry.unregister('test.basic');
            (0, vitest_1.expect)(removed).toBe(true);
            (0, vitest_1.expect)(registry.has('test.basic')).toBe(false);
        });
    });
    (0, vitest_1.describe)('registry statistics', () => {
        (0, vitest_1.beforeEach)(() => {
            registry.register(samplePrompt);
            registry.register({
                ...samplePrompt,
                id: 'test.system',
                category: 'system'
            });
        });
        (0, vitest_1.it)('should provide registry statistics', () => {
            const stats = registry.getRegistryStats();
            (0, vitest_1.expect)(stats.totalPrompts).toBe(2);
            (0, vitest_1.expect)(stats.categories.user).toBe(1);
            (0, vitest_1.expect)(stats.categories.system).toBe(1);
        });
    });
    (0, vitest_1.describe)('PromptBuilder integration', () => {
        (0, vitest_1.it)('should work with PromptBuilder', () => {
            const prompt = builder_1.PromptBuilder.create()
                .id('builder.test')
                .name('Builder Test')
                .category('user')
                .template('Hello {{name}}!')
                .author('test-author')
                .tags('test', 'builder')
                .build();
            registry.register(prompt);
            const compiled = registry.compile('builder.test', { name: 'Builder' });
            (0, vitest_1.expect)(compiled.text).toBe('Hello Builder!');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,