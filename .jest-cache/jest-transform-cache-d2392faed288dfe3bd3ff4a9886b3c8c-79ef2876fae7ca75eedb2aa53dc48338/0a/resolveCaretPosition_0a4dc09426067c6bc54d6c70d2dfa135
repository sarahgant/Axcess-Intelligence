2b77be7786c190e0fef8f877cfd8b7e1
'use strict';

var UI = require('../../document/UI.js');
require('../../utils/dataTransfer/Clipboard.js');
var selection = require('../../utils/focus/selection.js');
function resolveCaretPosition({
  target,
  node,
  offset
}) {
  if (selection.hasOwnSelection(target)) {
    return {
      node: target,
      offset: offset !== null && offset !== undefined ? offset : UI.getUIValue(target).length
    };
  } else if (node) {
    return {
      node,
      offset: offset !== null && offset !== undefined ? offset : node.nodeType === 3 ? node.nodeValue.length : node.childNodes.length
    };
  }
  return findNodeAtTextOffset(target, offset);
}
function findNodeAtTextOffset(node, offset, isRoot = true) {
  // When clicking after the content the browser behavior can be complicated:
  // 1. If there is textContent after the last element child,
  // the cursor is moved there.
  // 2. If there is textContent in the last element child,
  // the browser moves the cursor to the last non-empty text node inside this element.
  // 3. Otherwise the cursor is moved to the end of the target.
  let i = offset === undefined ? node.childNodes.length - 1 : 0;
  const step = offset === undefined ? -1 : 1;
  while (offset === undefined ? i >= (isRoot ? Math.max(node.childNodes.length - 1, 0) : 0) : i <= node.childNodes.length) {
    if (offset && i === node.childNodes.length) {
      throw new Error('The given offset is out of bounds.');
    }
    const c = node.childNodes.item(i);
    const text = String(c.textContent);
    if (text.length) {
      if (offset !== undefined && text.length < offset) {
        offset -= text.length;
      } else if (c.nodeType === 1) {
        return findNodeAtTextOffset(c, offset, false);
      } else {
        // The pre-commit hooks keeps changing this
        // See https://github.com/kentcdodds/kcd-scripts/issues/218
        /* istanbul ignore else */ // eslint-disable-next-line no-lonely-if
        if (c.nodeType === 3) {
          return {
            node: c,
            offset: offset !== null && offset !== undefined ? offset : c.nodeValue.length
          };
        }
      }
    }
    i += step;
  }
  return {
    node,
    offset: node.childNodes.length
  };
}
exports.resolveCaretPosition = resolveCaretPosition;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVSSIsInJlcXVpcmUiLCJzZWxlY3Rpb24iLCJyZXNvbHZlQ2FyZXRQb3NpdGlvbiIsInRhcmdldCIsIm5vZGUiLCJvZmZzZXQiLCJoYXNPd25TZWxlY3Rpb24iLCJ1bmRlZmluZWQiLCJnZXRVSVZhbHVlIiwibGVuZ3RoIiwibm9kZVR5cGUiLCJub2RlVmFsdWUiLCJjaGlsZE5vZGVzIiwiZmluZE5vZGVBdFRleHRPZmZzZXQiLCJpc1Jvb3QiLCJpIiwic3RlcCIsIk1hdGgiLCJtYXgiLCJFcnJvciIsImMiLCJpdGVtIiwidGV4dCIsIlN0cmluZyIsInRleHRDb250ZW50IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbInJlc29sdmVDYXJldFBvc2l0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIFVJID0gcmVxdWlyZSgnLi4vLi4vZG9jdW1lbnQvVUkuanMnKTtcbnJlcXVpcmUoJy4uLy4uL3V0aWxzL2RhdGFUcmFuc2Zlci9DbGlwYm9hcmQuanMnKTtcbnZhciBzZWxlY3Rpb24gPSByZXF1aXJlKCcuLi8uLi91dGlscy9mb2N1cy9zZWxlY3Rpb24uanMnKTtcblxuZnVuY3Rpb24gcmVzb2x2ZUNhcmV0UG9zaXRpb24oeyB0YXJnZXQsIG5vZGUsIG9mZnNldCB9KSB7XG4gICAgaWYgKHNlbGVjdGlvbi5oYXNPd25TZWxlY3Rpb24odGFyZ2V0KSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbm9kZTogdGFyZ2V0LFxuICAgICAgICAgICAgb2Zmc2V0OiBvZmZzZXQgIT09IG51bGwgJiYgb2Zmc2V0ICE9PSB1bmRlZmluZWQgPyBvZmZzZXQgOiBVSS5nZXRVSVZhbHVlKHRhcmdldCkubGVuZ3RoXG4gICAgICAgIH07XG4gICAgfSBlbHNlIGlmIChub2RlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBub2RlLFxuICAgICAgICAgICAgb2Zmc2V0OiBvZmZzZXQgIT09IG51bGwgJiYgb2Zmc2V0ICE9PSB1bmRlZmluZWQgPyBvZmZzZXQgOiBub2RlLm5vZGVUeXBlID09PSAzID8gbm9kZS5ub2RlVmFsdWUubGVuZ3RoIDogbm9kZS5jaGlsZE5vZGVzLmxlbmd0aFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gZmluZE5vZGVBdFRleHRPZmZzZXQodGFyZ2V0LCBvZmZzZXQpO1xufVxuZnVuY3Rpb24gZmluZE5vZGVBdFRleHRPZmZzZXQobm9kZSwgb2Zmc2V0LCBpc1Jvb3QgPSB0cnVlKSB7XG4gICAgLy8gV2hlbiBjbGlja2luZyBhZnRlciB0aGUgY29udGVudCB0aGUgYnJvd3NlciBiZWhhdmlvciBjYW4gYmUgY29tcGxpY2F0ZWQ6XG4gICAgLy8gMS4gSWYgdGhlcmUgaXMgdGV4dENvbnRlbnQgYWZ0ZXIgdGhlIGxhc3QgZWxlbWVudCBjaGlsZCxcbiAgICAvLyB0aGUgY3Vyc29yIGlzIG1vdmVkIHRoZXJlLlxuICAgIC8vIDIuIElmIHRoZXJlIGlzIHRleHRDb250ZW50IGluIHRoZSBsYXN0IGVsZW1lbnQgY2hpbGQsXG4gICAgLy8gdGhlIGJyb3dzZXIgbW92ZXMgdGhlIGN1cnNvciB0byB0aGUgbGFzdCBub24tZW1wdHkgdGV4dCBub2RlIGluc2lkZSB0aGlzIGVsZW1lbnQuXG4gICAgLy8gMy4gT3RoZXJ3aXNlIHRoZSBjdXJzb3IgaXMgbW92ZWQgdG8gdGhlIGVuZCBvZiB0aGUgdGFyZ2V0LlxuICAgIGxldCBpID0gb2Zmc2V0ID09PSB1bmRlZmluZWQgPyBub2RlLmNoaWxkTm9kZXMubGVuZ3RoIC0gMSA6IDA7XG4gICAgY29uc3Qgc3RlcCA9IG9mZnNldCA9PT0gdW5kZWZpbmVkID8gLTEgOiAxO1xuICAgIHdoaWxlKG9mZnNldCA9PT0gdW5kZWZpbmVkID8gaSA+PSAoaXNSb290ID8gTWF0aC5tYXgobm9kZS5jaGlsZE5vZGVzLmxlbmd0aCAtIDEsIDApIDogMCkgOiBpIDw9IG5vZGUuY2hpbGROb2Rlcy5sZW5ndGgpe1xuICAgICAgICBpZiAob2Zmc2V0ICYmIGkgPT09IG5vZGUuY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIGdpdmVuIG9mZnNldCBpcyBvdXQgb2YgYm91bmRzLicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGMgPSBub2RlLmNoaWxkTm9kZXMuaXRlbShpKTtcbiAgICAgICAgY29uc3QgdGV4dCA9IFN0cmluZyhjLnRleHRDb250ZW50KTtcbiAgICAgICAgaWYgKHRleHQubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAob2Zmc2V0ICE9PSB1bmRlZmluZWQgJiYgdGV4dC5sZW5ndGggPCBvZmZzZXQpIHtcbiAgICAgICAgICAgICAgICBvZmZzZXQgLT0gdGV4dC5sZW5ndGg7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGMubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmluZE5vZGVBdFRleHRPZmZzZXQoYywgb2Zmc2V0LCBmYWxzZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFRoZSBwcmUtY29tbWl0IGhvb2tzIGtlZXBzIGNoYW5naW5nIHRoaXNcbiAgICAgICAgICAgICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2tlbnRjZG9kZHMva2NkLXNjcmlwdHMvaXNzdWVzLzIxOFxuICAgICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb25lbHktaWZcbiAgICAgICAgICAgICAgICBpZiAoYy5ub2RlVHlwZSA9PT0gMykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZTogYyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogb2Zmc2V0ICE9PSBudWxsICYmIG9mZnNldCAhPT0gdW5kZWZpbmVkID8gb2Zmc2V0IDogYy5ub2RlVmFsdWUubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGkgKz0gc3RlcDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbm9kZSxcbiAgICAgICAgb2Zmc2V0OiBub2RlLmNoaWxkTm9kZXMubGVuZ3RoXG4gICAgfTtcbn1cblxuZXhwb3J0cy5yZXNvbHZlQ2FyZXRQb3NpdGlvbiA9IHJlc29sdmVDYXJldFBvc2l0aW9uO1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaLElBQUlBLEVBQUUsR0FBR0MsT0FBTyxDQUFDLHNCQUFzQixDQUFDO0FBQ3hDQSxPQUFPLENBQUMsdUNBQXVDLENBQUM7QUFDaEQsSUFBSUMsU0FBUyxHQUFHRCxPQUFPLENBQUMsZ0NBQWdDLENBQUM7QUFFekQsU0FBU0Usb0JBQW9CQSxDQUFDO0VBQUVDLE1BQU07RUFBRUMsSUFBSTtFQUFFQztBQUFPLENBQUMsRUFBRTtFQUNwRCxJQUFJSixTQUFTLENBQUNLLGVBQWUsQ0FBQ0gsTUFBTSxDQUFDLEVBQUU7SUFDbkMsT0FBTztNQUNIQyxJQUFJLEVBQUVELE1BQU07TUFDWkUsTUFBTSxFQUFFQSxNQUFNLEtBQUssSUFBSSxJQUFJQSxNQUFNLEtBQUtFLFNBQVMsR0FBR0YsTUFBTSxHQUFHTixFQUFFLENBQUNTLFVBQVUsQ0FBQ0wsTUFBTSxDQUFDLENBQUNNO0lBQ3JGLENBQUM7RUFDTCxDQUFDLE1BQU0sSUFBSUwsSUFBSSxFQUFFO0lBQ2IsT0FBTztNQUNIQSxJQUFJO01BQ0pDLE1BQU0sRUFBRUEsTUFBTSxLQUFLLElBQUksSUFBSUEsTUFBTSxLQUFLRSxTQUFTLEdBQUdGLE1BQU0sR0FBR0QsSUFBSSxDQUFDTSxRQUFRLEtBQUssQ0FBQyxHQUFHTixJQUFJLENBQUNPLFNBQVMsQ0FBQ0YsTUFBTSxHQUFHTCxJQUFJLENBQUNRLFVBQVUsQ0FBQ0g7SUFDN0gsQ0FBQztFQUNMO0VBQ0EsT0FBT0ksb0JBQW9CLENBQUNWLE1BQU0sRUFBRUUsTUFBTSxDQUFDO0FBQy9DO0FBQ0EsU0FBU1Esb0JBQW9CQSxDQUFDVCxJQUFJLEVBQUVDLE1BQU0sRUFBRVMsTUFBTSxHQUFHLElBQUksRUFBRTtFQUN2RDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJQyxDQUFDLEdBQUdWLE1BQU0sS0FBS0UsU0FBUyxHQUFHSCxJQUFJLENBQUNRLFVBQVUsQ0FBQ0gsTUFBTSxHQUFHLENBQUMsR0FBRyxDQUFDO0VBQzdELE1BQU1PLElBQUksR0FBR1gsTUFBTSxLQUFLRSxTQUFTLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQztFQUMxQyxPQUFNRixNQUFNLEtBQUtFLFNBQVMsR0FBR1EsQ0FBQyxLQUFLRCxNQUFNLEdBQUdHLElBQUksQ0FBQ0MsR0FBRyxDQUFDZCxJQUFJLENBQUNRLFVBQVUsQ0FBQ0gsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBR00sQ0FBQyxJQUFJWCxJQUFJLENBQUNRLFVBQVUsQ0FBQ0gsTUFBTSxFQUFDO0lBQ25ILElBQUlKLE1BQU0sSUFBSVUsQ0FBQyxLQUFLWCxJQUFJLENBQUNRLFVBQVUsQ0FBQ0gsTUFBTSxFQUFFO01BQ3hDLE1BQU0sSUFBSVUsS0FBSyxDQUFDLG9DQUFvQyxDQUFDO0lBQ3pEO0lBQ0EsTUFBTUMsQ0FBQyxHQUFHaEIsSUFBSSxDQUFDUSxVQUFVLENBQUNTLElBQUksQ0FBQ04sQ0FBQyxDQUFDO0lBQ2pDLE1BQU1PLElBQUksR0FBR0MsTUFBTSxDQUFDSCxDQUFDLENBQUNJLFdBQVcsQ0FBQztJQUNsQyxJQUFJRixJQUFJLENBQUNiLE1BQU0sRUFBRTtNQUNiLElBQUlKLE1BQU0sS0FBS0UsU0FBUyxJQUFJZSxJQUFJLENBQUNiLE1BQU0sR0FBR0osTUFBTSxFQUFFO1FBQzlDQSxNQUFNLElBQUlpQixJQUFJLENBQUNiLE1BQU07TUFDekIsQ0FBQyxNQUFNLElBQUlXLENBQUMsQ0FBQ1YsUUFBUSxLQUFLLENBQUMsRUFBRTtRQUN6QixPQUFPRyxvQkFBb0IsQ0FBQ08sQ0FBQyxFQUFFZixNQUFNLEVBQUUsS0FBSyxDQUFDO01BQ2pELENBQUMsTUFBTTtRQUNIO1FBQ0E7UUFDQSwyQkFBMkI7UUFDM0IsSUFBSWUsQ0FBQyxDQUFDVixRQUFRLEtBQUssQ0FBQyxFQUFFO1VBQ2xCLE9BQU87WUFDSE4sSUFBSSxFQUFFZ0IsQ0FBQztZQUNQZixNQUFNLEVBQUVBLE1BQU0sS0FBSyxJQUFJLElBQUlBLE1BQU0sS0FBS0UsU0FBUyxHQUFHRixNQUFNLEdBQUdlLENBQUMsQ0FBQ1QsU0FBUyxDQUFDRjtVQUMzRSxDQUFDO1FBQ0w7TUFDSjtJQUNKO0lBQ0FNLENBQUMsSUFBSUMsSUFBSTtFQUNiO0VBQ0EsT0FBTztJQUNIWixJQUFJO0lBQ0pDLE1BQU0sRUFBRUQsSUFBSSxDQUFDUSxVQUFVLENBQUNIO0VBQzVCLENBQUM7QUFDTDtBQUVBZ0IsT0FBTyxDQUFDdkIsb0JBQW9CLEdBQUdBLG9CQUFvQiIsImlnbm9yZUxpc3QiOltdfQ==