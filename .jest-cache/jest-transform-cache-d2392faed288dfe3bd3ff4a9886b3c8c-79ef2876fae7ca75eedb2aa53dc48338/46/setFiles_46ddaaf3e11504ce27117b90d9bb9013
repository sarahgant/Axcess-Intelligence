2e3fdb0fdb2633b6c244e7f3d2a22229
'use strict';

// It is not possible to create a real FileList programmatically.
// Therefore assigning `files` property with a programmatically created FileList results in an error.
// Just assigning the property (as per fireEvent) breaks the interweaving with the `value` property.
const fakeFiles = Symbol('files and value properties are mocked');
function restoreProperty(obj, prop, descriptor) {
  if (descriptor) {
    Object.defineProperty(obj, prop, descriptor);
  } else {
    // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
    delete obj[prop];
  }
}
function setFiles(el, files) {
  var _el_fakeFiles;
  (_el_fakeFiles = el[fakeFiles]) === null || _el_fakeFiles === undefined ? undefined : _el_fakeFiles.restore();
  const typeDescr = Object.getOwnPropertyDescriptor(el, 'type');
  const valueDescr = Object.getOwnPropertyDescriptor(el, 'value');
  const filesDescr = Object.getOwnPropertyDescriptor(el, 'files');
  function restore() {
    restoreProperty(el, 'type', typeDescr);
    restoreProperty(el, 'value', valueDescr);
    restoreProperty(el, 'files', filesDescr);
  }
  el[fakeFiles] = {
    restore
  };
  Object.defineProperties(el, {
    files: {
      configurable: true,
      get: () => files
    },
    value: {
      configurable: true,
      get: () => files.length ? `C:\\fakepath\\${files[0].name}` : '',
      set(v) {
        if (v === '') {
          restore();
        } else {
          var _valueDescr_set;
          valueDescr === null || valueDescr === undefined ? undefined : (_valueDescr_set = valueDescr.set) === null || _valueDescr_set === undefined ? undefined : _valueDescr_set.call(el, v);
        }
      }
    },
    type: {
      configurable: true,
      get: () => 'file',
      set(v) {
        if (v !== 'file') {
          restore();
          el.type = v;
        }
      }
    }
  });
}
exports.setFiles = setFiles;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmYWtlRmlsZXMiLCJTeW1ib2wiLCJyZXN0b3JlUHJvcGVydHkiLCJvYmoiLCJwcm9wIiwiZGVzY3JpcHRvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5Iiwic2V0RmlsZXMiLCJlbCIsImZpbGVzIiwiX2VsX2Zha2VGaWxlcyIsInVuZGVmaW5lZCIsInJlc3RvcmUiLCJ0eXBlRGVzY3IiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ2YWx1ZURlc2NyIiwiZmlsZXNEZXNjciIsImRlZmluZVByb3BlcnRpZXMiLCJjb25maWd1cmFibGUiLCJnZXQiLCJ2YWx1ZSIsImxlbmd0aCIsIm5hbWUiLCJzZXQiLCJ2IiwiX3ZhbHVlRGVzY3Jfc2V0IiwiY2FsbCIsInR5cGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsic2V0RmlsZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vLyBJdCBpcyBub3QgcG9zc2libGUgdG8gY3JlYXRlIGEgcmVhbCBGaWxlTGlzdCBwcm9ncmFtbWF0aWNhbGx5LlxuLy8gVGhlcmVmb3JlIGFzc2lnbmluZyBgZmlsZXNgIHByb3BlcnR5IHdpdGggYSBwcm9ncmFtbWF0aWNhbGx5IGNyZWF0ZWQgRmlsZUxpc3QgcmVzdWx0cyBpbiBhbiBlcnJvci5cbi8vIEp1c3QgYXNzaWduaW5nIHRoZSBwcm9wZXJ0eSAoYXMgcGVyIGZpcmVFdmVudCkgYnJlYWtzIHRoZSBpbnRlcndlYXZpbmcgd2l0aCB0aGUgYHZhbHVlYCBwcm9wZXJ0eS5cbmNvbnN0IGZha2VGaWxlcyA9IFN5bWJvbCgnZmlsZXMgYW5kIHZhbHVlIHByb3BlcnRpZXMgYXJlIG1vY2tlZCcpO1xuZnVuY3Rpb24gcmVzdG9yZVByb3BlcnR5KG9iaiwgcHJvcCwgZGVzY3JpcHRvcikge1xuICAgIGlmIChkZXNjcmlwdG9yKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIHByb3AsIGRlc2NyaXB0b3IpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZHluYW1pYy1kZWxldGVcbiAgICAgICAgZGVsZXRlIG9ialtwcm9wXTtcbiAgICB9XG59XG5mdW5jdGlvbiBzZXRGaWxlcyhlbCwgZmlsZXMpIHtcbiAgICB2YXIgX2VsX2Zha2VGaWxlcztcbiAgICAoX2VsX2Zha2VGaWxlcyA9IGVsW2Zha2VGaWxlc10pID09PSBudWxsIHx8IF9lbF9mYWtlRmlsZXMgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IF9lbF9mYWtlRmlsZXMucmVzdG9yZSgpO1xuICAgIGNvbnN0IHR5cGVEZXNjciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZWwsICd0eXBlJyk7XG4gICAgY29uc3QgdmFsdWVEZXNjciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZWwsICd2YWx1ZScpO1xuICAgIGNvbnN0IGZpbGVzRGVzY3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGVsLCAnZmlsZXMnKTtcbiAgICBmdW5jdGlvbiByZXN0b3JlKCkge1xuICAgICAgICByZXN0b3JlUHJvcGVydHkoZWwsICd0eXBlJywgdHlwZURlc2NyKTtcbiAgICAgICAgcmVzdG9yZVByb3BlcnR5KGVsLCAndmFsdWUnLCB2YWx1ZURlc2NyKTtcbiAgICAgICAgcmVzdG9yZVByb3BlcnR5KGVsLCAnZmlsZXMnLCBmaWxlc0Rlc2NyKTtcbiAgICB9XG4gICAgZWxbZmFrZUZpbGVzXSA9IHtcbiAgICAgICAgcmVzdG9yZVxuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZWwsIHtcbiAgICAgICAgZmlsZXM6IHtcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGdldDogKCk9PmZpbGVzXG4gICAgICAgIH0sXG4gICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICBnZXQ6ICgpPT5maWxlcy5sZW5ndGggPyBgQzpcXFxcZmFrZXBhdGhcXFxcJHtmaWxlc1swXS5uYW1lfWAgOiAnJyxcbiAgICAgICAgICAgIHNldCAodikge1xuICAgICAgICAgICAgICAgIGlmICh2ID09PSAnJykge1xuICAgICAgICAgICAgICAgICAgICByZXN0b3JlKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF92YWx1ZURlc2NyX3NldDtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVEZXNjciA9PT0gbnVsbCB8fCB2YWx1ZURlc2NyID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiAoX3ZhbHVlRGVzY3Jfc2V0ID0gdmFsdWVEZXNjci5zZXQpID09PSBudWxsIHx8IF92YWx1ZURlc2NyX3NldCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogX3ZhbHVlRGVzY3Jfc2V0LmNhbGwoZWwsIHYpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgZ2V0OiAoKT0+J2ZpbGUnLFxuICAgICAgICAgICAgc2V0ICh2KSB7XG4gICAgICAgICAgICAgICAgaWYgKHYgIT09ICdmaWxlJykge1xuICAgICAgICAgICAgICAgICAgICByZXN0b3JlKCk7XG4gICAgICAgICAgICAgICAgICAgIGVsLnR5cGUgPSB2O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5leHBvcnRzLnNldEZpbGVzID0gc2V0RmlsZXM7XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVo7QUFDQTtBQUNBO0FBQ0EsTUFBTUEsU0FBUyxHQUFHQyxNQUFNLENBQUMsdUNBQXVDLENBQUM7QUFDakUsU0FBU0MsZUFBZUEsQ0FBQ0MsR0FBRyxFQUFF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