0900865fac05aee6eaf9d7a5fdfd32af
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.queryByTitle = exports.queryAllByTitle = exports.getByTitle = exports.getAllByTitle = exports.findByTitle = exports.findAllByTitle = void 0;
var _queryHelpers = require("../query-helpers");
var _helpers = require("../helpers");
var _allUtils = require("./all-utils");
const isSvgTitle = node => node.tagName.toLowerCase() === 'title' && node.parentElement?.tagName.toLowerCase() === 'svg';
const queryAllByTitle = (container, text, {
  exact = true,
  collapseWhitespace,
  trim,
  normalizer
} = {}) => {
  (0, _helpers.checkContainerType)(container);
  const matcher = exact ? _allUtils.matches : _allUtils.fuzzyMatches;
  const matchNormalizer = (0, _allUtils.makeNormalizer)({
    collapseWhitespace,
    trim,
    normalizer
  });
  return Array.from(container.querySelectorAll('[title], svg > title')).filter(node => matcher(node.getAttribute('title'), node, text, matchNormalizer) || isSvgTitle(node) && matcher((0, _allUtils.getNodeText)(node), node, text, matchNormalizer));
};
const getMultipleError = (c, title) => `Found multiple elements with the title: ${title}.`;
const getMissingError = (c, title) => `Unable to find an element with the title: ${title}.`;
const queryAllByTitleWithSuggestions = exports.queryAllByTitle = (0, _queryHelpers.wrapAllByQueryWithSuggestion)(queryAllByTitle, queryAllByTitle.name, 'queryAll');
const [queryByTitle, getAllByTitle, getByTitle, findAllByTitle, findByTitle] = (0, _allUtils.buildQueries)(queryAllByTitle, getMultipleError, getMissingError);
exports.findByTitle = findByTitle;
exports.findAllByTitle = findAllByTitle;
exports.getByTitle = getByTitle;
exports.getAllByTitle = getAllByTitle;
exports.queryByTitle = queryByTitle;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInF1ZXJ5QnlUaXRsZSIsInF1ZXJ5QWxsQnlUaXRsZSIsImdldEJ5VGl0bGUiLCJnZXRBbGxCeVRpdGxlIiwiZmluZEJ5VGl0bGUiLCJmaW5kQWxsQnlUaXRsZSIsIl9xdWVyeUhlbHBlcnMiLCJyZXF1aXJlIiwiX2hlbHBlcnMiLCJfYWxsVXRpbHMiLCJpc1N2Z1RpdGxlIiwibm9kZSIsInRhZ05hbWUiLCJ0b0xvd2VyQ2FzZSIsInBhcmVudEVsZW1lbnQiLCJjb250YWluZXIiLCJ0ZXh0IiwiZXhhY3QiLCJjb2xsYXBzZVdoaXRlc3BhY2UiLCJ0cmltIiwibm9ybWFsaXplciIsImNoZWNrQ29udGFpbmVyVHlwZSIsIm1hdGNoZXIiLCJtYXRjaGVzIiwiZnV6enlNYXRjaGVzIiwibWF0Y2hOb3JtYWxpemVyIiwibWFrZU5vcm1hbGl6ZXIiLCJBcnJheSIsImZyb20iLCJxdWVyeVNlbGVjdG9yQWxsIiwiZmlsdGVyIiwiZ2V0QXR0cmlidXRlIiwiZ2V0Tm9kZVRleHQiLCJnZXRNdWx0aXBsZUVycm9yIiwiYyIsInRpdGxlIiwiZ2V0TWlzc2luZ0Vycm9yIiwicXVlcnlBbGxCeVRpdGxlV2l0aFN1Z2dlc3Rpb25zIiwid3JhcEFsbEJ5UXVlcnlXaXRoU3VnZ2VzdGlvbiIsIm5hbWUiLCJidWlsZFF1ZXJpZXMiXSwic291cmNlcyI6WyJ0aXRsZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMucXVlcnlCeVRpdGxlID0gZXhwb3J0cy5xdWVyeUFsbEJ5VGl0bGUgPSBleHBvcnRzLmdldEJ5VGl0bGUgPSBleHBvcnRzLmdldEFsbEJ5VGl0bGUgPSBleHBvcnRzLmZpbmRCeVRpdGxlID0gZXhwb3J0cy5maW5kQWxsQnlUaXRsZSA9IHZvaWQgMDtcbnZhciBfcXVlcnlIZWxwZXJzID0gcmVxdWlyZShcIi4uL3F1ZXJ5LWhlbHBlcnNcIik7XG52YXIgX2hlbHBlcnMgPSByZXF1aXJlKFwiLi4vaGVscGVyc1wiKTtcbnZhciBfYWxsVXRpbHMgPSByZXF1aXJlKFwiLi9hbGwtdXRpbHNcIik7XG5jb25zdCBpc1N2Z1RpdGxlID0gbm9kZSA9PiBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3RpdGxlJyAmJiBub2RlLnBhcmVudEVsZW1lbnQ/LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3N2Zyc7XG5jb25zdCBxdWVyeUFsbEJ5VGl0bGUgPSAoY29udGFpbmVyLCB0ZXh0LCB7XG4gIGV4YWN0ID0gdHJ1ZSxcbiAgY29sbGFwc2VXaGl0ZXNwYWNlLFxuICB0cmltLFxuICBub3JtYWxpemVyXG59ID0ge30pID0+IHtcbiAgKDAsIF9oZWxwZXJzLmNoZWNrQ29udGFpbmVyVHlwZSkoY29udGFpbmVyKTtcbiAgY29uc3QgbWF0Y2hlciA9IGV4YWN0ID8gX2FsbFV0aWxzLm1hdGNoZXMgOiBfYWxsVXRpbHMuZnV6enlNYXRjaGVzO1xuICBjb25zdCBtYXRjaE5vcm1hbGl6ZXIgPSAoMCwgX2FsbFV0aWxzLm1ha2VOb3JtYWxpemVyKSh7XG4gICAgY29sbGFwc2VXaGl0ZXNwYWNlLFxuICAgIHRyaW0sXG4gICAgbm9ybWFsaXplclxuICB9KTtcbiAgcmV0dXJuIEFycmF5LmZyb20oY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJ1t0aXRsZV0sIHN2ZyA+IHRpdGxlJykpLmZpbHRlcihub2RlID0+IG1hdGNoZXIobm9kZS5nZXRBdHRyaWJ1dGUoJ3RpdGxlJyksIG5vZGUsIHRleHQsIG1hdGNoTm9ybWFsaXplcikgfHwgaXNTdmdUaXRsZShub2RlKSAmJiBtYXRjaGVyKCgwLCBfYWxsVXRpbHMuZ2V0Tm9kZVRleHQpKG5vZGUpLCBub2RlLCB0ZXh0LCBtYXRjaE5vcm1hbGl6ZXIpKTtcbn07XG5jb25zdCBnZXRNdWx0aXBsZUVycm9yID0gKGMsIHRpdGxlKSA9PiBgRm91bmQgbXVsdGlwbGUgZWxlbWVudHMgd2l0aCB0aGUgdGl0bGU6ICR7dGl0bGV9LmA7XG5jb25zdCBnZXRNaXNzaW5nRXJyb3IgPSAoYywgdGl0bGUpID0+IGBVbmFibGUgdG8gZmluZCBhbiBlbGVtZW50IHdpdGggdGhlIHRpdGxlOiAke3RpdGxlfS5gO1xuY29uc3QgcXVlcnlBbGxCeVRpdGxlV2l0aFN1Z2dlc3Rpb25zID0gZXhwb3J0cy5xdWVyeUFsbEJ5VGl0bGUgPSAoMCwgX3F1ZXJ5SGVscGVycy53cmFwQWxsQnlRdWVyeVdpdGhTdWdnZXN0aW9uKShxdWVyeUFsbEJ5VGl0bGUsIHF1ZXJ5QWxsQnlUaXRsZS5uYW1lLCAncXVlcnlBbGwnKTtcbmNvbnN0IFtxdWVyeUJ5VGl0bGUsIGdldEFsbEJ5VGl0bGUsIGdldEJ5VGl0bGUsIGZpbmRBbGxCeVRpdGxlLCBmaW5kQnlUaXRsZV0gPSAoMCwgX2FsbFV0aWxzLmJ1aWxkUXVlcmllcykocXVlcnlBbGxCeVRpdGxlLCBnZXRNdWx0aXBsZUVycm9yLCBnZXRNaXNzaW5nRXJyb3IpO1xuZXhwb3J0cy5maW5kQnlUaXRsZSA9IGZpbmRCeVRpdGxlO1xuZXhwb3J0cy5maW5kQWxsQnlUaXRsZSA9IGZpbmRBbGxCeVRpdGxlO1xuZXhwb3J0cy5nZXRCeVRpdGxlID0gZ2V0QnlUaXRsZTtcbmV4cG9ydHMuZ2V0QWxsQnlUaXRsZSA9IGdldEFsbEJ5VGl0bGU7XG5leHBvcnRzLnF1ZXJ5QnlUaXRsZSA9IHF1ZXJ5QnlUaXRsZTsiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQzNDQyxLQUFLLEVBQUU7QUFDVCxDQUFDLENBQUM7QUFDRkQsT0FBTyxDQUFDRSxZQUFZLEdBQUdGLE9BQU8sQ0FBQ0csZUFBZSxHQUFHSCxPQUFPLENBQUNJLFVBQVUsR0FBR0osT0FBTyxDQUFDSyxhQUFhLEdBQUdMLE9BQU8sQ0FBQ00s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