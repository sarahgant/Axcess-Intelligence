946bb2f3b748997dd3e85520f0ed7ec1
'use strict';

require('../../utils/dataTransfer/Clipboard.js');
var isContentEditable = require('../../utils/edit/isContentEditable.js');
var selection = require('../../utils/focus/selection.js');

// The browser implementation seems to have changed.
// When focus is inside <input type="text"/>,
// Chrome updates Selection to be collapsed at the position of the input element.
// TODO: update implementation to match that of current browsers
/**
 * Reset the Document Selection when moving focus into an element
 * with own selection implementation.
 */
function updateSelectionOnFocus(element) {
  const selection$1 = element.ownerDocument.getSelection();
  /* istanbul ignore if */
  if (!(selection$1 === null || selection$1 === undefined ? undefined : selection$1.focusNode)) {
    return;
  }
  // If the focus moves inside an element with own selection implementation,
  // the document selection will be this element.
  // But if the focused element is inside a contenteditable,
  // 1) a collapsed selection will be retained.
  // 2) other selections will be replaced by a cursor
  //  2.a) at the start of the first child if it is a text node
  //  2.b) at the start of the contenteditable.
  if (selection.hasOwnSelection(element)) {
    const contenteditable = isContentEditable.getContentEditable(selection$1.focusNode);
    if (contenteditable) {
      if (!selection$1.isCollapsed) {
        var _contenteditable_firstChild;
        const focusNode = ((_contenteditable_firstChild = contenteditable.firstChild) === null || _contenteditable_firstChild === undefined ? undefined : _contenteditable_firstChild.nodeType) === 3 ? contenteditable.firstChild : contenteditable;
        selection$1.setBaseAndExtent(focusNode, 0, focusNode, 0);
      }
    } else {
      selection$1.setBaseAndExtent(element, 0, element, 0);
    }
  }
}
exports.updateSelectionOnFocus = updateSelectionOnFocus;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1aXJlIiwiaXNDb250ZW50RWRpdGFibGUiLCJzZWxlY3Rpb24iLCJ1cGRhdGVTZWxlY3Rpb25PbkZvY3VzIiwiZWxlbWVudCIsInNlbGVjdGlvbiQxIiwib3duZXJEb2N1bWVudCIsImdldFNlbGVjdGlvbiIsInVuZGVmaW5lZCIsImZvY3VzTm9kZSIsImhhc093blNlbGVjdGlvbiIsImNvbnRlbnRlZGl0YWJsZSIsImdldENvbnRlbnRFZGl0YWJsZSIsImlzQ29sbGFwc2VkIiwiX2NvbnRlbnRlZGl0YWJsZV9maXJzdENoaWxkIiwiZmlyc3RDaGlsZCIsIm5vZGVUeXBlIiwic2V0QmFzZUFuZEV4dGVudCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJ1cGRhdGVTZWxlY3Rpb25PbkZvY3VzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxucmVxdWlyZSgnLi4vLi4vdXRpbHMvZGF0YVRyYW5zZmVyL0NsaXBib2FyZC5qcycpO1xudmFyIGlzQ29udGVudEVkaXRhYmxlID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvZWRpdC9pc0NvbnRlbnRFZGl0YWJsZS5qcycpO1xudmFyIHNlbGVjdGlvbiA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2ZvY3VzL3NlbGVjdGlvbi5qcycpO1xuXG4vLyBUaGUgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBzZWVtcyB0byBoYXZlIGNoYW5nZWQuXG4vLyBXaGVuIGZvY3VzIGlzIGluc2lkZSA8aW5wdXQgdHlwZT1cInRleHRcIi8+LFxuLy8gQ2hyb21lIHVwZGF0ZXMgU2VsZWN0aW9uIHRvIGJlIGNvbGxhcHNlZCBhdCB0aGUgcG9zaXRpb24gb2YgdGhlIGlucHV0IGVsZW1lbnQuXG4vLyBUT0RPOiB1cGRhdGUgaW1wbGVtZW50YXRpb24gdG8gbWF0Y2ggdGhhdCBvZiBjdXJyZW50IGJyb3dzZXJzXG4vKipcbiAqIFJlc2V0IHRoZSBEb2N1bWVudCBTZWxlY3Rpb24gd2hlbiBtb3ZpbmcgZm9jdXMgaW50byBhbiBlbGVtZW50XG4gKiB3aXRoIG93biBzZWxlY3Rpb24gaW1wbGVtZW50YXRpb24uXG4gKi8gZnVuY3Rpb24gdXBkYXRlU2VsZWN0aW9uT25Gb2N1cyhlbGVtZW50KSB7XG4gICAgY29uc3Qgc2VsZWN0aW9uJDEgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZ2V0U2VsZWN0aW9uKCk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovIGlmICghKHNlbGVjdGlvbiQxID09PSBudWxsIHx8IHNlbGVjdGlvbiQxID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZWxlY3Rpb24kMS5mb2N1c05vZGUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gSWYgdGhlIGZvY3VzIG1vdmVzIGluc2lkZSBhbiBlbGVtZW50IHdpdGggb3duIHNlbGVjdGlvbiBpbXBsZW1lbnRhdGlvbixcbiAgICAvLyB0aGUgZG9jdW1lbnQgc2VsZWN0aW9uIHdpbGwgYmUgdGhpcyBlbGVtZW50LlxuICAgIC8vIEJ1dCBpZiB0aGUgZm9jdXNlZCBlbGVtZW50IGlzIGluc2lkZSBhIGNvbnRlbnRlZGl0YWJsZSxcbiAgICAvLyAxKSBhIGNvbGxhcHNlZCBzZWxlY3Rpb24gd2lsbCBiZSByZXRhaW5lZC5cbiAgICAvLyAyKSBvdGhlciBzZWxlY3Rpb25zIHdpbGwgYmUgcmVwbGFjZWQgYnkgYSBjdXJzb3JcbiAgICAvLyAgMi5hKSBhdCB0aGUgc3RhcnQgb2YgdGhlIGZpcnN0IGNoaWxkIGlmIGl0IGlzIGEgdGV4dCBub2RlXG4gICAgLy8gIDIuYikgYXQgdGhlIHN0YXJ0IG9mIHRoZSBjb250ZW50ZWRpdGFibGUuXG4gICAgaWYgKHNlbGVjdGlvbi5oYXNPd25TZWxlY3Rpb24oZWxlbWVudCkpIHtcbiAgICAgICAgY29uc3QgY29udGVudGVkaXRhYmxlID0gaXNDb250ZW50RWRpdGFibGUuZ2V0Q29udGVudEVkaXRhYmxlKHNlbGVjdGlvbiQxLmZvY3VzTm9kZSk7XG4gICAgICAgIGlmIChjb250ZW50ZWRpdGFibGUpIHtcbiAgICAgICAgICAgIGlmICghc2VsZWN0aW9uJDEuaXNDb2xsYXBzZWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2NvbnRlbnRlZGl0YWJsZV9maXJzdENoaWxkO1xuICAgICAgICAgICAgICAgIGNvbnN0IGZvY3VzTm9kZSA9ICgoX2NvbnRlbnRlZGl0YWJsZV9maXJzdENoaWxkID0gY29udGVudGVkaXRhYmxlLmZpcnN0Q2hpbGQpID09PSBudWxsIHx8IF9jb250ZW50ZWRpdGFibGVfZmlyc3RDaGlsZCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogX2NvbnRlbnRlZGl0YWJsZV9maXJzdENoaWxkLm5vZGVUeXBlKSA9PT0gMyA/IGNvbnRlbnRlZGl0YWJsZS5maXJzdENoaWxkIDogY29udGVudGVkaXRhYmxlO1xuICAgICAgICAgICAgICAgIHNlbGVjdGlvbiQxLnNldEJhc2VBbmRFeHRlbnQoZm9jdXNOb2RlLCAwLCBmb2N1c05vZGUsIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZWN0aW9uJDEuc2V0QmFzZUFuZEV4dGVudChlbGVtZW50LCAwLCBlbGVtZW50LCAwKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0cy51cGRhdGVTZWxlY3Rpb25PbkZvY3VzID0gdXBkYXRlU2VsZWN0aW9uT25Gb2N1cztcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWkEsT0FBTyxDQUFDLHVDQUF1QyxDQUFDO0FBQ2hELElBQUlDLGlCQUFpQixHQUFHRCxPQUFPLENBQUMsdUNBQXVDLENBQUM7QUFDeEUsSUFBSUUsU0FBUyxHQUFHRixPQUFPLENBQUMsZ0NBQWdDLENBQUM7O0FBRXpEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBSSxTQUFTRyxzQkFBc0JBLENBQUNDLE9BQU8sRUFBRTtFQUN6QyxNQUFNQyxXQUFXLEdBQUdELE9BQU8sQ0FBQ0UsYUFBYSxDQUFDQyxZQUFZLENBQUMsQ0FBQztFQUN4RDtFQUF5QixJQUFJLEVBQUVGLFdBQVcsS0FBSyxJQUFJLElBQUlBLFdBQVcsS0FBS0csU0FBUyxHQUFHQSxTQUFTLEdBQUdILFdBQVcsQ0FBQ0ksU0FBUyxDQUFDLEVBQUU7SUFDbkg7RUFDSjtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSVAsU0FBUyxDQUFDUSxlQUFlLENBQUNOLE9BQU8sQ0FBQyxFQUFFO0lBQ3BDLE1BQU1PLGVBQWUsR0FBR1YsaUJBQWlCLENBQUNXLGtCQUFrQixDQUFDUCxXQUFXLENBQUNJLFNBQVMsQ0FBQztJQUNuRixJQUFJRSxlQUFlLEVBQUU7TUFDakIsSUFBSSxDQUFDTixXQUFXLENBQUNRLFdBQVcsRUFBRTtRQUMxQixJQUFJQywyQkFBMkI7UUFDL0IsTUFBTUwsU0FBUyxHQUFHLENBQUMsQ0FBQ0ssMkJBQTJCLEdBQUdILGVBQWUsQ0FBQ0ksVUFBVSxNQUFNLElBQUksSUFBSUQsMkJBQTJCLEtBQUtOLFNBQVMsR0FBR0EsU0FBUyxHQUFHTSwyQkFBMkIsQ0FBQ0UsUUFBUSxNQUFNLENBQUMsR0FBR0wsZUFBZSxDQUFDSSxVQUFVLEdBQUdKLGVBQWU7UUFDNU9OLFdBQVcsQ0FBQ1ksZ0JBQWdCLENBQUNSLFNBQVMsRUFBRSxDQUFDLEVBQUVBLFNBQVMsRUFBRSxDQUFDLENBQUM7TUFDNUQ7SUFDSixDQUFDLE1BQU07TUFDSEosV0FBVyxDQUFDWSxnQkFBZ0IsQ0FBQ2IsT0FBTyxFQUFFLENBQUMsRUFBRUEsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUN4RDtFQUNKO0FBQ0o7QUFFQWMsT0FBTyxDQUFDZixzQkFBc0IsR0FBR0Esc0JBQXNCIiwiaWdub3JlTGlzdCI6W119