073a26d75e631d920e4797b23f1593fa
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatMessage = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const React = __importStar(require("react"));
const utils_1 = require("../../lib/utils");
const ChatMessage = ({ message, isUser, isStreaming = false, citations = [], timestamp, onCopy, onFeedback, feedbackValue, }) => {
    const [showCopyToast, setShowCopyToast] = React.useState(false);
    // Handle copy to clipboard
    const handleCopy = async () => {
        try {
            await navigator.clipboard.writeText(message);
            onCopy?.();
            setShowCopyToast(true);
            setTimeout(() => setShowCopyToast(false), 2000);
        }
        catch (error) {
            console.error("Failed to copy message:", error);
        }
    };
    // Handle feedback
    const handleFeedback = (type) => {
        onFeedback?.(type);
    };
    // Process message with citations
    const processMessageWithCitations = (text) => {
        if (citations.length === 0)
            return text;
        let processedText = text;
        citations.forEach((citation, index) => {
            const citationPlaceholder = `[${index + 1}]`;
            const citationLink = ((0, jsx_runtime_1.jsx)("a", { href: citation.url, target: "_blank", rel: "noopener noreferrer", className: "text-blue-600 underline hover:text-blue-800 font-medium", title: `Source: ${citation.text}`, children: citation.text }, index));
            // Note: This is a simplified implementation. In a real app, you'd want to use a proper
            // text processing library to handle citation replacement with React elements
        });
        return processedText;
    };
    return ((0, jsx_runtime_1.jsx)("div", { className: (0, utils_1.cn)("flex w-full mb-4", isUser ? "justify-end" : "justify-start"), role: "region", "aria-label": isUser ? "Your message" : "AI assistant message", children: (0, jsx_runtime_1.jsxs)("div", { className: (0, utils_1.cn)("max-w-[85%] rounded-lg px-4 py-3 text-sm", isUser
                ? "bg-primary text-primary-foreground ml-auto"
                : "bg-muted text-muted-foreground mr-auto"), children: [(0, jsx_runtime_1.jsxs)("div", { className: "whitespace-pre-wrap break-words", children: [processMessageWithCitations(message), isStreaming && ((0, jsx_runtime_1.jsx)("span", { className: "inline-block w-2 h-4 ml-1 bg-current animate-pulse" }))] }), citations.length > 0 && ((0, jsx_runtime_1.jsxs)("div", { className: "mt-3 pt-3 border-t border-border/20", children: [(0, jsx_runtime_1.jsx)("div", { className: "text-xs font-medium mb-2 opacity-75", children: "Sources:" }), (0, jsx_runtime_1.jsx)("div", { className: "space-y-1", children: citations.map((citation, index) => ((0, jsx_runtime_1.jsx)("div", { children: (0, jsx_runtime_1.jsx)("a", { href: citation.url, target: "_blank", rel: "noopener noreferrer", className: "text-blue-600 underline hover:text-blue-800 text-xs font-medium", children: citation.text }) }, index))) })] })), timestamp && ((0, jsx_runtime_1.jsx)("div", { className: "mt-2 text-xs opacity-50", children: timestamp.toLocaleTimeString([], {
                        hour: "2-digit",
                        minute: "2-digit"
                    }) })), !isUser && !isStreaming && ((0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-2 mt-3 pt-3 border-t border-border/20", children: [(0, jsx_runtime_1.jsxs)("button", { onClick: handleCopy, className: "inline-flex items-center gap-1 px-2 py-1 text-xs rounded hover:bg-background/50 transition-colors", "aria-label": "Copy message", children: [(0, jsx_runtime_1.jsx)("svg", { className: "w-3 h-3", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: (0, jsx_runtime_1.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" }) }), "Copy"] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-1", children: [(0, jsx_runtime_1.jsx)("button", { onClick: () => handleFeedback("up"), className: (0, utils_1.cn)("inline-flex items-center p-1 rounded hover:bg-background/50 transition-colors", feedbackValue === "up" && "text-green-600"), "aria-label": "Thumbs up", children: (0, jsx_runtime_1.jsx)("svg", { className: "w-3 h-3", fill: feedbackValue === "up" ? "currentColor" : "none", stroke: "currentColor", viewBox: "0 0 24 24", children: (0, jsx_runtime_1.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M14 10h4.764a2 2 0 011.789 2.894l-3.5 7A2 2 0 0115.263 21h-4.017c-.163 0-.326-.02-.485-.06L7 20m7-10V8a2 2 0 00-2-2h-.095c-.5 0-.905.405-.905.905 0 .714-.211 1.412-.608 2.006L7 11v9m7-10h-2M7 20H5a2 2 0 01-2-2v-6a2 2 0 012-2h2.5" }) }) }), (0, jsx_runtime_1.jsx)("button", { onClick: () => handleFeedback("down"), className: (0, utils_1.cn)("inline-flex items-center p-1 rounded hover:bg-background/50 transition-colors", feedbackValue === "down" && "text-red-600"), "aria-label": "Thumbs down", children: (0, jsx_runtime_1.jsx)("svg", { className: "w-3 h-3", fill: feedbackValue === "down" ? "currentColor" : "none", stroke: "currentColor", viewBox: "0 0 24 24", children: (0, jsx_runtime_1.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M10 14H5.236a2 2 0 01-1.789-2.894l3.5-7A2 2 0 018.736 3h4.018c.163 0 .326.02.485.06L17 4m-7 10v2a2 2 0 002 2h.095c.5 0 .905-.405.905-.905 0-.714.211-1.412.608-2.006L17 13V4m-7 10h2M17 4h2a2 2 0 012 2v6a2 2 0 01-2 2h-2.5" }) }) })] })] })), showCopyToast && ((0, jsx_runtime_1.jsx)("div", { className: "absolute bottom-0 left-1/2 transform -translate-x-1/2 translate-y-full mt-2 px-3 py-1 bg-gray-900 text-white text-xs rounded shadow-lg", children: "Copied to clipboard" }))] }) }));
};
exports.ChatMessage = ChatMessage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,