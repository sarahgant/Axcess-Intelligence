2d5514a6acb752b79f78ff45ceaad0f9
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getQueriesForElement = getQueriesForElement;
var defaultQueries = _interopRequireWildcard(require("./queries"));
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function (e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != typeof e && "function" != typeof e) return {
    default: e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
/**
 * @typedef {{[key: string]: Function}} FuncMap
 */

/**
 * @param {HTMLElement} element container
 * @param {FuncMap} queries object of functions
 * @param {Object} initialValue for reducer
 * @returns {FuncMap} returns object of functions bound to container
 */
function getQueriesForElement(element, queries = defaultQueries, initialValue = {}) {
  return Object.keys(queries).reduce((helpers, key) => {
    const fn = queries[key];
    helpers[key] = fn.bind(null, element);
    return helpers;
  }, initialValue);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldFF1ZXJpZXNGb3JFbGVtZW50IiwiZGVmYXVsdFF1ZXJpZXMiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJlIiwiV2Vha01hcCIsInIiLCJ0IiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJuIiwiX19wcm90b19fIiwiYSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInUiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpIiwic2V0IiwiZWxlbWVudCIsInF1ZXJpZXMiLCJpbml0aWFsVmFsdWUiLCJrZXlzIiwicmVkdWNlIiwiaGVscGVycyIsImtleSIsImZuIiwiYmluZCJdLCJzb3VyY2VzIjpbImdldC1xdWVyaWVzLWZvci1lbGVtZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5nZXRRdWVyaWVzRm9yRWxlbWVudCA9IGdldFF1ZXJpZXNGb3JFbGVtZW50O1xudmFyIGRlZmF1bHRRdWVyaWVzID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vcXVlcmllc1wiKSk7XG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoZSkgeyBpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiBXZWFrTWFwKSByZXR1cm4gbnVsbDsgdmFyIHIgPSBuZXcgV2Vha01hcCgpLCB0ID0gbmV3IFdlYWtNYXAoKTsgcmV0dXJuIChfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiAoZSkgeyByZXR1cm4gZSA/IHQgOiByOyB9KShlKTsgfVxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoZSwgcikgeyBpZiAoIXIgJiYgZSAmJiBlLl9fZXNNb2R1bGUpIHJldHVybiBlOyBpZiAobnVsbCA9PT0gZSB8fCBcIm9iamVjdFwiICE9IHR5cGVvZiBlICYmIFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSkgcmV0dXJuIHsgZGVmYXVsdDogZSB9OyB2YXIgdCA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShyKTsgaWYgKHQgJiYgdC5oYXMoZSkpIHJldHVybiB0LmdldChlKTsgdmFyIG4gPSB7IF9fcHJvdG9fXzogbnVsbCB9LCBhID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIHUgaW4gZSkgaWYgKFwiZGVmYXVsdFwiICE9PSB1ICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLCB1KSkgeyB2YXIgaSA9IGEgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIHUpIDogbnVsbDsgaSAmJiAoaS5nZXQgfHwgaS5zZXQpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sIHUsIGkpIDogblt1XSA9IGVbdV07IH0gcmV0dXJuIG4uZGVmYXVsdCA9IGUsIHQgJiYgdC5zZXQoZSwgbiksIG47IH1cbi8qKlxuICogQHR5cGVkZWYge3tba2V5OiBzdHJpbmddOiBGdW5jdGlvbn19IEZ1bmNNYXBcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgY29udGFpbmVyXG4gKiBAcGFyYW0ge0Z1bmNNYXB9IHF1ZXJpZXMgb2JqZWN0IG9mIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtPYmplY3R9IGluaXRpYWxWYWx1ZSBmb3IgcmVkdWNlclxuICogQHJldHVybnMge0Z1bmNNYXB9IHJldHVybnMgb2JqZWN0IG9mIGZ1bmN0aW9ucyBib3VuZCB0byBjb250YWluZXJcbiAqL1xuZnVuY3Rpb24gZ2V0UXVlcmllc0ZvckVsZW1lbnQoZWxlbWVudCwgcXVlcmllcyA9IGRlZmF1bHRRdWVyaWVzLCBpbml0aWFsVmFsdWUgPSB7fSkge1xuICByZXR1cm4gT2JqZWN0LmtleXMocXVlcmllcykucmVkdWNlKChoZWxwZXJzLCBrZXkpID0+IHtcbiAgICBjb25zdCBmbiA9IHF1ZXJpZXNba2V5XTtcbiAgICBoZWxwZXJzW2tleV0gPSBmbi5iaW5kKG51bGwsIGVsZW1lbnQpO1xuICAgIHJldHVybiBoZWxwZXJzO1xuICB9LCBpbml0aWFsVmFsdWUpO1xufSJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FBQztBQUNGRCxPQUFPLENBQUNFLG9CQUFvQixHQUFHQSxvQkFBb0I7QUFDbkQsSUFBSUMsY0FBYyxHQUFHQyx1QkFBdUIsQ0FBQ0MsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ2xFLFNBQVNDLHdCQUF3QkEsQ0FBQ0MsQ0FBQyxFQUFFO0VBQUUsSUFBSSxVQUFVLElBQUksT0FBT0MsT0FBTyxFQUFFLE9BQU8sSUFBSTtFQUFFLElBQUlDLENBQUMsR0FBRyxJQUFJRCxPQUFPLENBQUMsQ0FBQztJQUFFRSxDQUFDLEdBQUcsSUFBSUYsT0FBTyxDQUFDLENBQUM7RUFBRSxPQUFPLENBQUNGLHdCQUF3QixHQUFHLFNBQUFBLENBQVVDLENBQUMsRUFBRTtJQUFFLE9BQU9BLENBQUMsR0FBR0csQ0FBQyxHQUFHRCxDQUFDO0VBQUUsQ0FBQyxFQUFFRixDQUFDLENBQUM7QUFBRTtBQUMzTSxTQUFTSCx1QkFBdUJBLENBQUNHLENBQUMsRUFBRUUsQ0FBQyxFQUFFO0VBQUUsSUFBSSxDQUFDQSxDQUFDLElBQUlGLENBQUMsSUFBSUEsQ0FBQyxDQUFDSSxVQUFVLEVBQUUsT0FBT0osQ0FBQztFQUFFLElBQUksSUFBSSxLQUFLQSxDQUFDLElBQUksUUFBUSxJQUFJLE9BQU9BLENBQUMsSUFBSSxVQUFVLElBQUksT0FBT0EsQ0FBQyxFQUFFLE9BQU87SUFBRUssT0FBTyxFQUFFTDtFQUFFLENBQUM7RUFBRSxJQUFJRyxDQUFDLEdBQUdKLHdCQUF3QixDQUFDRyxDQUFDLENBQUM7RUFBRSxJQUFJQyxDQUFDLElBQUlBLENBQUMsQ0FBQ0csR0FBRyxDQUFDTixDQUFDLENBQUMsRUFBRSxPQUFPRyxDQUFDLENBQUNJLEdBQUcsQ0FBQ1AsQ0FBQyxDQUFDO0VBQUUsSUFBSVEsQ0FBQyxHQUFHO01BQUVDLFNBQVMsRUFBRTtJQUFLLENBQUM7SUFBRUMsQ0FBQyxHQUFHbkIsTUFBTSxDQUFDQyxjQUFjLElBQUlELE1BQU0sQ0FBQ29CLHdCQUF3QjtFQUFFLEtBQUssSUFBSUMsQ0FBQyxJQUFJWixDQUFDLEVBQUUsSUFBSSxTQUFTLEtBQUtZLENBQUMsSUFBSXJCLE1BQU0sQ0FBQ3NCLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNmLENBQUMsRUFBRVksQ0FBQyxDQUFDLEVBQUU7SUFBRSxJQUFJSSxDQUFDLEdBQUdOLENBQUMsR0FBR25CLE1BQU0sQ0FBQ29CLHdCQUF3QixDQUFDWCxDQUFDLEVBQUVZLENBQUMsQ0FBQyxHQUFHLElBQUk7SUFBRUksQ0FBQyxLQUFLQSxDQUFDLENBQUNULEdBQUcsSUFBSVMsQ0FBQyxDQUFDQyxHQUFHLENBQUMsR0FBRzFCLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDZ0IsQ0FBQyxFQUFFSSxDQUFDLEVBQUVJLENBQUMsQ0FBQyxHQUFHUixDQUFDLENBQUNJLENBQUMsQ0FBQyxHQUFHWixDQUFDLENBQUNZLENBQUMsQ0FBQztFQUFFO0VBQUUsT0FBT0osQ0FBQyxDQUFDSCxPQUFPLEdBQUdMLENBQUMsRUFBRUcsQ0FBQyxJQUFJQSxDQUFDLENBQUNjLEdBQUcsQ0FBQ2pCLENBQUMsRUFBRVEsQ0FBQyxDQUFDLEVBQUVBLENBQUM7QUFBRTtBQUNobEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNiLG9CQUFvQkEsQ0FBQ3VCLE9BQU8sRUFBRUMsT0FBTyxHQUFHdkIsY0FBYyxFQUFFd0IsWUFBWSxHQUFHLENBQUMsQ0FBQyxFQUFFO0VBQ2xGLE9BQU83QixNQUFNLENBQUM4QixJQUFJLENBQUNGLE9BQU8sQ0FBQyxDQUFDRyxNQUFNLENBQUMsQ0FBQ0MsT0FBTyxFQUFFQyxHQUFHLEtBQUs7SUFDbkQsTUFBTUMsRUFBRSxHQUFHTixPQUFPLENBQUNLLEdBQUcsQ0FBQztJQUN2QkQsT0FBTyxDQUFDQyxHQUFHLENBQUMsR0FBR0MsRUFBRSxDQUFDQyxJQUFJLENBQUMsSUFBSSxFQUFFUixPQUFPLENBQUM7SUFDckMsT0FBT0ssT0FBTztFQUNoQixDQUFDLEVBQUVILFlBQVksQ0FBQztBQUNsQiIsImlnbm9yZUxpc3QiOltdfQ==