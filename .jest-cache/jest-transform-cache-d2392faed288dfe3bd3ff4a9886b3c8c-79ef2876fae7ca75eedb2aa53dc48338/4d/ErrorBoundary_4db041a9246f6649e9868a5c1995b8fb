b7c1f734dc1196e27a9c325597763d55
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorBoundary = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
class ErrorBoundary extends react_1.Component {
    constructor(props) {
        super(props);
        Object.defineProperty(this, "handleReset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: () => {
                this.setState({ hasError: false, error: null, errorInfo: null });
            }
        });
        Object.defineProperty(this, "handleReload", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: () => {
                window.location.reload();
            }
        });
        this.state = { hasError: false, error: null, errorInfo: null };
    }
    static getDerivedStateFromError(error) {
        return { hasError: true, error, errorInfo: null };
    }
    componentDidCatch(error, errorInfo) {
        // Log to console for development (will be replaced with proper logger)
        console.error('React Error Boundary Caught:', {
            error: error.toString(),
            componentStack: errorInfo.componentStack,
            errorBoundary: this.props.boundaryName || 'Global',
            timestamp: new Date().toISOString(),
            userAgent: navigator.userAgent,
            url: window.location.href
        });
        // Call custom error handler if provided
        this.props.onError?.(error, errorInfo);
        // Update state with error details
        this.setState({ errorInfo });
    }
    render() {
        if (this.state.hasError) {
            if (this.props.fallback) {
                return (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: this.props.fallback });
            }
            return ((0, jsx_runtime_1.jsx)("div", { className: "min-h-screen flex items-center justify-center bg-gray-50 px-4", children: (0, jsx_runtime_1.jsxs)("div", { className: "max-w-md w-full bg-white rounded-lg shadow-lg p-6", children: [(0, jsx_runtime_1.jsx)("div", { className: "flex items-center justify-center w-12 h-12 mx-auto bg-red-100 rounded-full mb-4", children: (0, jsx_runtime_1.jsx)("svg", { className: "w-6 h-6 text-red-600", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: (0, jsx_runtime_1.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" }) }) }), (0, jsx_runtime_1.jsx)("h2", { className: "text-xl font-semibold text-gray-900 text-center mb-2", children: "Something went wrong" }), (0, jsx_runtime_1.jsx)("p", { className: "text-gray-600 text-center mb-6", children: "We encountered an unexpected error. Please try again or reload the page." }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-3", children: [(0, jsx_runtime_1.jsx)("button", { onClick: this.handleReset, className: "w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 transition-colors", children: "Try Again" }), (0, jsx_runtime_1.jsx)("button", { onClick: this.handleReload, className: "w-full bg-gray-200 text-gray-800 py-2 px-4 rounded-md hover:bg-gray-300 transition-colors", children: "Reload Page" })] }), process.env.NODE_ENV === 'development' && ((0, jsx_runtime_1.jsxs)("details", { className: "mt-6", children: [(0, jsx_runtime_1.jsx)("summary", { className: "cursor-pointer text-sm text-gray-500 hover:text-gray-700", children: "Error Details (Development)" }), (0, jsx_runtime_1.jsxs)("div", { className: "mt-2 p-3 bg-gray-100 rounded text-xs font-mono overflow-auto max-h-40", children: [(0, jsx_runtime_1.jsxs)("div", { className: "mb-2", children: [(0, jsx_runtime_1.jsx)("strong", { children: "Error:" }), (0, jsx_runtime_1.jsx)("pre", { className: "whitespace-pre-wrap", children: this.state.error?.toString() })] }), this.state.errorInfo && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("strong", { children: "Component Stack:" }), (0, jsx_runtime_1.jsx)("pre", { className: "whitespace-pre-wrap", children: this.state.errorInfo.componentStack })] }))] })] }))] }) }));
        }
        return this.props.children;
    }
}
exports.ErrorBoundary = ErrorBoundary;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,