a50690bfa47be54de399df563e27553b
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.queryByRole = exports.queryAllByRole = exports.getByRole = exports.getAllByRole = exports.findByRole = exports.findAllByRole = void 0;
var _domAccessibilityApi = require("dom-accessibility-api");
var _ariaQuery = require("aria-query");
var _roleHelpers = require("../role-helpers");
var _queryHelpers = require("../query-helpers");
var _helpers = require("../helpers");
var _allUtils = require("./all-utils");
/* eslint-disable complexity */

const queryAllByRole = (container, role, {
  hidden = (0, _allUtils.getConfig)().defaultHidden,
  name,
  description,
  queryFallbacks = false,
  selected,
  busy,
  checked,
  pressed,
  current,
  level,
  expanded,
  value: {
    now: valueNow,
    min: valueMin,
    max: valueMax,
    text: valueText
  } = {}
} = {}) => {
  (0, _helpers.checkContainerType)(container);
  if (selected !== undefined) {
    // guard against unknown roles
    if (_ariaQuery.roles.get(role)?.props['aria-selected'] === undefined) {
      throw new Error(`"aria-selected" is not supported on role "${role}".`);
    }
  }
  if (busy !== undefined) {
    // guard against unknown roles
    if (_ariaQuery.roles.get(role)?.props['aria-busy'] === undefined) {
      throw new Error(`"aria-busy" is not supported on role "${role}".`);
    }
  }
  if (checked !== undefined) {
    // guard against unknown roles
    if (_ariaQuery.roles.get(role)?.props['aria-checked'] === undefined) {
      throw new Error(`"aria-checked" is not supported on role "${role}".`);
    }
  }
  if (pressed !== undefined) {
    // guard against unknown roles
    if (_ariaQuery.roles.get(role)?.props['aria-pressed'] === undefined) {
      throw new Error(`"aria-pressed" is not supported on role "${role}".`);
    }
  }
  if (current !== undefined) {
    /* istanbul ignore next */
    // guard against unknown roles
    // All currently released ARIA versions support `aria-current` on all roles.
    // Leaving this for symmetry and forward compatibility
    if (_ariaQuery.roles.get(role)?.props['aria-current'] === undefined) {
      throw new Error(`"aria-current" is not supported on role "${role}".`);
    }
  }
  if (level !== undefined) {
    // guard against using `level` option with any role other than `heading`
    if (role !== 'heading') {
      throw new Error(`Role "${role}" cannot have "level" property.`);
    }
  }
  if (valueNow !== undefined) {
    // guard against unknown roles
    if (_ariaQuery.roles.get(role)?.props['aria-valuenow'] === undefined) {
      throw new Error(`"aria-valuenow" is not supported on role "${role}".`);
    }
  }
  if (valueMax !== undefined) {
    // guard against unknown roles
    if (_ariaQuery.roles.get(role)?.props['aria-valuemax'] === undefined) {
      throw new Error(`"aria-valuemax" is not supported on role "${role}".`);
    }
  }
  if (valueMin !== undefined) {
    // guard against unknown roles
    if (_ariaQuery.roles.get(role)?.props['aria-valuemin'] === undefined) {
      throw new Error(`"aria-valuemin" is not supported on role "${role}".`);
    }
  }
  if (valueText !== undefined) {
    // guard against unknown roles
    if (_ariaQuery.roles.get(role)?.props['aria-valuetext'] === undefined) {
      throw new Error(`"aria-valuetext" is not supported on role "${role}".`);
    }
  }
  if (expanded !== undefined) {
    // guard against unknown roles
    if (_ariaQuery.roles.get(role)?.props['aria-expanded'] === undefined) {
      throw new Error(`"aria-expanded" is not supported on role "${role}".`);
    }
  }
  const subtreeIsInaccessibleCache = new WeakMap();
  function cachedIsSubtreeInaccessible(element) {
    if (!subtreeIsInaccessibleCache.has(element)) {
      subtreeIsInaccessibleCache.set(element, (0, _roleHelpers.isSubtreeInaccessible)(element));
    }
    return subtreeIsInaccessibleCache.get(element);
  }
  return Array.from(container.querySelectorAll(
  // Only query elements that can be matched by the following filters
  makeRoleSelector(role))).filter(node => {
    const isRoleSpecifiedExplicitly = node.hasAttribute('role');
    if (isRoleSpecifiedExplicitly) {
      const roleValue = node.getAttribute('role');
      if (queryFallbacks) {
        return roleValue.split(' ').filter(Boolean).some(roleAttributeToken => roleAttributeToken === role);
      }
      // other wise only send the first token to match
      const [firstRoleAttributeToken] = roleValue.split(' ');
      return firstRoleAttributeToken === role;
    }
    const implicitRoles = (0, _roleHelpers.getImplicitAriaRoles)(node);
    return implicitRoles.some(implicitRole => {
      return implicitRole === role;
    });
  }).filter(element => {
    if (selected !== undefined) {
      return selected === (0, _roleHelpers.computeAriaSelected)(element);
    }
    if (busy !== undefined) {
      return busy === (0, _roleHelpers.computeAriaBusy)(element);
    }
    if (checked !== undefined) {
      return checked === (0, _roleHelpers.computeAriaChecked)(element);
    }
    if (pressed !== undefined) {
      return pressed === (0, _roleHelpers.computeAriaPressed)(element);
    }
    if (current !== undefined) {
      return current === (0, _roleHelpers.computeAriaCurrent)(element);
    }
    if (expanded !== undefined) {
      return expanded === (0, _roleHelpers.computeAriaExpanded)(element);
    }
    if (level !== undefined) {
      return level === (0, _roleHelpers.computeHeadingLevel)(element);
    }
    if (valueNow !== undefined || valueMax !== undefined || valueMin !== undefined || valueText !== undefined) {
      let valueMatches = true;
      if (valueNow !== undefined) {
        valueMatches &&= valueNow === (0, _roleHelpers.computeAriaValueNow)(element);
      }
      if (valueMax !== undefined) {
        valueMatches &&= valueMax === (0, _roleHelpers.computeAriaValueMax)(element);
      }
      if (valueMin !== undefined) {
        valueMatches &&= valueMin === (0, _roleHelpers.computeAriaValueMin)(element);
      }
      if (valueText !== undefined) {
        valueMatches &&= (0, _allUtils.matches)((0, _roleHelpers.computeAriaValueText)(element) ?? null, element, valueText, text => text);
      }
      return valueMatches;
    }
    // don't care if aria attributes are unspecified
    return true;
  }).filter(element => {
    if (name === undefined) {
      // Don't care
      return true;
    }
    return (0, _allUtils.matches)((0, _domAccessibilityApi.computeAccessibleName)(element, {
      computedStyleSupportsPseudoElements: (0, _allUtils.getConfig)().computedStyleSupportsPseudoElements
    }), element, name, text => text);
  }).filter(element => {
    if (description === undefined) {
      // Don't care
      return true;
    }
    return (0, _allUtils.matches)((0, _domAccessibilityApi.computeAccessibleDescription)(element, {
      computedStyleSupportsPseudoElements: (0, _allUtils.getConfig)().computedStyleSupportsPseudoElements
    }), element, description, text => text);
  }).filter(element => {
    return hidden === false ? (0, _roleHelpers.isInaccessible)(element, {
      isSubtreeInaccessible: cachedIsSubtreeInaccessible
    }) === false : true;
  });
};
function makeRoleSelector(role) {
  const explicitRoleSelector = `*[role~="${role}"]`;
  const roleRelations = _ariaQuery.roleElements.get(role) ?? new Set();
  const implicitRoleSelectors = new Set(Array.from(roleRelations).map(({
    name
  }) => name));

  // Current transpilation config sometimes assumes `...` is always applied to arrays.
  // `...` is equivalent to `Array.prototype.concat` for arrays.
  // If you replace this code with `[explicitRoleSelector, ...implicitRoleSelectors]`, make sure every transpilation target retains the `...` in favor of `Array.prototype.concat`.
  return [explicitRoleSelector].concat(Array.from(implicitRoleSelectors)).join(',');
}
const getNameHint = name => {
  let nameHint = '';
  if (name === undefined) {
    nameHint = '';
  } else if (typeof name === 'string') {
    nameHint = ` and name "${name}"`;
  } else {
    nameHint = ` and name \`${name}\``;
  }
  return nameHint;
};
const getMultipleError = (c, role, {
  name
} = {}) => {
  return `Found multiple elements with the role "${role}"${getNameHint(name)}`;
};
const getMissingError = (container, role, {
  hidden = (0, _allUtils.getConfig)().defaultHidden,
  name,
  description
} = {}) => {
  if ((0, _allUtils.getConfig)()._disableExpensiveErrorDiagnostics) {
    return `Unable to find role="${role}"${getNameHint(name)}`;
  }
  let roles = '';
  Array.from(container.children).forEach(childElement => {
    roles += (0, _roleHelpers.prettyRoles)(childElement, {
      hidden,
      includeDescription: description !== undefined
    });
  });
  let roleMessage;
  if (roles.length === 0) {
    if (hidden === false) {
      roleMessage = 'There are no accessible roles. But there might be some inaccessible roles. ' + 'If you wish to access them, then set the `hidden` option to `true`. ' + 'Learn more about this here: https://testing-library.com/docs/dom-testing-library/api-queries#byrole';
    } else {
      roleMessage = 'There are no available roles.';
    }
  } else {
    roleMessage = `
Here are the ${hidden === false ? 'accessible' : 'available'} roles:

  ${roles.replace(/\n/g, '\n  ').replace(/\n\s\s\n/g, '\n\n')}
`.trim();
  }
  let nameHint = '';
  if (name === undefined) {
    nameHint = '';
  } else if (typeof name === 'string') {
    nameHint = ` and name "${name}"`;
  } else {
    nameHint = ` and name \`${name}\``;
  }
  let descriptionHint = '';
  if (description === undefined) {
    descriptionHint = '';
  } else if (typeof description === 'string') {
    descriptionHint = ` and description "${description}"`;
  } else {
    descriptionHint = ` and description \`${description}\``;
  }
  return `
Unable to find an ${hidden === false ? 'accessible ' : ''}element with the role "${role}"${nameHint}${descriptionHint}

${roleMessage}`.trim();
};
const queryAllByRoleWithSuggestions = exports.queryAllByRole = (0, _queryHelpers.wrapAllByQueryWithSuggestion)(queryAllByRole, queryAllByRole.name, 'queryAll');
const [queryByRole, getAllByRole, getByRole, findAllByRole, findByRole] = (0, _allUtils.buildQueries)(queryAllByRole, getMultipleError, getMissingError);
exports.findByRole = findByRole;
exports.findAllByRole = findAllByRole;
exports.getByRole = getByRole;
exports.getAllByRole = getAllByRole;
exports.queryByRole = queryByRole;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInF1ZXJ5QnlSb2xlIiwicXVlcnlBbGxCeVJvbGUiLCJnZXRCeVJvbGUiLCJnZXRBbGxCeVJvbGUiLCJmaW5kQnlSb2xlIiwiZmluZEFsbEJ5Um9sZSIsIl9kb21BY2Nlc3NpYmlsaXR5QXBpIiwicmVxdWlyZSIsIl9hcmlhUXVlcnkiLCJfcm9sZUhlbHBlcnMiLCJfcXVlcnlIZWxwZXJzIiwiX2hlbHBlcnMiLCJfYWxsVXRpbHMiLCJjb250YWluZXIiLCJyb2xlIiwiaGlkZGVuIiwiZ2V0Q29uZmlnIiwiZGVmYXVsdEhpZGRlbiIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsInF1ZXJ5RmFsbGJhY2tzIiwic2VsZWN0ZWQiLCJidXN5IiwiY2hlY2tlZCIsInByZXNzZWQiLCJjdXJyZW50IiwibGV2ZWwiLCJleHBhbmRlZCIsIm5vdyIsInZhbHVlTm93IiwibWluIiwidmFsdWVNaW4iLCJtYXgiLCJ2YWx1ZU1heCIsInRleHQiLCJ2YWx1ZVRleHQiLCJjaGVja0NvbnRhaW5lclR5cGUiLCJ1bmRlZmluZWQiLCJyb2xlcyIsImdldCIsInByb3BzIiwiRXJyb3IiLCJzdWJ0cmVlSXNJbmFjY2Vzc2libGVDYWNoZSIsIldlYWtNYXAiLCJjYWNoZWRJc1N1YnRyZWVJbmFjY2Vzc2libGUiLCJlbGVtZW50IiwiaGFzIiwic2V0IiwiaXNTdWJ0cmVlSW5hY2Nlc3NpYmxlIiwiQXJyYXkiLCJmcm9tIiwicXVlcnlTZWxlY3RvckFsbCIsIm1ha2VSb2xlU2VsZWN0b3IiLCJmaWx0ZXIiLCJub2RlIiwiaXNSb2xlU3BlY2lmaWVkRXhwbGljaXRseSIsImhhc0F0dHJpYnV0ZSIsInJvbGVWYWx1ZSIsImdldEF0dHJpYnV0ZSIsInNwbGl0IiwiQm9vbGVhbiIsInNvbWUiLCJyb2xlQXR0cmlidXRlVG9rZW4iLCJmaXJzdFJvbGVBdHRyaWJ1dGVUb2tlbiIsImltcGxpY2l0Um9sZXMiLCJnZXRJbXBsaWNpdEFyaWFSb2xlcyIsImltcGxpY2l0Um9sZSIsImNvbXB1dGVBcmlhU2VsZWN0ZWQiLCJjb21wdXRlQXJpYUJ1c3kiLCJjb21wdXRlQXJpYUNoZWNrZWQiLCJjb21wdXRlQXJpYVByZXNzZWQiLCJjb21wdXRlQXJpYUN1cnJlbnQiLCJjb21wdXRlQXJpYUV4cGFuZGVkIiwiY29tcHV0ZUhlYWRpbmdMZXZlbCIsInZhbHVlTWF0Y2hlcyIsImNvbXB1dGVBcmlhVmFsdWVOb3ciLCJjb21wdXRlQXJpYVZhbHVlTWF4IiwiY29tcHV0ZUFyaWFWYWx1ZU1pbiIsIm1hdGNoZXMiLCJjb21wdXRlQXJpYVZhbHVlVGV4dCIsImNvbXB1dGVBY2Nlc3NpYmxlTmFtZSIsImNvbXB1dGVkU3R5bGVTdXBwb3J0c1BzZXVkb0VsZW1lbnRzIiwiY29tcHV0ZUFjY2Vzc2libGVEZXNjcmlwdGlvbiIsImlzSW5hY2Nlc3NpYmxlIiwiZXhwbGljaXRSb2xlU2VsZWN0b3IiLCJyb2xlUmVsYXRpb25zIiwicm9sZUVsZW1lbnRzIiwiU2V0IiwiaW1wbGljaXRSb2xlU2VsZWN0b3JzIiwibWFwIiwiY29uY2F0Iiwiam9pbiIsImdldE5hbWVIaW50IiwibmFtZUhpbnQiLCJnZXRNdWx0aXBsZUVycm9yIiwiYyIsImdldE1pc3NpbmdFcnJvciIsIl9kaXNhYmxlRXhwZW5zaXZlRXJyb3JEaWFnbm9zdGljcyIsImNoaWxkcmVuIiwiZm9yRWFjaCIsImNoaWxkRWxlbWVudCIsInByZXR0eVJvbGVzIiwiaW5jbHVkZURlc2NyaXB0aW9uIiwicm9sZU1lc3NhZ2UiLCJsZW5ndGgiLCJyZXBsYWNlIiwidHJpbSIsImRlc2NyaXB0aW9uSGludCIsInF1ZXJ5QWxsQnlSb2xlV2l0aFN1Z2dlc3Rpb25zIiwid3JhcEFsbEJ5UXVlcnlXaXRoU3VnZ2VzdGlvbiIsImJ1aWxkUXVlcmllcyJdLCJzb3VyY2VzIjpbInJvbGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnF1ZXJ5QnlSb2xlID0gZXhwb3J0cy5xdWVyeUFsbEJ5Um9sZSA9IGV4cG9ydHMuZ2V0QnlSb2xlID0gZXhwb3J0cy5nZXRBbGxCeVJvbGUgPSBleHBvcnRzLmZpbmRCeVJvbGUgPSBleHBvcnRzLmZpbmRBbGxCeVJvbGUgPSB2b2lkIDA7XG52YXIgX2RvbUFjY2Vzc2liaWxpdHlBcGkgPSByZXF1aXJlKFwiZG9tLWFjY2Vzc2liaWxpdHktYXBpXCIpO1xudmFyIF9hcmlhUXVlcnkgPSByZXF1aXJlKFwiYXJpYS1xdWVyeVwiKTtcbnZhciBfcm9sZUhlbHBlcnMgPSByZXF1aXJlKFwiLi4vcm9sZS1oZWxwZXJzXCIpO1xudmFyIF9xdWVyeUhlbHBlcnMgPSByZXF1aXJlKFwiLi4vcXVlcnktaGVscGVyc1wiKTtcbnZhciBfaGVscGVycyA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzXCIpO1xudmFyIF9hbGxVdGlscyA9IHJlcXVpcmUoXCIuL2FsbC11dGlsc1wiKTtcbi8qIGVzbGludC1kaXNhYmxlIGNvbXBsZXhpdHkgKi9cblxuY29uc3QgcXVlcnlBbGxCeVJvbGUgPSAoY29udGFpbmVyLCByb2xlLCB7XG4gIGhpZGRlbiA9ICgwLCBfYWxsVXRpbHMuZ2V0Q29uZmlnKSgpLmRlZmF1bHRIaWRkZW4sXG4gIG5hbWUsXG4gIGRlc2NyaXB0aW9uLFxuICBxdWVyeUZhbGxiYWNrcyA9IGZhbHNlLFxuICBzZWxlY3RlZCxcbiAgYnVzeSxcbiAgY2hlY2tlZCxcbiAgcHJlc3NlZCxcbiAgY3VycmVudCxcbiAgbGV2ZWwsXG4gIGV4cGFuZGVkLFxuICB2YWx1ZToge1xuICAgIG5vdzogdmFsdWVOb3csXG4gICAgbWluOiB2YWx1ZU1pbixcbiAgICBtYXg6IHZhbHVlTWF4LFxuICAgIHRleHQ6IHZhbHVlVGV4dFxuICB9ID0ge31cbn0gPSB7fSkgPT4ge1xuICAoMCwgX2hlbHBlcnMuY2hlY2tDb250YWluZXJUeXBlKShjb250YWluZXIpO1xuICBpZiAoc2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIGd1YXJkIGFnYWluc3QgdW5rbm93biByb2xlc1xuICAgIGlmIChfYXJpYVF1ZXJ5LnJvbGVzLmdldChyb2xlKT8ucHJvcHNbJ2FyaWEtc2VsZWN0ZWQnXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFwiYXJpYS1zZWxlY3RlZFwiIGlzIG5vdCBzdXBwb3J0ZWQgb24gcm9sZSBcIiR7cm9sZX1cIi5gKTtcbiAgICB9XG4gIH1cbiAgaWYgKGJ1c3kgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIGd1YXJkIGFnYWluc3QgdW5rbm93biByb2xlc1xuICAgIGlmIChfYXJpYVF1ZXJ5LnJvbGVzLmdldChyb2xlKT8ucHJvcHNbJ2FyaWEtYnVzeSddID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgXCJhcmlhLWJ1c3lcIiBpcyBub3Qgc3VwcG9ydGVkIG9uIHJvbGUgXCIke3JvbGV9XCIuYCk7XG4gICAgfVxuICB9XG4gIGlmIChjaGVja2VkICE9PSB1bmRlZmluZWQpIHtcbiAgICAvLyBndWFyZCBhZ2FpbnN0IHVua25vd24gcm9sZXNcbiAgICBpZiAoX2FyaWFRdWVyeS5yb2xlcy5nZXQocm9sZSk/LnByb3BzWydhcmlhLWNoZWNrZWQnXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFwiYXJpYS1jaGVja2VkXCIgaXMgbm90IHN1cHBvcnRlZCBvbiByb2xlIFwiJHtyb2xlfVwiLmApO1xuICAgIH1cbiAgfVxuICBpZiAocHJlc3NlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gZ3VhcmQgYWdhaW5zdCB1bmtub3duIHJvbGVzXG4gICAgaWYgKF9hcmlhUXVlcnkucm9sZXMuZ2V0KHJvbGUpPy5wcm9wc1snYXJpYS1wcmVzc2VkJ10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBcImFyaWEtcHJlc3NlZFwiIGlzIG5vdCBzdXBwb3J0ZWQgb24gcm9sZSBcIiR7cm9sZX1cIi5gKTtcbiAgICB9XG4gIH1cbiAgaWYgKGN1cnJlbnQgIT09IHVuZGVmaW5lZCkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgLy8gZ3VhcmQgYWdhaW5zdCB1bmtub3duIHJvbGVzXG4gICAgLy8gQWxsIGN1cnJlbnRseSByZWxlYXNlZCBBUklBIHZlcnNpb25zIHN1cHBvcnQgYGFyaWEtY3VycmVudGAgb24gYWxsIHJvbGVzLlxuICAgIC8vIExlYXZpbmcgdGhpcyBmb3Igc3ltbWV0cnkgYW5kIGZvcndhcmQgY29tcGF0aWJpbGl0eVxuICAgIGlmIChfYXJpYVF1ZXJ5LnJvbGVzLmdldChyb2xlKT8ucHJvcHNbJ2FyaWEtY3VycmVudCddID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgXCJhcmlhLWN1cnJlbnRcIiBpcyBub3Qgc3VwcG9ydGVkIG9uIHJvbGUgXCIke3JvbGV9XCIuYCk7XG4gICAgfVxuICB9XG4gIGlmIChsZXZlbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gZ3VhcmQgYWdhaW5zdCB1c2luZyBgbGV2ZWxgIG9wdGlvbiB3aXRoIGFueSByb2xlIG90aGVyIHRoYW4gYGhlYWRpbmdgXG4gICAgaWYgKHJvbGUgIT09ICdoZWFkaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBSb2xlIFwiJHtyb2xlfVwiIGNhbm5vdCBoYXZlIFwibGV2ZWxcIiBwcm9wZXJ0eS5gKTtcbiAgICB9XG4gIH1cbiAgaWYgKHZhbHVlTm93ICE9PSB1bmRlZmluZWQpIHtcbiAgICAvLyBndWFyZCBhZ2FpbnN0IHVua25vd24gcm9sZXNcbiAgICBpZiAoX2FyaWFRdWVyeS5yb2xlcy5nZXQocm9sZSk/LnByb3BzWydhcmlhLXZhbHVlbm93J10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBcImFyaWEtdmFsdWVub3dcIiBpcyBub3Qgc3VwcG9ydGVkIG9uIHJvbGUgXCIke3JvbGV9XCIuYCk7XG4gICAgfVxuICB9XG4gIGlmICh2YWx1ZU1heCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gZ3VhcmQgYWdhaW5zdCB1bmtub3duIHJvbGVzXG4gICAgaWYgKF9hcmlhUXVlcnkucm9sZXMuZ2V0KHJvbGUpPy5wcm9wc1snYXJpYS12YWx1ZW1heCddID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgXCJhcmlhLXZhbHVlbWF4XCIgaXMgbm90IHN1cHBvcnRlZCBvbiByb2xlIFwiJHtyb2xlfVwiLmApO1xuICAgIH1cbiAgfVxuICBpZiAodmFsdWVNaW4gIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIGd1YXJkIGFnYWluc3QgdW5rbm93biByb2xlc1xuICAgIGlmIChfYXJpYVF1ZXJ5LnJvbGVzLmdldChyb2xlKT8ucHJvcHNbJ2FyaWEtdmFsdWVtaW4nXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFwiYXJpYS12YWx1ZW1pblwiIGlzIG5vdCBzdXBwb3J0ZWQgb24gcm9sZSBcIiR7cm9sZX1cIi5gKTtcbiAgICB9XG4gIH1cbiAgaWYgKHZhbHVlVGV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gZ3VhcmQgYWdhaW5zdCB1bmtub3duIHJvbGVzXG4gICAgaWYgKF9hcmlhUXVlcnkucm9sZXMuZ2V0KHJvbGUpPy5wcm9wc1snYXJpYS12YWx1ZXRleHQnXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFwiYXJpYS12YWx1ZXRleHRcIiBpcyBub3Qgc3VwcG9ydGVkIG9uIHJvbGUgXCIke3JvbGV9XCIuYCk7XG4gICAgfVxuICB9XG4gIGlmIChleHBhbmRlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gZ3VhcmQgYWdhaW5zdCB1bmtub3duIHJvbGVzXG4gICAgaWYgKF9hcmlhUXVlcnkucm9sZXMuZ2V0KHJvbGUpPy5wcm9wc1snYXJpYS1leHBhbmRlZCddID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgXCJhcmlhLWV4cGFuZGVkXCIgaXMgbm90IHN1cHBvcnRlZCBvbiByb2xlIFwiJHtyb2xlfVwiLmApO1xuICAgIH1cbiAgfVxuICBjb25zdCBzdWJ0cmVlSXNJbmFjY2Vzc2libGVDYWNoZSA9IG5ldyBXZWFrTWFwKCk7XG4gIGZ1bmN0aW9uIGNhY2hlZElzU3VidHJlZUluYWNjZXNzaWJsZShlbGVtZW50KSB7XG4gICAgaWYgKCFzdWJ0cmVlSXNJbmFjY2Vzc2libGVDYWNoZS5oYXMoZWxlbWVudCkpIHtcbiAgICAgIHN1YnRyZWVJc0luYWNjZXNzaWJsZUNhY2hlLnNldChlbGVtZW50LCAoMCwgX3JvbGVIZWxwZXJzLmlzU3VidHJlZUluYWNjZXNzaWJsZSkoZWxlbWVudCkpO1xuICAgIH1cbiAgICByZXR1cm4gc3VidHJlZUlzSW5hY2Nlc3NpYmxlQ2FjaGUuZ2V0KGVsZW1lbnQpO1xuICB9XG4gIHJldHVybiBBcnJheS5mcm9tKGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKFxuICAvLyBPbmx5IHF1ZXJ5IGVsZW1lbnRzIHRoYXQgY2FuIGJlIG1hdGNoZWQgYnkgdGhlIGZvbGxvd2luZyBmaWx0ZXJzXG4gIG1ha2VSb2xlU2VsZWN0b3Iocm9sZSkpKS5maWx0ZXIobm9kZSA9PiB7XG4gICAgY29uc3QgaXNSb2xlU3BlY2lmaWVkRXhwbGljaXRseSA9IG5vZGUuaGFzQXR0cmlidXRlKCdyb2xlJyk7XG4gICAgaWYgKGlzUm9sZVNwZWNpZmllZEV4cGxpY2l0bHkpIHtcbiAgICAgIGNvbnN0IHJvbGVWYWx1ZSA9IG5vZGUuZ2V0QXR0cmlidXRlKCdyb2xlJyk7XG4gICAgICBpZiAocXVlcnlGYWxsYmFja3MpIHtcbiAgICAgICAgcmV0dXJuIHJvbGVWYWx1ZS5zcGxpdCgnICcpLmZpbHRlcihCb29sZWFuKS5zb21lKHJvbGVBdHRyaWJ1dGVUb2tlbiA9PiByb2xlQXR0cmlidXRlVG9rZW4gPT09IHJvbGUpO1xuICAgICAgfVxuICAgICAgLy8gb3RoZXIgd2lzZSBvbmx5IHNlbmQgdGhlIGZpcnN0IHRva2VuIHRvIG1hdGNoXG4gICAgICBjb25zdCBbZmlyc3RSb2xlQXR0cmlidXRlVG9rZW5dID0gcm9sZVZhbHVlLnNwbGl0KCcgJyk7XG4gICAgICByZXR1cm4gZmlyc3RSb2xlQXR0cmlidXRlVG9rZW4gPT09IHJvbGU7XG4gICAgfVxuICAgIGNvbnN0IGltcGxpY2l0Um9sZXMgPSAoMCwgX3JvbGVIZWxwZXJzLmdldEltcGxpY2l0QXJpYVJvbGVzKShub2RlKTtcbiAgICByZXR1cm4gaW1wbGljaXRSb2xlcy5zb21lKGltcGxpY2l0Um9sZSA9PiB7XG4gICAgICByZXR1cm4gaW1wbGljaXRSb2xlID09PSByb2xlO1xuICAgIH0pO1xuICB9KS5maWx0ZXIoZWxlbWVudCA9PiB7XG4gICAgaWYgKHNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBzZWxlY3RlZCA9PT0gKDAsIF9yb2xlSGVscGVycy5jb21wdXRlQXJpYVNlbGVjdGVkKShlbGVtZW50KTtcbiAgICB9XG4gICAgaWYgKGJ1c3kgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGJ1c3kgPT09ICgwLCBfcm9sZUhlbHBlcnMuY29tcHV0ZUFyaWFCdXN5KShlbGVtZW50KTtcbiAgICB9XG4gICAgaWYgKGNoZWNrZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGNoZWNrZWQgPT09ICgwLCBfcm9sZUhlbHBlcnMuY29tcHV0ZUFyaWFDaGVja2VkKShlbGVtZW50KTtcbiAgICB9XG4gICAgaWYgKHByZXNzZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHByZXNzZWQgPT09ICgwLCBfcm9sZUhlbHBlcnMuY29tcHV0ZUFyaWFQcmVzc2VkKShlbGVtZW50KTtcbiAgICB9XG4gICAgaWYgKGN1cnJlbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGN1cnJlbnQgPT09ICgwLCBfcm9sZUhlbHBlcnMuY29tcHV0ZUFyaWFDdXJyZW50KShlbGVtZW50KTtcbiAgICB9XG4gICAgaWYgKGV4cGFuZGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBleHBhbmRlZCA9PT0gKDAsIF9yb2xlSGVscGVycy5jb21wdXRlQXJpYUV4cGFuZGVkKShlbGVtZW50KTtcbiAgICB9XG4gICAgaWYgKGxldmVsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBsZXZlbCA9PT0gKDAsIF9yb2xlSGVscGVycy5jb21wdXRlSGVhZGluZ0xldmVsKShlbGVtZW50KTtcbiAgICB9XG4gICAgaWYgKHZhbHVlTm93ICE9PSB1bmRlZmluZWQgfHwgdmFsdWVNYXggIT09IHVuZGVmaW5lZCB8fCB2YWx1ZU1pbiAhPT0gdW5kZWZpbmVkIHx8IHZhbHVlVGV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBsZXQgdmFsdWVNYXRjaGVzID0gdHJ1ZTtcbiAgICAgIGlmICh2YWx1ZU5vdyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhbHVlTWF0Y2hlcyAmJj0gdmFsdWVOb3cgPT09ICgwLCBfcm9sZUhlbHBlcnMuY29tcHV0ZUFyaWFWYWx1ZU5vdykoZWxlbWVudCk7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWVNYXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YWx1ZU1hdGNoZXMgJiY9IHZhbHVlTWF4ID09PSAoMCwgX3JvbGVIZWxwZXJzLmNvbXB1dGVBcmlhVmFsdWVNYXgpKGVsZW1lbnQpO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlTWluICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdmFsdWVNYXRjaGVzICYmPSB2YWx1ZU1pbiA9PT0gKDAsIF9yb2xlSGVscGVycy5jb21wdXRlQXJpYVZhbHVlTWluKShlbGVtZW50KTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZVRleHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YWx1ZU1hdGNoZXMgJiY9ICgwLCBfYWxsVXRpbHMubWF0Y2hlcykoKDAsIF9yb2xlSGVscGVycy5jb21wdXRlQXJpYVZhbHVlVGV4dCkoZWxlbWVudCkgPz8gbnVsbCwgZWxlbWVudCwgdmFsdWVUZXh0LCB0ZXh0ID0+IHRleHQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlTWF0Y2hlcztcbiAgICB9XG4gICAgLy8gZG9uJ3QgY2FyZSBpZiBhcmlhIGF0dHJpYnV0ZXMgYXJlIHVuc3BlY2lmaWVkXG4gICAgcmV0dXJuIHRydWU7XG4gIH0pLmZpbHRlcihlbGVtZW50ID0+IHtcbiAgICBpZiAobmFtZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBEb24ndCBjYXJlXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuICgwLCBfYWxsVXRpbHMubWF0Y2hlcykoKDAsIF9kb21BY2Nlc3NpYmlsaXR5QXBpLmNvbXB1dGVBY2Nlc3NpYmxlTmFtZSkoZWxlbWVudCwge1xuICAgICAgY29tcHV0ZWRTdHlsZVN1cHBvcnRzUHNldWRvRWxlbWVudHM6ICgwLCBfYWxsVXRpbHMuZ2V0Q29uZmlnKSgpLmNvbXB1dGVkU3R5bGVTdXBwb3J0c1BzZXVkb0VsZW1lbnRzXG4gICAgfSksIGVsZW1lbnQsIG5hbWUsIHRleHQgPT4gdGV4dCk7XG4gIH0pLmZpbHRlcihlbGVtZW50ID0+IHtcbiAgICBpZiAoZGVzY3JpcHRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gRG9uJ3QgY2FyZVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiAoMCwgX2FsbFV0aWxzLm1hdGNoZXMpKCgwLCBfZG9tQWNjZXNzaWJpbGl0eUFwaS5jb21wdXRlQWNjZXNzaWJsZURlc2NyaXB0aW9uKShlbGVtZW50LCB7XG4gICAgICBjb21wdXRlZFN0eWxlU3VwcG9ydHNQc2V1ZG9FbGVtZW50czogKDAsIF9hbGxVdGlscy5nZXRDb25maWcpKCkuY29tcHV0ZWRTdHlsZVN1cHBvcnRzUHNldWRvRWxlbWVudHNcbiAgICB9KSwgZWxlbWVudCwgZGVzY3JpcHRpb24sIHRleHQgPT4gdGV4dCk7XG4gIH0pLmZpbHRlcihlbGVtZW50ID0+IHtcbiAgICByZXR1cm4gaGlkZGVuID09PSBmYWxzZSA/ICgwLCBfcm9sZUhlbHBlcnMuaXNJbmFjY2Vzc2libGUpKGVsZW1lbnQsIHtcbiAgICAgIGlzU3VidHJlZUluYWNjZXNzaWJsZTogY2FjaGVkSXNTdWJ0cmVlSW5hY2Nlc3NpYmxlXG4gICAgfSkgPT09IGZhbHNlIDogdHJ1ZTtcbiAgfSk7XG59O1xuZnVuY3Rpb24gbWFrZVJvbGVTZWxlY3Rvcihyb2xlKSB7XG4gIGNvbnN0IGV4cGxpY2l0Um9sZVNlbGVjdG9yID0gYCpbcm9sZX49XCIke3JvbGV9XCJdYDtcbiAgY29uc3Qgcm9sZVJlbGF0aW9ucyA9IF9hcmlhUXVlcnkucm9sZUVsZW1lbnRzLmdldChyb2xlKSA/PyBuZXcgU2V0KCk7XG4gIGNvbnN0IGltcGxpY2l0Um9sZVNlbGVjdG9ycyA9IG5ldyBTZXQoQXJyYXkuZnJvbShyb2xlUmVsYXRpb25zKS5tYXAoKHtcbiAgICBuYW1lXG4gIH0pID0+IG5hbWUpKTtcblxuICAvLyBDdXJyZW50IHRyYW5zcGlsYXRpb24gY29uZmlnIHNvbWV0aW1lcyBhc3N1bWVzIGAuLi5gIGlzIGFsd2F5cyBhcHBsaWVkIHRvIGFycmF5cy5cbiAgLy8gYC4uLmAgaXMgZXF1aXZhbGVudCB0byBgQXJyYXkucHJvdG90eXBlLmNvbmNhdGAgZm9yIGFycmF5cy5cbiAgLy8gSWYgeW91IHJlcGxhY2UgdGhpcyBjb2RlIHdpdGggYFtleHBsaWNpdFJvbGVTZWxlY3RvciwgLi4uaW1wbGljaXRSb2xlU2VsZWN0b3JzXWAsIG1ha2Ugc3VyZSBldmVyeSB0cmFuc3BpbGF0aW9uIHRhcmdldCByZXRhaW5zIHRoZSBgLi4uYCBpbiBmYXZvciBvZiBgQXJyYXkucHJvdG90eXBlLmNvbmNhdGAuXG4gIHJldHVybiBbZXhwbGljaXRSb2xlU2VsZWN0b3JdLmNvbmNhdChBcnJheS5mcm9tKGltcGxpY2l0Um9sZVNlbGVjdG9ycykpLmpvaW4oJywnKTtcbn1cbmNvbnN0IGdldE5hbWVIaW50ID0gbmFtZSA9PiB7XG4gIGxldCBuYW1lSGludCA9ICcnO1xuICBpZiAobmFtZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbmFtZUhpbnQgPSAnJztcbiAgfSBlbHNlIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICBuYW1lSGludCA9IGAgYW5kIG5hbWUgXCIke25hbWV9XCJgO1xuICB9IGVsc2Uge1xuICAgIG5hbWVIaW50ID0gYCBhbmQgbmFtZSBcXGAke25hbWV9XFxgYDtcbiAgfVxuICByZXR1cm4gbmFtZUhpbnQ7XG59O1xuY29uc3QgZ2V0TXVsdGlwbGVFcnJvciA9IChjLCByb2xlLCB7XG4gIG5hbWVcbn0gPSB7fSkgPT4ge1xuICByZXR1cm4gYEZvdW5kIG11bHRpcGxlIGVsZW1lbnRzIHdpdGggdGhlIHJvbGUgXCIke3JvbGV9XCIke2dldE5hbWVIaW50KG5hbWUpfWA7XG59O1xuY29uc3QgZ2V0TWlzc2luZ0Vycm9yID0gKGNvbnRhaW5lciwgcm9sZSwge1xuICBoaWRkZW4gPSAoMCwgX2FsbFV0aWxzLmdldENvbmZpZykoKS5kZWZhdWx0SGlkZGVuLFxuICBuYW1lLFxuICBkZXNjcmlwdGlvblxufSA9IHt9KSA9PiB7XG4gIGlmICgoMCwgX2FsbFV0aWxzLmdldENvbmZpZykoKS5fZGlzYWJsZUV4cGVuc2l2ZUVycm9yRGlhZ25vc3RpY3MpIHtcbiAgICByZXR1cm4gYFVuYWJsZSB0byBmaW5kIHJvbGU9XCIke3JvbGV9XCIke2dldE5hbWVIaW50KG5hbWUpfWA7XG4gIH1cbiAgbGV0IHJvbGVzID0gJyc7XG4gIEFycmF5LmZyb20oY29udGFpbmVyLmNoaWxkcmVuKS5mb3JFYWNoKGNoaWxkRWxlbWVudCA9PiB7XG4gICAgcm9sZXMgKz0gKDAsIF9yb2xlSGVscGVycy5wcmV0dHlSb2xlcykoY2hpbGRFbGVtZW50LCB7XG4gICAgICBoaWRkZW4sXG4gICAgICBpbmNsdWRlRGVzY3JpcHRpb246IGRlc2NyaXB0aW9uICE9PSB1bmRlZmluZWRcbiAgICB9KTtcbiAgfSk7XG4gIGxldCByb2xlTWVzc2FnZTtcbiAgaWYgKHJvbGVzLmxlbmd0aCA9PT0gMCkge1xuICAgIGlmIChoaWRkZW4gPT09IGZhbHNlKSB7XG4gICAgICByb2xlTWVzc2FnZSA9ICdUaGVyZSBhcmUgbm8gYWNjZXNzaWJsZSByb2xlcy4gQnV0IHRoZXJlIG1pZ2h0IGJlIHNvbWUgaW5hY2Nlc3NpYmxlIHJvbGVzLiAnICsgJ0lmIHlvdSB3aXNoIHRvIGFjY2VzcyB0aGVtLCB0aGVuIHNldCB0aGUgYGhpZGRlbmAgb3B0aW9uIHRvIGB0cnVlYC4gJyArICdMZWFybiBtb3JlIGFib3V0IHRoaXMgaGVyZTogaHR0cHM6Ly90ZXN0aW5nLWxpYnJhcnkuY29tL2RvY3MvZG9tLXRlc3RpbmctbGlicmFyeS9hcGktcXVlcmllcyNieXJvbGUnO1xuICAgIH0gZWxzZSB7XG4gICAgICByb2xlTWVzc2FnZSA9ICdUaGVyZSBhcmUgbm8gYXZhaWxhYmxlIHJvbGVzLic7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJvbGVNZXNzYWdlID0gYFxuSGVyZSBhcmUgdGhlICR7aGlkZGVuID09PSBmYWxzZSA/ICdhY2Nlc3NpYmxlJyA6ICdhdmFpbGFibGUnfSByb2xlczpcblxuICAke3JvbGVzLnJlcGxhY2UoL1xcbi9nLCAnXFxuICAnKS5yZXBsYWNlKC9cXG5cXHNcXHNcXG4vZywgJ1xcblxcbicpfVxuYC50cmltKCk7XG4gIH1cbiAgbGV0IG5hbWVIaW50ID0gJyc7XG4gIGlmIChuYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICBuYW1lSGludCA9ICcnO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJykge1xuICAgIG5hbWVIaW50ID0gYCBhbmQgbmFtZSBcIiR7bmFtZX1cImA7XG4gIH0gZWxzZSB7XG4gICAgbmFtZUhpbnQgPSBgIGFuZCBuYW1lIFxcYCR7bmFtZX1cXGBgO1xuICB9XG4gIGxldCBkZXNjcmlwdGlvbkhpbnQgPSAnJztcbiAgaWYgKGRlc2NyaXB0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICBkZXNjcmlwdGlvbkhpbnQgPSAnJztcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGVzY3JpcHRpb24gPT09ICdzdHJpbmcnKSB7XG4gICAgZGVzY3JpcHRpb25IaW50ID0gYCBhbmQgZGVzY3JpcHRpb24gXCIke2Rlc2NyaXB0aW9ufVwiYDtcbiAgfSBlbHNlIHtcbiAgICBkZXNjcmlwdGlvbkhpbnQgPSBgIGFuZCBkZXNjcmlwdGlvbiBcXGAke2Rlc2NyaXB0aW9ufVxcYGA7XG4gIH1cbiAgcmV0dXJuIGBcblVuYWJsZSB0byBmaW5kIGFuICR7aGlkZGVuID09PSBmYWxzZSA/ICdhY2Nlc3NpYmxlICcgOiAnJ31lbGVtZW50IHdpdGggdGhlIHJvbGUgXCIke3JvbGV9XCIke25hbWVIaW50fSR7ZGVzY3JpcHRpb25IaW50fVxuXG4ke3JvbGVNZXNzYWdlfWAudHJpbSgpO1xufTtcbmNvbnN0IHF1ZXJ5QWxsQnlSb2xlV2l0aFN1Z2dlc3Rpb25zID0gZXhwb3J0cy5xdWVyeUFsbEJ5Um9sZSA9ICgwLCBfcXVlcnlIZWxwZXJzLndyYXBBbGxCeVF1ZXJ5V2l0aFN1Z2dlc3Rpb24pKHF1ZXJ5QWxsQnlSb2xlLCBxdWVyeUFsbEJ5Um9sZS5uYW1lLCAncXVlcnlBbGwnKTtcbmNvbnN0IFtxdWVyeUJ5Um9sZSwgZ2V0QWxsQnlSb2xlLCBnZXRCeVJvbGUsIGZpbmRBbGxCeVJvbGUsIGZpbmRCeVJvbGVdID0gKDAsIF9hbGxVdGlscy5idWlsZFF1ZXJpZXMpKHF1ZXJ5QWxsQnlSb2xlLCBnZXRNdWx0aXBsZUVycm9yLCBnZXRNaXNzaW5nRXJyb3IpO1xuZXhwb3J0cy5maW5kQnlSb2xlID0gZmluZEJ5Um9sZTtcbmV4cG9ydHMuZmluZEFsbEJ5Um9sZSA9IGZpbmRBbGxCeVJvbGU7XG5leHBvcnRzLmdldEJ5Um9sZSA9IGdldEJ5Um9sZTtcbmV4cG9ydHMuZ2V0QWxsQnlSb2xlID0gZ2V0QWxsQnlSb2xlO1xuZXhwb3J0cy5xdWVyeUJ5Um9sZSA9IHF1ZXJ5QnlSb2xlOyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FBQztBQUNGRCxPQUFPLENBQUNFLFdBQVcsR0FBR0YsT0FBTyxDQUFDRyxjQUFjLEdBQUdILE9BQU8sQ0FBQ0ksU0FBUyxHQUFHSixPQUFPLENBQUNLLFlBQVksR0FBR0wsT0FBTyxDQUFDTSxVQUFVLEdBQUdOLE9BQU8sQ0FBQ08sYUFBYSxHQUFHLEtBQUssQ0FBQztBQUM3SSxJQUFJQyxvQkFBb0IsR0FBR0MsT0FBTyxDQUFDLHVCQUF1QixDQUFDO0FBQzNELElBQUlDLFVBQVUsR0FBR0QsT0FBTyxDQUFDLFlBQVksQ0FBQztBQUN0QyxJQUFJRSxZQUFZLEdBQUdGLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztBQUM3QyxJQUFJRyxhQUFhLEdBQUdILE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQztBQUMvQyxJQUFJSSxRQUFRLEdBQUdKLE9BQU8sQ0FBQyxZQUFZLENBQUM7QUFDcEMsSUFBSUssU0FBUyxHQUFHTCxPQUFPLENBQUMsYUFBYSxDQUFDO0FBQ3RDOztBQUVBLE1BQU1OLGNBQWMsR0FBR0EsQ0FBQ1ksU0FBUyxFQUFFQyxJQUFJLEVBQUU7RUFDdkNDLE1BQU0sR0FBRyxDQUFDLENBQUMsRUFBRUgsU0FBUyxDQUFDSSxTQUFTLEVBQUUsQ0FBQyxDQUFDQyxhQUFhO0VBQ2pEQyxJQUFJO0VBQ0pDLFdBQVc7RUFDWEMsY0FBYyxHQUFHLEtBQUs7RUFDdEJDLFFBQVE7RUFDUkMsSUFBSTtFQUNKQyxPQUFPO0VBQ1BDLE9BQU87RUFDUEMsT0FBTztFQUNQQyxLQUFLO0VBQ0xDLFFBQVE7RUFDUjVCLEtBQUssRUFBRTtJQUNMNkIsR0FBRyxFQUFFQyxRQUFRO0lBQ2JDLEdBQUcsRUFBRUMsUUFBUTtJQUNiQyxHQUFHLEVBQUVDLFFBQVE7SUFDYkMsSUFBSSxFQUFFQztFQUNSLENBQUMsR0FBRyxDQUFDO0FBQ1AsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLO0VBQ1QsQ0FBQyxDQUFDLEVBQUV4QixRQUFRLENBQUN5QixrQkFBa0IsRUFBRXZCLFNBQVMsQ0FBQztFQUMzQyxJQUFJUSxRQUFRLEtBQUtnQixTQUFTLEVBQUU7SUFDMUI7SUFDQSxJQUFJN0IsVUFBVSxDQUFDOEIsS0FBSyxDQUFDQyxHQUFHLENBQUN6QixJQUFJLENBQUMsRUFBRTBCLEtBQUssQ0FBQyxlQUFlLENBQUMsS0FBS0gsU0FBUyxFQUFFO01BQ3BFLE1BQU0sSUFBSUksS0FBSyxDQUFDLDZDQUE2QzNCLElBQUksSUFBSSxDQUFDO0lBQ3hFO0VBQ0Y7RUFDQSxJQUFJUSxJQUFJLEtBQUtlLFNBQVMsRUFBRTtJQUN0QjtJQUNBLElBQUk3QixVQUFVLENBQUM4QixLQUFLLENBQUNDLEdBQUcsQ0FBQ3pCLElBQUksQ0FBQyxFQUFFMEIsS0FBSyxDQUFDLFdBQVcsQ0FBQyxLQUFLSCxTQUFTLEVBQUU7TUFDaEUsTUFBTSxJQUFJSSxLQUFLLENBQUMseUNBQXlDM0IsSUFBSSxJQUFJLENBQUM7SUFDcEU7RUFDRjtFQUNBLElBQUlTLE9BQU8sS0FBS2MsU0FBUyxFQUFFO0lBQ3pCO0lBQ0EsSUFBSTdCLFVBQVUsQ0FBQzhCLEtBQUssQ0FBQ0MsR0FBRyxDQUFDekIsSUFBSSxDQUFDLEVBQUUwQixLQUFLLENBQUMsY0FBYyxDQUFDLEtBQUtILFNBQVMsRUFBRTtNQUNuRSxNQUFNLElBQUlJLEtBQUssQ0FBQyw0Q0FBNEMzQixJQUFJLElBQUksQ0FBQztJQUN2RTtFQUNGO0VBQ0EsSUFBSVUsT0FBTyxLQUFLYSxTQUFTLEVBQUU7SUFDekI7SUFDQSxJQUFJN0IsVUFBVSxDQUFDOEIsS0FBSyxDQUFDQyxHQUFHLENBQUN6QixJQUFJLENBQUMsRUFBRTBCLEtBQUssQ0FBQyxjQUFjLENBQUMsS0FBS0gsU0FBUyxFQUFFO01BQ25FLE1BQU0sSUFBSUksS0FBSyxDQUFDLDRDQUE0QzNCLElBQUksSUFBSSxDQUFDO0lBQ3ZFO0VBQ0Y7RUFDQSxJQUFJVyxPQUFPLEtBQUtZLFNBQVMsRUFBRTtJQUN6QjtJQUNBO0lBQ0E7SUFDQTtJQUNBLElBQUk3QixVQUFVLENBQUM4QixLQUFLLENBQUNDLEdBQUcsQ0FBQ3pCLElBQUksQ0FBQyxFQUFFMEIsS0FBSyxDQUFDLGNBQWMsQ0FBQyxLQUFLSCxTQUFTLEVBQUU7TUFDbkUsTUFBTSxJQUFJSSxLQUFLLENBQUMsNENBQTRDM0IsSUFBSSxJQUFJLENBQUM7SUFDdkU7RUFDRjtFQUNBLElBQUlZLEtBQUssS0FBS1csU0FBUyxFQUFFO0lBQ3ZCO0lBQ0EsSUFBSXZCLElBQUksS0FBSyxTQUFTLEVBQUU7TUFDdEIsTUFBTSxJQUFJMkIsS0FBSyxDQUFDLFNBQVMzQixJQUFJLGlDQUFpQyxDQUFDO0lBQ2pFO0VBQ0Y7RUFDQSxJQUFJZSxRQUFRLEtBQUtRLFNBQVMsRUFBRTtJQUMxQjtJQUNBLElBQUk3QixVQUFVLENBQUM4QixLQUFLLENBQUNDLEdBQUcsQ0FBQ3pCLElBQUksQ0FBQyxFQUFFMEIsS0FBSyxDQUFDLGVBQWUsQ0FBQyxLQUFLSCxTQUFTLEVBQUU7TUFDcEUsTUFBTSxJQUFJSSxLQUFLLENBQUMsNkNBQTZDM0IsSUFBSSxJQUFJLENBQUM7SUFDeEU7RUFDRjtFQUNBLElBQUltQixRQUFRLEtBQUtJLFNBQVMsRUFBRTtJQUMxQjtJQUNBLElBQUk3QixVQUFVLENBQUM4QixLQUFLLENBQUNDLEdBQUcsQ0FBQ3pCLElBQUksQ0FBQyxFQUFFMEIsS0FBSyxDQUFDLGVBQWUsQ0FBQyxLQUFLSCxTQUFTLEVBQUU7TUFDcEUsTUFBTSxJQUFJSSxLQUFLLENBQUMsNkNBQTZDM0IsSUFBSSxJQUFJLENBQUM7SUFDeEU7RUFDRjtFQUNBLElBQUlpQixRQUFRLEtBQUtNLFNBQVMsRUFBRTtJQUMxQjtJQUNBLElBQUk3QixVQUFVLENBQUM4QixLQUFLLENBQUNDLEdBQUcsQ0FBQ3pCLElBQUksQ0FBQyxFQUFFMEIsS0FBSyxDQUFDLGVBQWUsQ0FBQyxLQUFLSCxTQUFTLEVBQUU7TUFDcEUsTUFBTSxJQUFJSSxLQUFLLENBQUMsNkNBQTZDM0IsSUFBSSxJQUFJLENBQUM7SUFDeEU7RUFDRjtFQUNBLElBQUlxQixTQUFTLEtBQUtFLFNBQVMsRUFBRTtJQUMzQjtJQUNBLElBQUk3QixVQUFVLENBQUM4QixLQUFLLENBQUNDLEdBQUcsQ0FBQ3pCLElBQUksQ0FBQyxFQUFFMEIsS0FBSyxDQUFDLGdCQUFnQixDQUFDLEtBQUtILFNBQVMsRUFBRTtNQUNyRSxNQUFNLElBQUlJLEtBQUssQ0FBQyw4Q0FBOEMzQixJQUFJLElBQUksQ0FBQztJQUN6RTtFQUNGO0VBQ0EsSUFBSWEsUUFBUSxLQUFLVSxTQUFTLEVBQUU7SUFDMUI7SUFDQSxJQUFJN0IsVUFBVSxDQUFDOEIsS0FBSyxDQUFDQyxHQUFHLENBQUN6QixJQUFJLENBQUMsRUFBRTBCLEtBQUssQ0FBQyxlQUFlLENBQUMsS0FBS0gsU0FBUyxFQUFFO01BQ3BFLE1BQU0sSUFBSUksS0FBSyxDQUFDLDZDQUE2QzNCLElBQUksSUFBSSxDQUFDO0lBQ3hFO0VBQ0Y7RUFDQSxNQUFNNEIsMEJBQTBCLEdBQUcsSUFBSUMsT0FBTyxDQUFDLENBQUM7RUFDaEQsU0FBU0MsMkJBQTJCQSxDQUFDQyxPQUFPLEVBQUU7SUFDNUMsSUFBSSxDQUFDSCwwQkFBMEIsQ0FBQ0ksR0FBRyxDQUFDRCxPQUFPLENBQUMsRUFBRTtNQUM1Q0gsMEJBQTBCLENBQUNLLEdBQUcsQ0FBQ0YsT0FBTyxFQUFFLENBQUMsQ0FBQyxFQUFFcEMsWUFBWSxDQUFDdUMscUJBQXFCLEVBQUVILE9BQU8sQ0FBQyxDQUFDO0lBQzNGO0lBQ0EsT0FBT0gsMEJBQTBCLENBQUNILEdBQUcsQ0FBQ00sT0FBTyxDQUFDO0VBQ2hEO0VBQ0EsT0FBT0ksS0FBSyxDQUFDQyxJQUFJLENBQUNyQyxTQUFTLENBQUNzQyxnQkFBZ0I7RUFDNUM7RUFDQUMsZ0JBQWdCLENBQUN0QyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUN1QyxNQUFNLENBQUNDLElBQUksSUFBSTtJQUN0QyxNQUFNQyx5QkFBeUIsR0FBR0QsSUFBSSxDQUFDRSxZQUFZLENBQUMsTUFBTSxDQUFDO0lBQzNELElBQUlELHlCQUF5QixFQUFFO01BQzdCLE1BQU1FLFNBQVMsR0FBR0gsSUFBSSxDQUFDSSxZQUFZLENBQUMsTUFBTSxDQUFDO01BQzNDLElBQUl0QyxjQUFjLEVBQUU7UUFDbEIsT0FBT3FDLFNBQVMsQ0FBQ0UsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDTixNQUFNLENBQUNPLE9BQU8sQ0FBQyxDQUFDQyxJQUFJLENBQUNDLGtCQUFrQixJQUFJQSxrQkFBa0IsS0FBS2hELElBQUksQ0FBQztNQUNyRztNQUNBO01BQ0EsTUFBTSxDQUFDaUQsdUJBQXVCLENBQUMsR0FBR04sU0FBUyxDQUFDRSxLQUFLLENBQUMsR0FBRyxDQUFDO01BQ3RELE9BQU9JLHVCQUF1QixLQUFLakQsSUFBSTtJQUN6QztJQUNBLE1BQU1rRCxhQUFhLEdBQUcsQ0FBQyxDQUFDLEVBQUV2RCxZQUFZLENBQUN3RCxvQkFBb0IsRUFBRVgsSUFBSSxDQUFDO0lBQ2xFLE9BQU9VLGFBQWEsQ0FBQ0gsSUFBSSxDQUFDSyxZQUFZLElBQUk7TUFDeEMsT0FBT0EsWUFBWSxLQUFLcEQsSUFBSTtJQUM5QixDQUFDLENBQUM7RUFDSixDQUFDLENBQUMsQ0FBQ3VDLE1BQU0sQ0FBQ1IsT0FBTyxJQUFJO0lBQ25CLElBQUl4QixRQUFRLEtBQUtnQixTQUFTLEVBQUU7TUFDMUIsT0FBT2hCLFFBQVEsS0FBSyxDQUFDLENBQUMsRUFBRVosWUFBWSxDQUFDMEQsbUJBQW1CLEVBQUV0QixPQUFPLENBQUM7SUFDcEU7SUFDQSxJQUFJdkIsSUFBSSxLQUFLZSxTQUFTLEVBQUU7TUFDdEIsT0FBT2YsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFYixZQUFZLENBQUMyRCxlQUFlLEVBQUV2QixPQUFPLENBQUM7SUFDNUQ7SUFDQSxJQUFJdEIsT0FBTyxLQUFLYyxTQUFTLEVBQUU7TUFDekIsT0FBT2QsT0FBTyxLQUFLLENBQUMsQ0FBQyxFQUFFZCxZQUFZLENBQUM0RCxrQkFBa0IsRUFBRXhCLE9BQU8sQ0FBQztJQUNsRTtJQUNBLElBQUlyQixPQUFPLEtBQUthLFNBQVMsRUFBRTtNQUN6QixPQUFPYixPQUFPLEtBQUssQ0FBQyxDQUFDLEVBQUVmLFlBQVksQ0FBQzZELGtCQUFrQixFQUFFekIsT0FBTyxDQUFDO0lBQ2xFO0lBQ0EsSUFBSXBCLE9BQU8sS0FBS1ksU0FBUyxFQUFFO01BQ3pCLE9BQU9aLE9BQU8sS0FBSyxDQUFDLENBQUMsRUFBRWhCLFlBQVksQ0FBQzhELGtCQUFrQixFQUFFMUIsT0FBTyxDQUFDO0lBQ2xFO0lBQ0EsSUFBSWxCLFFBQVEsS0FBS1UsU0FBUyxFQUFFO01BQzFCLE9BQU9WLFFBQVEsS0FBSyxDQUFDLENBQUMsRUFBRWxCLFlBQVksQ0FBQytELG1CQUFtQixFQUFFM0IsT0FBTyxDQUFDO0lBQ3BFO0lBQ0EsSUFBSW5CLEtBQUssS0FBS1csU0FBUyxFQUFFO01BQ3ZCLE9BQU9YLEtBQUssS0FBSyxDQUFDLENBQUMsRUFBRWpCLFlBQVksQ0FBQ2dFLG1CQUFtQixFQUFFNUIsT0FBTyxDQUFDO0lBQ2pFO0lBQ0EsSUFBSWhCLFFBQVEsS0FBS1EsU0FBUyxJQUFJSixRQUFRLEtBQUtJLFNBQVMsSUFBSU4sUUFBUSxLQUFLTSxTQUFTLElBQUlGLFNBQVMsS0FBS0UsU0FBUyxFQUFFO01BQ3pHLElBQUlxQyxZQUFZLEdBQUcsSUFBSTtNQUN2QixJQUFJN0MsUUFBUSxLQUFLUSxTQUFTLEVBQUU7UUFDMUJxQyxZQUFZLEtBQUs3QyxRQUFRLEtBQUssQ0FBQyxDQUFDLEVBQUVwQixZQUFZLENBQUNrRSxtQkFBbUIsRUFBRTlCLE9BQU8sQ0FBQztNQUM5RTtNQUNBLElBQUlaLFFBQVEsS0FBS0ksU0FBUyxFQUFFO1FBQzFCcUMsWUFBWSxLQUFLekMsUUFBUSxLQUFLLENBQUMsQ0FBQyxFQUFFeEIsWUFBWSxDQUFDbUUsbUJBQW1CLEVBQUUvQixPQUFPLENBQUM7TUFDOUU7TUFDQSxJQUFJZCxRQUFRLEtBQUtNLFNBQVMsRUFBRTtRQUMxQnFDLFlBQVksS0FBSzNDLFFBQVEsS0FBSyxDQUFDLENBQUMsRUFBRXRCLFlBQVksQ0FBQ29FLG1CQUFtQixFQUFFaEMsT0FBTyxDQUFDO01BQzlFO01BQ0EsSUFBSVYsU0FBUyxLQUFLRSxTQUFTLEVBQUU7UUFDM0JxQyxZQUFZLEtBQUssQ0FBQyxDQUFDLEVBQUU5RCxTQUFTLENBQUNrRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLEVBQUVyRSxZQUFZLENBQUNzRSxvQkFBb0IsRUFBRWxDLE9BQU8sQ0FBQyxJQUFJLElBQUksRUFBRUEsT0FBTyxFQUFFVixTQUFTLEVBQUVELElBQUksSUFBSUEsSUFBSSxDQUFDO01BQ3BJO01BQ0EsT0FBT3dDLFlBQVk7SUFDckI7SUFDQTtJQUNBLE9BQU8sSUFBSTtFQUNiLENBQUMsQ0FBQyxDQUFDckIsTUFBTSxDQUFDUixPQUFPLElBQUk7SUFDbkIsSUFBSTNCLElBQUksS0FBS21CLFNBQVMsRUFBRTtNQUN0QjtNQUNBLE9BQU8sSUFBSTtJQUNiO0lBQ0EsT0FBTyxDQUFDLENBQUMsRUFBRXpCLFNBQVMsQ0FBQ2tFLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRXhFLG9CQUFvQixDQUFDMEUscUJBQXFCLEVBQUVuQyxPQUFPLEVBQUU7TUFDckZvQyxtQ0FBbUMsRUFBRSxDQUFDLENBQUMsRUFBRXJFLFNBQVMsQ0FBQ0ksU0FBUyxFQUFFLENBQUMsQ0FBQ2lFO0lBQ2xFLENBQUMsQ0FBQyxFQUFFcEMsT0FBTyxFQUFFM0IsSUFBSSxFQUFFZ0IsSUFBSSxJQUFJQSxJQUFJLENBQUM7RUFDbEMsQ0FBQyxDQUFDLENBQUNtQixNQUFNLENBQUNSLE9BQU8sSUFBSTtJQUNuQixJQUFJMUIsV0FBVyxLQUFLa0IsU0FBUyxFQUFFO01BQzdCO01BQ0EsT0FBTyxJQUFJO0lBQ2I7SUFDQSxPQUFPLENBQUMsQ0FBQyxFQUFFekIsU0FBUyxDQUFDa0UsT0FBTyxFQUFFLENBQUMsQ0FBQyxFQUFFeEUsb0JBQW9CLENBQUM0RSw0QkFBNEIsRUFBRXJDLE9BQU8sRUFBRTtNQUM1Rm9DLG1DQUFtQyxFQUFFLENBQUMsQ0FBQyxFQUFFckUsU0FBUyxDQUFDSSxTQUFTLEVBQUUsQ0FBQyxDQUFDaUU7SUFDbEUsQ0FBQyxDQUFDLEVBQUVwQyxPQUFPLEVBQUUxQixXQUFXLEVBQUVlLElBQUksSUFBSUEsSUFBSSxDQUFDO0VBQ3pDLENBQUMsQ0FBQyxDQUFDbUIsTUFBTSxDQUFDUixPQUFPLElBQUk7SUFDbkIsT0FBTzlCLE1BQU0sS0FBSyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUVOLFlBQVksQ0FBQzBFLGNBQWMsRUFBRXRDLE9BQU8sRUFBRTtNQUNsRUcscUJBQXFCLEVBQUVKO0lBQ3pCLENBQUMsQ0FBQyxLQUFLLEtBQUssR0FBRyxJQUFJO0VBQ3JCLENBQUMsQ0FBQztBQUNKLENBQUM7QUFDRCxTQUFTUSxnQkFBZ0JBLENBQUN0QyxJQUFJLEVBQUU7RUFDOUIsTUFBTXNFLG9CQUFvQixHQUFHLFlBQVl0RSxJQUFJLElBQUk7RUFDakQsTUFBTXVFLGFBQWEsR0FBRzdFLFVBQVUsQ0FBQzhFLFlBQVksQ0FBQy9DLEdBQUcsQ0FBQ3pCLElBQUksQ0FBQyxJQUFJLElBQUl5RSxHQUFHLENBQUMsQ0FBQztFQUNwRSxNQUFNQyxxQkFBcUIsR0FBRyxJQUFJRCxHQUFHLENBQUN0QyxLQUFLLENBQUNDLElBQUksQ0FBQ21DLGFBQWEsQ0FBQyxDQUFDSSxHQUFHLENBQUMsQ0FBQztJQUNuRXZFO0VBQ0YsQ0FBQyxLQUFLQSxJQUFJLENBQUMsQ0FBQzs7RUFFWjtFQUNBO0VBQ0E7RUFDQSxPQUFPLENBQUNrRSxvQkFBb0IsQ0FBQyxDQUFDTSxNQUFNLENBQUN6QyxLQUFLLENBQUNDLElBQUksQ0FBQ3NDLHFCQUFxQixDQUFDLENBQUMsQ0FBQ0csSUFBSSxDQUFDLEdBQUcsQ0FBQztBQUNuRjtBQUNBLE1BQU1DLFdBQVcsR0FBRzFFLElBQUksSUFBSTtFQUMxQixJQUFJMkUsUUFBUSxHQUFHLEVBQUU7RUFDakIsSUFBSTNFLElBQUksS0FBS21CLFNBQVMsRUFBRTtJQUN0QndELFFBQVEsR0FBRyxFQUFFO0VBQ2YsQ0FBQyxNQUFNLElBQUksT0FBTzNFLElBQUksS0FBSyxRQUFRLEVBQUU7SUFDbkMyRSxRQUFRLEdBQUcsY0FBYzNFLElBQUksR0FBRztFQUNsQyxDQUFDLE1BQU07SUFDTDJFLFFBQVEsR0FBRyxlQUFlM0UsSUFBSSxJQUFJO0VBQ3BDO0VBQ0EsT0FBTzJFLFFBQVE7QUFDakIsQ0FBQztBQUNELE1BQU1DLGdCQUFnQixHQUFHQSxDQUFDQyxDQUFDLEVBQUVqRixJQUFJLEVBQUU7RUFDakNJO0FBQ0YsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLO0VBQ1QsT0FBTywwQ0FBMENKLElBQUksSUFBSThFLFdBQVcsQ0FBQzFFLElBQUksQ0FBQyxFQUFFO0FBQzlFLENBQUM7QUFDRCxNQUFNOEUsZUFBZSxHQUFHQSxDQUFDbkYsU0FBUyxFQUFFQyxJQUFJLEVBQUU7RUFDeENDLE1BQU0sR0FBRyxDQUFDLENBQUMsRUFBRUgsU0FBUyxDQUFDSSxTQUFTLEVBQUUsQ0FBQyxDQUFDQyxhQUFhO0VBQ2pEQyxJQUFJO0VBQ0pDO0FBQ0YsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLO0VBQ1QsSUFBSSxDQUFDLENBQUMsRUFBRVAsU0FBUyxDQUFDSSxTQUFTLEVBQUUsQ0FBQyxDQUFDaUYsaUNBQWlDLEVBQUU7SUFDaEUsT0FBTyx3QkFBd0JuRixJQUFJLElBQUk4RSxXQUFXLENBQUMxRSxJQUFJLENBQUMsRUFBRTtFQUM1RDtFQUNBLElBQUlvQixLQUFLLEdBQUcsRUFBRTtFQUNkVyxLQUFLLENBQUNDLElBQUksQ0FBQ3JDLFNBQVMsQ0FBQ3FGLFFBQVEsQ0FBQyxDQUFDQyxPQUFPLENBQUNDLFlBQVksSUFBSTtJQUNyRDlELEtBQUssSUFBSSxDQUFDLENBQUMsRUFBRTdCLFlBQVksQ0FBQzRGLFdBQVcsRUFBRUQsWUFBWSxFQUFFO01BQ25EckYsTUFBTTtNQUNOdUYsa0JBQWtCLEVBQUVuRixXQUFXLEtBQUtrQjtJQUN0QyxDQUFDLENBQUM7RUFDSixDQUFDLENBQUM7RUFDRixJQUFJa0UsV0FBVztFQUNmLElBQUlqRSxLQUFLLENBQUNrRSxNQUFNLEtBQUssQ0FBQyxFQUFFO0lBQ3RCLElBQUl6RixNQUFNLEtBQUssS0FBSyxFQUFFO01BQ3BCd0YsV0FBVyxHQUFHLDZFQUE2RSxHQUFHLHNFQUFzRSxHQUFHLHFHQUFxRztJQUM5USxDQUFDLE1BQU07TUFDTEEsV0FBVyxHQUFHLCtCQUErQjtJQUMvQztFQUNGLENBQUMsTUFBTTtJQUNMQSxXQUFXLEdBQUc7QUFDbEIsZUFBZXhGLE1BQU0sS0FBSyxLQUFLLEdBQUcsWUFBWSxHQUFHLFdBQVc7QUFDNUQ7QUFDQSxJQUFJdUIsS0FBSyxDQUFDbUUsT0FBTyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQ0EsT0FBTyxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUM7QUFDN0QsQ0FBQyxDQUFDQyxJQUFJLENBQUMsQ0FBQztFQUNOO0VBQ0EsSUFBSWIsUUFBUSxHQUFHLEVBQUU7RUFDakIsSUFBSTNFLElBQUksS0FBS21CLFNBQVMsRUFBRTtJQUN0QndELFFBQVEsR0FBRyxFQUFFO0VBQ2YsQ0FBQyxNQUFNLElBQUksT0FBTzNFLElBQUksS0FBSyxRQUFRLEVBQUU7SUFDbkMyRSxRQUFRLEdBQUcsY0FBYzNFLElBQUksR0FBRztFQUNsQyxDQUFDLE1BQU07SUFDTDJFLFFBQVEsR0FBRyxlQUFlM0UsSUFBSSxJQUFJO0VBQ3BDO0VBQ0EsSUFBSXlGLGVBQWUsR0FBRyxFQUFFO0VBQ3hCLElBQUl4RixXQUFXLEtBQUtrQixTQUFTLEVBQUU7SUFDN0JzRSxlQUFlLEdBQUcsRUFBRTtFQUN0QixDQUFDLE1BQU0sSUFBSSxPQUFPeEYsV0FBVyxLQUFLLFFBQVEsRUFBRTtJQUMxQ3dGLGVBQWUsR0FBRyxxQkFBcUJ4RixXQUFXLEdBQUc7RUFDdkQsQ0FBQyxNQUFNO0lBQ0x3RixlQUFlLEdBQUcsc0JBQXNCeEYsV0FBVyxJQUFJO0VBQ3pEO0VBQ0EsT0FBTztBQUNULG9CQUFvQkosTUFBTSxLQUFLLEtBQUssR0FBRyxhQUFhLEdBQUcsRUFBRSwwQkFBMEJELElBQUksSUFBSStFLFFBQVEsR0FBR2MsZUFBZTtBQUNySDtBQUNBLEVBQUVKLFdBQVcsRUFBRSxDQUFDRyxJQUFJLENBQUMsQ0FBQztBQUN0QixDQUFDO0FBQ0QsTUFBTUUsNkJBQTZCLEdBQUc5RyxPQUFPLENBQUNHLGNBQWMsR0FBRyxDQUFDLENBQUMsRUFBRVMsYUFBYSxDQUFDbUcsNEJBQTRCLEVBQUU1RyxjQUFjLEVBQUVBLGNBQWMsQ0FBQ2lCLElBQUksRUFBRSxVQUFVLENBQUM7QUFDL0osTUFBTSxDQUFDbEIsV0FBVyxFQUFFRyxZQUFZLEVBQUVELFNBQVMsRUFBRUcsYUFBYSxFQUFFRCxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRVEsU0FBUyxDQUFDa0csWUFBWSxFQUFFN0csY0FBYyxFQUFFNkYsZ0JBQWdCLEVBQUVFLGVBQWUsQ0FBQztBQUN4SmxHLE9BQU8sQ0FBQ00sVUFBVSxHQUFHQSxVQUFVO0FBQy9CTixPQUFPLENBQUNPLGFBQWEsR0FBR0EsYUFBYTtBQUNyQ1AsT0FBTyxDQUFDSSxTQUFTLEdBQUdBLFNBQVM7QUFDN0JKLE9BQU8sQ0FBQ0ssWUFBWSxHQUFHQSxZQUFZO0FBQ25DTCxPQUFPLENBQUNFLFdBQVcsR0FBR0EsV0FBVyIsImlnbm9yZUxpc3QiOltdfQ==