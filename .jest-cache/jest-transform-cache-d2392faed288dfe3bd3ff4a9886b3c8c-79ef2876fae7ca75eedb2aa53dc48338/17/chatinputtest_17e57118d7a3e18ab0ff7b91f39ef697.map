{"file":"C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\tests\\unit\\chat-input.test.tsx","mappings":"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","names":[],"sources":["C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\tests\\unit\\chat-input.test.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { render, screen, fireEvent, waitFor } from \"@testing-library/react\";\r\nimport userEvent from \"@testing-library/user-event\";\r\nimport { ChatInput } from \"../../src/components/ui/chat-input\";\r\n\r\ndescribe(\"ChatInput\", () => {\r\n  const mockOnSend = jest.fn();\r\n  const mockOnStop = jest.fn();\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it(\"renders chat input with correct placeholder\", () => {\r\n    render(<ChatInput onSend={mockOnSend} />);\r\n    \r\n    const textarea = screen.getByRole(\"textbox\");\r\n    expect(textarea).toBeInTheDocument();\r\n    expect(textarea).toHaveAttribute(\r\n      \"placeholder\",\r\n      \"Type your message... (Enter to send, Shift+Enter for new line)\"\r\n    );\r\n  });\r\n\r\n  it(\"displays send button when not streaming\", () => {\r\n    render(<ChatInput onSend={mockOnSend} isStreaming={false} />);\r\n    \r\n    const sendButton = screen.getByRole(\"button\", { name: /send message/i });\r\n    expect(sendButton).toBeInTheDocument();\r\n    expect(sendButton).toHaveTextContent(\"Send\");\r\n  });\r\n\r\n  it(\"displays stop button when streaming\", () => {\r\n    render(<ChatInput onSend={mockOnSend} onStop={mockOnStop} isStreaming={true} />);\r\n    \r\n    const stopButton = screen.getByRole(\"button\", { name: /stop streaming response/i });\r\n    expect(stopButton).toBeInTheDocument();\r\n    expect(stopButton).toHaveTextContent(\"Stop\");\r\n  });\r\n\r\n  it(\"sends message on Enter key press\", async () => {\r\n    const user = userEvent.setup();\r\n    render(<ChatInput onSend={mockOnSend} />);\r\n    \r\n    const textarea = screen.getByRole(\"textbox\");\r\n    await user.type(textarea, \"Test message\");\r\n    await user.keyboard(\"{Enter}\");\r\n    \r\n    expect(mockOnSend).toHaveBeenCalledWith(\"Test message\");\r\n  });\r\n\r\n  it(\"adds new line on Shift+Enter\", async () => {\r\n    const user = userEvent.setup();\r\n    render(<ChatInput onSend={mockOnSend} />);\r\n    \r\n    const textarea = screen.getByRole(\"textbox\");\r\n    await user.type(textarea, \"Line 1\");\r\n    await user.keyboard(\"{Shift>}{Enter}{/Shift}\");\r\n    await user.type(textarea, \"Line 2\");\r\n    \r\n    expect(textarea).toHaveValue(\"Line 1\\nLine 2\");\r\n    expect(mockOnSend).not.toHaveBeenCalled();\r\n  });\r\n\r\n  it(\"sends message on button click\", async () => {\r\n    const user = userEvent.setup();\r\n    render(<ChatInput onSend={mockOnSend} />);\r\n    \r\n    const textarea = screen.getByRole(\"textbox\");\r\n    const sendButton = screen.getByRole(\"button\", { name: /send message/i });\r\n    \r\n    await user.type(textarea, \"Test message\");\r\n    await user.click(sendButton);\r\n    \r\n    expect(mockOnSend).toHaveBeenCalledWith(\"Test message\");\r\n  });\r\n\r\n  it(\"clears input after sending message\", async () => {\r\n    const user = userEvent.setup();\r\n    render(<ChatInput onSend={mockOnSend} />);\r\n    \r\n    const textarea = screen.getByRole(\"textbox\");\r\n    await user.type(textarea, \"Test message\");\r\n    await user.keyboard(\"{Enter}\");\r\n    \r\n    expect(textarea).toHaveValue(\"\");\r\n  });\r\n\r\n  it(\"disables send button for empty input\", () => {\r\n    render(<ChatInput onSend={mockOnSend} />);\r\n    \r\n    const sendButton = screen.getByRole(\"button\", { name: /send message/i });\r\n    expect(sendButton).toBeDisabled();\r\n  });\r\n\r\n  it(\"disables send button for whitespace-only input\", async () => {\r\n    const user = userEvent.setup();\r\n    render(<ChatInput onSend={mockOnSend} />);\r\n    \r\n    const textarea = screen.getByRole(\"textbox\");\r\n    const sendButton = screen.getByRole(\"button\", { name: /send message/i });\r\n    \r\n    await user.type(textarea, \"   \");\r\n    expect(sendButton).toBeDisabled();\r\n  });\r\n\r\n  it(\"enables send button for valid input\", async () => {\r\n    const user = userEvent.setup();\r\n    render(<ChatInput onSend={mockOnSend} />);\r\n    \r\n    const textarea = screen.getByRole(\"textbox\");\r\n    const sendButton = screen.getByRole(\"button\", { name: /send message/i });\r\n    \r\n    await user.type(textarea, \"Valid message\");\r\n    expect(sendButton).not.toBeDisabled();\r\n  });\r\n\r\n  it(\"calls onStop when stop button is clicked\", async () => {\r\n    const user = userEvent.setup();\r\n    render(<ChatInput onSend={mockOnSend} onStop={mockOnStop} isStreaming={true} />);\r\n    \r\n    const stopButton = screen.getByRole(\"button\", { name: /stop streaming response/i });\r\n    await user.click(stopButton);\r\n    \r\n    expect(mockOnStop).toHaveBeenCalled();\r\n  });\r\n\r\n  it(\"auto-resizes textarea as content grows\", async () => {\r\n    const user = userEvent.setup();\r\n    render(<ChatInput onSend={mockOnSend} maxLines={5} />);\r\n    \r\n    const textarea = screen.getByRole(\"textbox\");\r\n    const initialHeight = textarea.style.height;\r\n    \r\n    // Add multiple lines\r\n    await user.type(textarea, \"Line 1\\nLine 2\\nLine 3\\nLine 4\");\r\n    \r\n    // Height should have increased\r\n    expect(textarea.style.height).not.toBe(initialHeight);\r\n  });\r\n\r\n  it(\"does not send empty messages\", async () => {\r\n    const user = userEvent.setup();\r\n    render(<ChatInput onSend={mockOnSend} />);\r\n    \r\n    const textarea = screen.getByRole(\"textbox\");\r\n    await user.keyboard(\"{Enter}\");\r\n    \r\n    expect(mockOnSend).not.toHaveBeenCalled();\r\n  });\r\n\r\n  it(\"trims whitespace from messages before sending\", async () => {\r\n    const user = userEvent.setup();\r\n    render(<ChatInput onSend={mockOnSend} />);\r\n    \r\n    const textarea = screen.getByRole(\"textbox\");\r\n    await user.type(textarea, \"  Test message  \");\r\n    await user.keyboard(\"{Enter}\");\r\n    \r\n    expect(mockOnSend).toHaveBeenCalledWith(\"Test message\");\r\n  });\r\n\r\n  it(\"prevents sending when streaming\", async () => {\r\n    const user = userEvent.setup();\r\n    render(<ChatInput onSend={mockOnSend} isStreaming={true} />);\r\n    \r\n    const textarea = screen.getByRole(\"textbox\");\r\n    await user.type(textarea, \"Test message\");\r\n    await user.keyboard(\"{Enter}\");\r\n    \r\n    expect(mockOnSend).not.toHaveBeenCalled();\r\n  });\r\n\r\n  it(\"maintains focus after sending message\", async () => {\r\n    const user = userEvent.setup();\r\n    render(<ChatInput onSend={mockOnSend} />);\r\n    \r\n    const textarea = screen.getByRole(\"textbox\");\r\n    await user.type(textarea, \"Test message\");\r\n    await user.keyboard(\"{Enter}\");\r\n    \r\n    await waitFor(() => {\r\n      expect(textarea).toHaveFocus();\r\n    });\r\n  });\r\n});"],"version":3}