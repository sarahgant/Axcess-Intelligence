a1442f58609d480e463b3d953f269cdd
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logDOM = void 0;
exports.prettyDOM = prettyDOM;
exports.prettyFormat = void 0;
var prettyFormat = _interopRequireWildcard(require("pretty-format"));
exports.prettyFormat = prettyFormat;
var _DOMElementFilter = _interopRequireDefault(require("./DOMElementFilter"));
var _getUserCodeFrame = require("./get-user-code-frame");
var _helpers = require("./helpers");
var _config = require("./config");
function _interopRequireWildcard(e, t) {
  if ("function" == typeof WeakMap) var r = new WeakMap(),
    n = new WeakMap();
  return (_interopRequireWildcard = function (e, t) {
    if (!t && e && e.__esModule) return e;
    var o,
      i,
      f = {
        __proto__: null,
        default: e
      };
    if (null === e || "object" != typeof e && "function" != typeof e) return f;
    if (o = t ? n : r) {
      if (o.has(e)) return o.get(e);
      o.set(e, f);
    }
    for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]);
    return f;
  })(e, t);
}
const shouldHighlight = () => {
  if (typeof process === 'undefined') {
    // Don't colorize in non-node environments (e.g. Browsers)
    return false;
  }
  let colors;
  // Try to safely parse env COLORS: We will default behavior if any step fails.
  try {
    const colorsJSON = process.env?.COLORS;
    if (colorsJSON) {
      colors = JSON.parse(colorsJSON);
    }
  } catch {
    // If this throws, process.env?.COLORS wasn't parsable. Since we only
    // care about `true` or `false`, we can safely ignore the error.
  }
  if (typeof colors === 'boolean') {
    // If `colors` is set explicitly (both `true` and `false`), use that value.
    return colors;
  } else {
    // If `colors` is not set, colorize if we're in node.
    return process.versions !== undefined && process.versions.node !== undefined;
  }
};
const {
  DOMCollection
} = prettyFormat.plugins;

// https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType#node_type_constants
const ELEMENT_NODE = 1;
const COMMENT_NODE = 8;

// https://github.com/facebook/jest/blob/615084195ae1ae61ddd56162c62bbdda17587569/packages/pretty-format/src/plugins/DOMElement.ts#L50
function filterCommentsAndDefaultIgnoreTagsTags(value) {
  return value.nodeType !== COMMENT_NODE && (value.nodeType !== ELEMENT_NODE || !value.matches((0, _config.getConfig)().defaultIgnore));
}
function prettyDOM(dom, maxLength, options = {}) {
  if (!dom) {
    dom = (0, _helpers.getDocument)().body;
  }
  if (typeof maxLength !== 'number') {
    maxLength = typeof process !== 'undefined' && typeof process.env !== 'undefined' && process.env.DEBUG_PRINT_LIMIT || 7000;
  }
  if (maxLength === 0) {
    return '';
  }
  if (dom.documentElement) {
    dom = dom.documentElement;
  }
  let domTypeName = typeof dom;
  if (domTypeName === 'object') {
    domTypeName = dom.constructor.name;
  } else {
    // To don't fall with `in` operator
    dom = {};
  }
  if (!('outerHTML' in dom)) {
    throw new TypeError(`Expected an element or document but got ${domTypeName}`);
  }
  const {
    filterNode = filterCommentsAndDefaultIgnoreTagsTags,
    ...prettyFormatOptions
  } = options;
  const debugContent = prettyFormat.format(dom, {
    plugins: [(0, _DOMElementFilter.default)(filterNode), DOMCollection],
    printFunctionName: false,
    highlight: shouldHighlight(),
    ...prettyFormatOptions
  });
  return maxLength !== undefined && dom.outerHTML.length > maxLength ? `${debugContent.slice(0, maxLength)}...` : debugContent;
}
const logDOM = (...args) => {
  const userCodeFrame = (0, _getUserCodeFrame.getUserCodeFrame)();
  if (userCodeFrame) {
    console.log(`${prettyDOM(...args)}\n\n${userCodeFrame}`);
  } else {
    console.log(prettyDOM(...args));
  }
};
exports.logDOM = logDOM;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibG9nRE9NIiwicHJldHR5RE9NIiwicHJldHR5Rm9ybWF0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfRE9NRWxlbWVudEZpbHRlciIsIl9nZXRVc2VyQ29kZUZyYW1lIiwiX2hlbHBlcnMiLCJfY29uZmlnIiwiZSIsInQiLCJXZWFrTWFwIiwiciIsIm4iLCJfX2VzTW9kdWxlIiwibyIsImkiLCJmIiwiX19wcm90b19fIiwiZGVmYXVsdCIsImhhcyIsImdldCIsInNldCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInNob3VsZEhpZ2hsaWdodCIsInByb2Nlc3MiLCJjb2xvcnMiLCJjb2xvcnNKU09OIiwiZW52IiwiQ09MT1JTIiwiSlNPTiIsInBhcnNlIiwidmVyc2lvbnMiLCJ1bmRlZmluZWQiLCJub2RlIiwiRE9NQ29sbGVjdGlvbiIsInBsdWdpbnMiLCJFTEVNRU5UX05PREUiLCJDT01NRU5UX05PREUiLCJmaWx0ZXJDb21tZW50c0FuZERlZmF1bHRJZ25vcmVUYWdzVGFncyIsIm5vZGVUeXBlIiwibWF0Y2hlcyIsImdldENvbmZpZyIsImRlZmF1bHRJZ25vcmUiLCJkb20iLCJtYXhMZW5ndGgiLCJvcHRpb25zIiwiZ2V0RG9jdW1lbnQiLCJib2R5IiwiREVCVUdfUFJJTlRfTElNSVQiLCJkb2N1bWVudEVsZW1lbnQiLCJkb21UeXBlTmFtZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsIlR5cGVFcnJvciIsImZpbHRlck5vZGUiLCJwcmV0dHlGb3JtYXRPcHRpb25zIiwiZGVidWdDb250ZW50IiwiZm9ybWF0IiwicHJpbnRGdW5jdGlvbk5hbWUiLCJoaWdobGlnaHQiLCJvdXRlckhUTUwiLCJsZW5ndGgiLCJzbGljZSIsImFyZ3MiLCJ1c2VyQ29kZUZyYW1lIiwiZ2V0VXNlckNvZGVGcmFtZSIsImNvbnNvbGUiLCJsb2ciXSwic291cmNlcyI6WyJwcmV0dHktZG9tLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmxvZ0RPTSA9IHZvaWQgMDtcbmV4cG9ydHMucHJldHR5RE9NID0gcHJldHR5RE9NO1xuZXhwb3J0cy5wcmV0dHlGb3JtYXQgPSB2b2lkIDA7XG52YXIgcHJldHR5Rm9ybWF0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInByZXR0eS1mb3JtYXRcIikpO1xuZXhwb3J0cy5wcmV0dHlGb3JtYXQgPSBwcmV0dHlGb3JtYXQ7XG52YXIgX0RPTUVsZW1lbnRGaWx0ZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0RPTUVsZW1lbnRGaWx0ZXJcIikpO1xudmFyIF9nZXRVc2VyQ29kZUZyYW1lID0gcmVxdWlyZShcIi4vZ2V0LXVzZXItY29kZS1mcmFtZVwiKTtcbnZhciBfaGVscGVycyA9IHJlcXVpcmUoXCIuL2hlbHBlcnNcIik7XG52YXIgX2NvbmZpZyA9IHJlcXVpcmUoXCIuL2NvbmZpZ1wiKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKGUsIHQpIHsgaWYgKFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgV2Vha01hcCkgdmFyIHIgPSBuZXcgV2Vha01hcCgpLCBuID0gbmV3IFdlYWtNYXAoKTsgcmV0dXJuIChfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IGZ1bmN0aW9uIChlLCB0KSB7IGlmICghdCAmJiBlICYmIGUuX19lc01vZHVsZSkgcmV0dXJuIGU7IHZhciBvLCBpLCBmID0geyBfX3Byb3RvX186IG51bGwsIGRlZmF1bHQ6IGUgfTsgaWYgKG51bGwgPT09IGUgfHwgXCJvYmplY3RcIiAhPSB0eXBlb2YgZSAmJiBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUpIHJldHVybiBmOyBpZiAobyA9IHQgPyBuIDogcikgeyBpZiAoby5oYXMoZSkpIHJldHVybiBvLmdldChlKTsgby5zZXQoZSwgZik7IH0gZm9yIChjb25zdCB0IGluIGUpIFwiZGVmYXVsdFwiICE9PSB0ICYmIHt9Lmhhc093blByb3BlcnR5LmNhbGwoZSwgdCkgJiYgKChpID0gKG8gPSBPYmplY3QuZGVmaW5lUHJvcGVydHkpICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgdCkpICYmIChpLmdldCB8fCBpLnNldCkgPyBvKGYsIHQsIGkpIDogZlt0XSA9IGVbdF0pOyByZXR1cm4gZjsgfSkoZSwgdCk7IH1cbmNvbnN0IHNob3VsZEhpZ2hsaWdodCA9ICgpID0+IHtcbiAgaWYgKHR5cGVvZiBwcm9jZXNzID09PSAndW5kZWZpbmVkJykge1xuICAgIC8vIERvbid0IGNvbG9yaXplIGluIG5vbi1ub2RlIGVudmlyb25tZW50cyAoZS5nLiBCcm93c2VycylcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgbGV0IGNvbG9ycztcbiAgLy8gVHJ5IHRvIHNhZmVseSBwYXJzZSBlbnYgQ09MT1JTOiBXZSB3aWxsIGRlZmF1bHQgYmVoYXZpb3IgaWYgYW55IHN0ZXAgZmFpbHMuXG4gIHRyeSB7XG4gICAgY29uc3QgY29sb3JzSlNPTiA9IHByb2Nlc3MuZW52Py5DT0xPUlM7XG4gICAgaWYgKGNvbG9yc0pTT04pIHtcbiAgICAgIGNvbG9ycyA9IEpTT04ucGFyc2UoY29sb3JzSlNPTik7XG4gICAgfVxuICB9IGNhdGNoIHtcbiAgICAvLyBJZiB0aGlzIHRocm93cywgcHJvY2Vzcy5lbnY/LkNPTE9SUyB3YXNuJ3QgcGFyc2FibGUuIFNpbmNlIHdlIG9ubHlcbiAgICAvLyBjYXJlIGFib3V0IGB0cnVlYCBvciBgZmFsc2VgLCB3ZSBjYW4gc2FmZWx5IGlnbm9yZSB0aGUgZXJyb3IuXG4gIH1cbiAgaWYgKHR5cGVvZiBjb2xvcnMgPT09ICdib29sZWFuJykge1xuICAgIC8vIElmIGBjb2xvcnNgIGlzIHNldCBleHBsaWNpdGx5IChib3RoIGB0cnVlYCBhbmQgYGZhbHNlYCksIHVzZSB0aGF0IHZhbHVlLlxuICAgIHJldHVybiBjb2xvcnM7XG4gIH0gZWxzZSB7XG4gICAgLy8gSWYgYGNvbG9yc2AgaXMgbm90IHNldCwgY29sb3JpemUgaWYgd2UncmUgaW4gbm9kZS5cbiAgICByZXR1cm4gcHJvY2Vzcy52ZXJzaW9ucyAhPT0gdW5kZWZpbmVkICYmIHByb2Nlc3MudmVyc2lvbnMubm9kZSAhPT0gdW5kZWZpbmVkO1xuICB9XG59O1xuY29uc3Qge1xuICBET01Db2xsZWN0aW9uXG59ID0gcHJldHR5Rm9ybWF0LnBsdWdpbnM7XG5cbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9Ob2RlL25vZGVUeXBlI25vZGVfdHlwZV9jb25zdGFudHNcbmNvbnN0IEVMRU1FTlRfTk9ERSA9IDE7XG5jb25zdCBDT01NRU5UX05PREUgPSA4O1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svamVzdC9ibG9iLzYxNTA4NDE5NWFlMWFlNjFkZGQ1NjE2MmM2MmJiZGRhMTc1ODc1NjkvcGFja2FnZXMvcHJldHR5LWZvcm1hdC9zcmMvcGx1Z2lucy9ET01FbGVtZW50LnRzI0w1MFxuZnVuY3Rpb24gZmlsdGVyQ29tbWVudHNBbmREZWZhdWx0SWdub3JlVGFnc1RhZ3ModmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlLm5vZGVUeXBlICE9PSBDT01NRU5UX05PREUgJiYgKHZhbHVlLm5vZGVUeXBlICE9PSBFTEVNRU5UX05PREUgfHwgIXZhbHVlLm1hdGNoZXMoKDAsIF9jb25maWcuZ2V0Q29uZmlnKSgpLmRlZmF1bHRJZ25vcmUpKTtcbn1cbmZ1bmN0aW9uIHByZXR0eURPTShkb20sIG1heExlbmd0aCwgb3B0aW9ucyA9IHt9KSB7XG4gIGlmICghZG9tKSB7XG4gICAgZG9tID0gKDAsIF9oZWxwZXJzLmdldERvY3VtZW50KSgpLmJvZHk7XG4gIH1cbiAgaWYgKHR5cGVvZiBtYXhMZW5ndGggIT09ICdudW1iZXInKSB7XG4gICAgbWF4TGVuZ3RoID0gdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBwcm9jZXNzLmVudiAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy5lbnYuREVCVUdfUFJJTlRfTElNSVQgfHwgNzAwMDtcbiAgfVxuICBpZiAobWF4TGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIGlmIChkb20uZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgZG9tID0gZG9tLmRvY3VtZW50RWxlbWVudDtcbiAgfVxuICBsZXQgZG9tVHlwZU5hbWUgPSB0eXBlb2YgZG9tO1xuICBpZiAoZG9tVHlwZU5hbWUgPT09ICdvYmplY3QnKSB7XG4gICAgZG9tVHlwZU5hbWUgPSBkb20uY29uc3RydWN0b3IubmFtZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBUbyBkb24ndCBmYWxsIHdpdGggYGluYCBvcGVyYXRvclxuICAgIGRvbSA9IHt9O1xuICB9XG4gIGlmICghKCdvdXRlckhUTUwnIGluIGRvbSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBFeHBlY3RlZCBhbiBlbGVtZW50IG9yIGRvY3VtZW50IGJ1dCBnb3QgJHtkb21UeXBlTmFtZX1gKTtcbiAgfVxuICBjb25zdCB7XG4gICAgZmlsdGVyTm9kZSA9IGZpbHRlckNvbW1lbnRzQW5kRGVmYXVsdElnbm9yZVRhZ3NUYWdzLFxuICAgIC4uLnByZXR0eUZvcm1hdE9wdGlvbnNcbiAgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IGRlYnVnQ29udGVudCA9IHByZXR0eUZvcm1hdC5mb3JtYXQoZG9tLCB7XG4gICAgcGx1Z2luczogWygwLCBfRE9NRWxlbWVudEZpbHRlci5kZWZhdWx0KShmaWx0ZXJOb2RlKSwgRE9NQ29sbGVjdGlvbl0sXG4gICAgcHJpbnRGdW5jdGlvbk5hbWU6IGZhbHNlLFxuICAgIGhpZ2hsaWdodDogc2hvdWxkSGlnaGxpZ2h0KCksXG4gICAgLi4ucHJldHR5Rm9ybWF0T3B0aW9uc1xuICB9KTtcbiAgcmV0dXJuIG1heExlbmd0aCAhPT0gdW5kZWZpbmVkICYmIGRvbS5vdXRlckhUTUwubGVuZ3RoID4gbWF4TGVuZ3RoID8gYCR7ZGVidWdDb250ZW50LnNsaWNlKDAsIG1heExlbmd0aCl9Li4uYCA6IGRlYnVnQ29udGVudDtcbn1cbmNvbnN0IGxvZ0RPTSA9ICguLi5hcmdzKSA9PiB7XG4gIGNvbnN0IHVzZXJDb2RlRnJhbWUgPSAoMCwgX2dldFVzZXJDb2RlRnJhbWUuZ2V0VXNlckNvZGVGcmFtZSkoKTtcbiAgaWYgKHVzZXJDb2RlRnJhbWUpIHtcbiAgICBjb25zb2xlLmxvZyhgJHtwcmV0dHlET00oLi4uYXJncyl9XFxuXFxuJHt1c2VyQ29kZUZyYW1lfWApO1xuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUubG9nKHByZXR0eURPTSguLi5hcmdzKSk7XG4gIH1cbn07XG5leHBvcnRzLmxvZ0RPTSA9IGxvZ0RPTTsiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVosSUFBSUEsc0JBQXNCLEdBQUdDLE9BQU8sQ0FBQyw4Q0FBOEMsQ0FBQztBQUNwRkMsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FBQztBQUNGRCxPQUFPLENBQUNFLE1BQU0sR0FBRyxLQUFLLENBQUM7QUFDdkJGLE9BQU8sQ0FBQ0csU0FBUyxHQUFHQSxTQUFTO0FBQzdCSCxPQUFPLENBQUNJLFlBQVksR0FBRyxLQUFLLENBQUM7QUFDN0IsSUFBSUEsWUFBWSxHQUFHQyx1QkFBdUIsQ0FBQ1IsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ3BFRyxPQUFPLENBQUNJLFlBQVksR0FBR0EsWUFBWTtBQUNuQyxJQUFJ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