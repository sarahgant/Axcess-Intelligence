{"file":"C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\src\\components\\ui\\chat-input.tsx","mappings":"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","names":[],"sources":["C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\src\\components\\ui\\chat-input.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { cn } from \"../../lib/utils\";\nimport { messageSchema, sanitizeInput } from \"../../core/validation/schemas\";\n\nexport interface ChatInputProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {\n  onSend?: (message: string) => void;\n  onStop?: () => void;\n  isStreaming?: boolean;\n  maxLines?: number;\n}\n\nconst ChatInput = React.forwardRef<HTMLTextAreaElement, ChatInputProps>(\n  ({ className, onSend, onStop, isStreaming = false, maxLines = 10, ...props }, ref) => {\n    const [value, setValue] = React.useState(\"\");\n    const textareaRef = React.useRef<HTMLTextAreaElement>(null);\n    const [currentHeight, setCurrentHeight] = React.useState<number>(40); // Base height for single line\n    \n    // Merge refs\n    React.useImperativeHandle(ref, () => textareaRef.current!);\n\n    // Enhanced auto-resize functionality with improved calculations\n    const adjustHeight = React.useCallback(() => {\n      const textarea = textareaRef.current;\n      if (!textarea) return;\n\n      // Temporarily reset height to auto to get accurate scrollHeight\n      textarea.style.height = \"auto\";\n      \n      // Get computed styles for accurate calculations\n      const computedStyle = getComputedStyle(textarea);\n      const lineHeight = parseInt(computedStyle.lineHeight) || 20; // Fallback to 20px\n      const paddingTop = parseInt(computedStyle.paddingTop) || 0;\n      const paddingBottom = parseInt(computedStyle.paddingBottom) || 0;\n      const borderTop = parseInt(computedStyle.borderTopWidth) || 0;\n      const borderBottom = parseInt(computedStyle.borderBottomWidth) || 0;\n      \n      // Calculate minimum height (single line)\n      const minHeight = lineHeight + paddingTop + paddingBottom + borderTop + borderBottom;\n      \n      // Ensure maxLines is valid (minimum 1, maximum 20 for safety)\n      const validMaxLines = Math.max(1, Math.min(maxLines || 10, 20));\n      const maxHeight = (lineHeight * validMaxLines) + paddingTop + paddingBottom + borderTop + borderBottom;\n      \n      // Calculate new height based on content\n      const contentHeight = Math.max(minHeight, Math.min(textarea.scrollHeight, maxHeight));\n      \n      // Set the height and update state\n      textarea.style.height = `${contentHeight}px`;\n      setCurrentHeight(contentHeight);\n      \n      // Handle overflow for content exceeding max lines\n      if (textarea.scrollHeight > maxHeight) {\n        textarea.style.overflowY = \"auto\";\n      } else {\n        textarea.style.overflowY = \"hidden\";\n      }\n    }, [maxLines]);\n\n    // Handle input change\n    const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n      setValue(e.target.value);\n      adjustHeight();\n      props.onChange?.(e);\n    };\n\n    // Handle key press\n    const handleKeyPress = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n      if (e.key === \"Enter\") {\n        if (e.shiftKey) {\n          // Allow Shift+Enter for new line\n          return;\n        } else {\n          // Send message on Enter\n          e.preventDefault();\n          handleSend();\n        }\n      }\n      props.onKeyDown?.(e);\n    };\n\n    // Handle send message with improved reset behavior\n    const handleSend = () => {\n      const trimmedValue = value.trim();\n      if (trimmedValue && onSend && !isStreaming) {\n        try {\n          // Validate and sanitize input\n          const sanitizedValue = sanitizeInput(trimmedValue);\n          const validatedMessage = messageSchema.parse({\n            content: sanitizedValue,\n            role: 'user'\n          });\n          \n          onSend(validatedMessage.content);\n          setValue(\"\");\n          \n          // Reset to single line height after sending message\n          const textarea = textareaRef.current;\n          if (textarea) {\n            const computedStyle = getComputedStyle(textarea);\n            const lineHeight = parseInt(computedStyle.lineHeight) || 20;\n            const paddingTop = parseInt(computedStyle.paddingTop) || 0;\n            const paddingBottom = parseInt(computedStyle.paddingBottom) || 0;\n            const borderTop = parseInt(computedStyle.borderTopWidth) || 0;\n            const borderBottom = parseInt(computedStyle.borderBottomWidth) || 0;\n            const minHeight = lineHeight + paddingTop + paddingBottom + borderTop + borderBottom;\n            \n            textarea.style.height = `${minHeight}px`;\n            textarea.style.overflowY = \"hidden\";\n            setCurrentHeight(minHeight);\n          }\n          \n          // Ensure focus is maintained\n          setTimeout(() => {\n            if (textareaRef.current) {\n              textareaRef.current.focus();\n            }\n          }, 0);\n        } catch (error) {\n          // Handle validation error - could show user notification\n          console.error('Input validation failed:', error);\n          // For now, just don't send the message\n          return;\n        }\n      }\n    };\n\n    // Handle stop streaming\n    const handleStop = () => {\n      if (onStop && isStreaming) {\n        onStop();\n      }\n    };\n\n    // Initialize height on mount and handle window resize\n    React.useEffect(() => {\n      adjustHeight();\n      \n      // Handle window resize to recalculate height if text reflows\n      const handleResize = () => {\n        setTimeout(adjustHeight, 0);\n      };\n      \n      window.addEventListener('resize', handleResize);\n      return () => window.removeEventListener('resize', handleResize);\n    }, [adjustHeight]);\n\n    // Adjust height when value changes\n    React.useEffect(() => {\n      adjustHeight();\n    }, [value, adjustHeight]);\n\n    // Check if send button should be disabled\n    const isSendDisabled = !value.trim() || isStreaming;\n\n    return (\n      <div className=\"relative flex items-end gap-2 p-4 border-t border-border bg-background\">\n        <div className=\"flex-1 relative\">\n          <textarea\n            ref={textareaRef}\n            className={cn(\n              \"flex w-full resize-none rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n              \"min-h-[2.5rem] overflow-hidden transition-all duration-200 ease-in-out\",\n              className,\n            )}\n            style={{\n              height: `${currentHeight}px`,\n              transition: \"height 200ms ease-in-out\",\n            }}\n            value={value}\n            onChange={handleChange}\n            onKeyDown={handleKeyPress}\n            placeholder=\"Type your message... (Enter to send, Shift+Enter for new line)\"\n            aria-label=\"Chat message input\"\n            aria-describedby=\"chat-input-help\"\n            role=\"textbox\"\n            aria-multiline=\"true\"\n            {...props}\n          />\n          <div id=\"chat-input-help\" className=\"sr-only\">\n            Press Enter to send your message, or Shift+Enter to add a new line. Maximum 10 lines allowed.\n          </div>\n        </div>\n        \n        <div className=\"flex gap-2\">\n          {isStreaming ? (\n            <button\n              type=\"button\"\n              onClick={handleStop}\n              className=\"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring h-9 px-4 py-2 bg-destructive text-destructive-foreground shadow hover:bg-destructive/90\"\n              aria-label=\"Stop streaming response\"\n            >\n              <div className=\"w-3 h-3 bg-current rounded-sm\" />\n              Stop\n            </button>\n          ) : (\n            <button\n              type=\"button\"\n              onClick={handleSend}\n              disabled={isSendDisabled}\n              className=\"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 h-9 px-4 py-2 bg-primary text-primary-foreground shadow hover:bg-primary/90\"\n              aria-label=\"Send message\"\n            >\n              <svg\n                className=\"w-4 h-4\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M12 19l9 2-9-18-9 18 9-2zm0 0v-8\"\n                />\n              </svg>\n              Send\n            </button>\n          )}\n        </div>\n      </div>\n    );\n  },\n);\n\nChatInput.displayName = \"ChatInput\";\n\nexport { ChatInput };"],"version":3}