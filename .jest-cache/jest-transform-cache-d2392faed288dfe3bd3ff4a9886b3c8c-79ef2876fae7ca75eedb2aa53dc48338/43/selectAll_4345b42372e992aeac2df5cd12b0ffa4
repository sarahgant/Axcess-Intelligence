d9455f1ef1ce127b3211778e16cce184
'use strict';

var UI = require('../../document/UI.js');
require('../../utils/dataTransfer/Clipboard.js');
var isContentEditable = require('../../utils/edit/isContentEditable.js');
var selection = require('../../utils/focus/selection.js');
var setSelection = require('./setSelection.js');

/**
 * Expand a selection like the browser does when pressing Ctrl+A.
 */
function selectAll(target) {
  if (selection.hasOwnSelection(target)) {
    return setSelection.setSelection({
      focusNode: target,
      anchorOffset: 0,
      focusOffset: UI.getUIValue(target).length
    });
  }
  var _getContentEditable;
  const focusNode = (_getContentEditable = isContentEditable.getContentEditable(target)) !== null && _getContentEditable !== undefined ? _getContentEditable : target.ownerDocument.body;
  setSelection.setSelection({
    focusNode,
    anchorOffset: 0,
    focusOffset: focusNode.childNodes.length
  });
}
function isAllSelected(target) {
  if (selection.hasOwnSelection(target)) {
    return UI.getUISelection(target).startOffset === 0 && UI.getUISelection(target).endOffset === UI.getUIValue(target).length;
  }
  var _getContentEditable;
  const focusNode = (_getContentEditable = isContentEditable.getContentEditable(target)) !== null && _getContentEditable !== undefined ? _getContentEditable : target.ownerDocument.body;
  const selection$1 = target.ownerDocument.getSelection();
  return (selection$1 === null || selection$1 === undefined ? undefined : selection$1.anchorNode) === focusNode && selection$1.focusNode === focusNode && selection$1.anchorOffset === 0 && selection$1.focusOffset === focusNode.childNodes.length;
}
exports.isAllSelected = isAllSelected;
exports.selectAll = selectAll;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVSSIsInJlcXVpcmUiLCJpc0NvbnRlbnRFZGl0YWJsZSIsInNlbGVjdGlvbiIsInNldFNlbGVjdGlvbiIsInNlbGVjdEFsbCIsInRhcmdldCIsImhhc093blNlbGVjdGlvbiIsImZvY3VzTm9kZSIsImFuY2hvck9mZnNldCIsImZvY3VzT2Zmc2V0IiwiZ2V0VUlWYWx1ZSIsImxlbmd0aCIsIl9nZXRDb250ZW50RWRpdGFibGUiLCJnZXRDb250ZW50RWRpdGFibGUiLCJ1bmRlZmluZWQiLCJvd25lckRvY3VtZW50IiwiYm9keSIsImNoaWxkTm9kZXMiLCJpc0FsbFNlbGVjdGVkIiwiZ2V0VUlTZWxlY3Rpb24iLCJzdGFydE9mZnNldCIsImVuZE9mZnNldCIsInNlbGVjdGlvbiQxIiwiZ2V0U2VsZWN0aW9uIiwiYW5jaG9yTm9kZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJzZWxlY3RBbGwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVUkgPSByZXF1aXJlKCcuLi8uLi9kb2N1bWVudC9VSS5qcycpO1xucmVxdWlyZSgnLi4vLi4vdXRpbHMvZGF0YVRyYW5zZmVyL0NsaXBib2FyZC5qcycpO1xudmFyIGlzQ29udGVudEVkaXRhYmxlID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvZWRpdC9pc0NvbnRlbnRFZGl0YWJsZS5qcycpO1xudmFyIHNlbGVjdGlvbiA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2ZvY3VzL3NlbGVjdGlvbi5qcycpO1xudmFyIHNldFNlbGVjdGlvbiA9IHJlcXVpcmUoJy4vc2V0U2VsZWN0aW9uLmpzJyk7XG5cbi8qKlxuICogRXhwYW5kIGEgc2VsZWN0aW9uIGxpa2UgdGhlIGJyb3dzZXIgZG9lcyB3aGVuIHByZXNzaW5nIEN0cmwrQS5cbiAqLyBmdW5jdGlvbiBzZWxlY3RBbGwodGFyZ2V0KSB7XG4gICAgaWYgKHNlbGVjdGlvbi5oYXNPd25TZWxlY3Rpb24odGFyZ2V0KSkge1xuICAgICAgICByZXR1cm4gc2V0U2VsZWN0aW9uLnNldFNlbGVjdGlvbih7XG4gICAgICAgICAgICBmb2N1c05vZGU6IHRhcmdldCxcbiAgICAgICAgICAgIGFuY2hvck9mZnNldDogMCxcbiAgICAgICAgICAgIGZvY3VzT2Zmc2V0OiBVSS5nZXRVSVZhbHVlKHRhcmdldCkubGVuZ3RoXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB2YXIgX2dldENvbnRlbnRFZGl0YWJsZTtcbiAgICBjb25zdCBmb2N1c05vZGUgPSAoX2dldENvbnRlbnRFZGl0YWJsZSA9IGlzQ29udGVudEVkaXRhYmxlLmdldENvbnRlbnRFZGl0YWJsZSh0YXJnZXQpKSAhPT0gbnVsbCAmJiBfZ2V0Q29udGVudEVkaXRhYmxlICE9PSB1bmRlZmluZWQgPyBfZ2V0Q29udGVudEVkaXRhYmxlIDogdGFyZ2V0Lm93bmVyRG9jdW1lbnQuYm9keTtcbiAgICBzZXRTZWxlY3Rpb24uc2V0U2VsZWN0aW9uKHtcbiAgICAgICAgZm9jdXNOb2RlLFxuICAgICAgICBhbmNob3JPZmZzZXQ6IDAsXG4gICAgICAgIGZvY3VzT2Zmc2V0OiBmb2N1c05vZGUuY2hpbGROb2Rlcy5sZW5ndGhcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGlzQWxsU2VsZWN0ZWQodGFyZ2V0KSB7XG4gICAgaWYgKHNlbGVjdGlvbi5oYXNPd25TZWxlY3Rpb24odGFyZ2V0KSkge1xuICAgICAgICByZXR1cm4gVUkuZ2V0VUlTZWxlY3Rpb24odGFyZ2V0KS5zdGFydE9mZnNldCA9PT0gMCAmJiBVSS5nZXRVSVNlbGVjdGlvbih0YXJnZXQpLmVuZE9mZnNldCA9PT0gVUkuZ2V0VUlWYWx1ZSh0YXJnZXQpLmxlbmd0aDtcbiAgICB9XG4gICAgdmFyIF9nZXRDb250ZW50RWRpdGFibGU7XG4gICAgY29uc3QgZm9jdXNOb2RlID0gKF9nZXRDb250ZW50RWRpdGFibGUgPSBpc0NvbnRlbnRFZGl0YWJsZS5nZXRDb250ZW50RWRpdGFibGUodGFyZ2V0KSkgIT09IG51bGwgJiYgX2dldENvbnRlbnRFZGl0YWJsZSAhPT0gdW5kZWZpbmVkID8gX2dldENvbnRlbnRFZGl0YWJsZSA6IHRhcmdldC5vd25lckRvY3VtZW50LmJvZHk7XG4gICAgY29uc3Qgc2VsZWN0aW9uJDEgPSB0YXJnZXQub3duZXJEb2N1bWVudC5nZXRTZWxlY3Rpb24oKTtcbiAgICByZXR1cm4gKHNlbGVjdGlvbiQxID09PSBudWxsIHx8IHNlbGVjdGlvbiQxID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZWxlY3Rpb24kMS5hbmNob3JOb2RlKSA9PT0gZm9jdXNOb2RlICYmIHNlbGVjdGlvbiQxLmZvY3VzTm9kZSA9PT0gZm9jdXNOb2RlICYmIHNlbGVjdGlvbiQxLmFuY2hvck9mZnNldCA9PT0gMCAmJiBzZWxlY3Rpb24kMS5mb2N1c09mZnNldCA9PT0gZm9jdXNOb2RlLmNoaWxkTm9kZXMubGVuZ3RoO1xufVxuXG5leHBvcnRzLmlzQWxsU2VsZWN0ZWQgPSBpc0FsbFNlbGVjdGVkO1xuZXhwb3J0cy5zZWxlY3RBbGwgPSBzZWxlY3RBbGw7XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVosSUFBSUEsRUFBRSxHQUFHQyxPQUFPLENBQUMsc0JBQXNCLENBQUM7QUFDeENBLE9BQU8sQ0FBQyx1Q0FBdUMsQ0FBQztBQUNoRCxJQUFJQyxpQkFBaUIsR0FBR0QsT0FBTyxDQUFDLHVDQUF1QyxDQUFDO0FBQ3hFLElBQUlFLFNBQVMsR0FBR0YsT0FBTyxDQUFDLGdDQUFnQyxDQUFDO0FBQ3pELElBQUlHLFlBQVksR0FBR0gsT0FBTyxDQUFDLG1CQUFtQixDQUFDOztBQUUvQztBQUNBO0FBQ0E7QUFBSSxTQUFTSSxTQUFTQSxDQUFDQyxNQUFNLEVBQUU7RUFDM0IsSUFBSUgsU0FBUyxDQUFDSSxlQUFlLENBQUNELE1BQU0sQ0FBQyxFQUFFO0lBQ25DLE9BQU9GLFlBQVksQ0FBQ0EsWUFBWSxDQUFDO01BQzdCSSxTQUFTLEVBQUVGLE1BQU07TUFDakJHLFlBQVksRUFBRSxDQUFDO01BQ2ZDLFdBQVcsRUFBRVYsRUFBRSxDQUFDVyxVQUFVLENBQUNMLE1BQU0sQ0FBQyxDQUFDTTtJQUN2QyxDQUFDLENBQUM7RUFDTjtFQUNBLElBQUlDLG1CQUFtQjtFQUN2QixNQUFNTCxTQUFTLEdBQUcsQ0FBQ0ssbUJBQW1CLEdBQUdYLGlCQUFpQixDQUFDWSxrQkFBa0IsQ0FBQ1IsTUFBTSxDQUFDLE1BQU0sSUFBSSxJQUFJTyxtQkFBbUIsS0FBS0UsU0FBUyxHQUFHRixtQkFBbUIsR0FBR1AsTUFBTSxDQUFDVSxhQUFhLENBQUNDLElBQUk7RUFDdExiLFlBQVksQ0FBQ0EsWUFBWSxDQUFDO0lBQ3RCSSxTQUFTO0lBQ1RDLFlBQVksRUFBRSxDQUFDO0lBQ2ZDLFdBQVcsRUFBRUYsU0FBUyxDQUFDVSxVQUFVLENBQUNOO0VBQ3RDLENBQUMsQ0FBQztBQUNOO0FBQ0EsU0FBU08sYUFBYUEsQ0FBQ2IsTUFBTSxFQUFFO0VBQzNCLElBQUlILFNBQVMsQ0FBQ0ksZUFBZSxDQUFDRCxNQUFNLENBQUMsRUFBRTtJQUNuQyxPQUFPTixFQUFFLENBQUNvQixjQUFjLENBQUNkLE1BQU0sQ0FBQyxDQUFDZSxXQUFXLEtBQUssQ0FBQyxJQUFJckIsRUFBRSxDQUFDb0IsY0FBYyxDQUFDZCxNQUFNLENBQUMsQ0FBQ2dCLFNBQVMsS0FBS3RCLEVBQUUsQ0FBQ1csVUFBVSxDQUFDTCxNQUFNLENBQUMsQ0FBQ00sTUFBTTtFQUM5SDtFQUNBLElBQUlDLG1CQUFtQjtFQUN2QixNQUFNTCxTQUFTLEdBQUcsQ0FBQ0ssbUJBQW1CLEdBQUdYLGlCQUFpQixDQUFDWSxrQkFBa0IsQ0FBQ1IsTUFBTSxDQUFDLE1BQU0sSUFBSSxJQUFJTyxtQkFBbUIsS0FBS0UsU0FBUyxHQUFHRixtQkFBbUIsR0FBR1AsTUFBTSxDQUFDVSxhQUFhLENBQUNDLElBQUk7RUFDdEwsTUFBTU0sV0FBVyxHQUFHakIsTUFBTSxDQUFDVSxhQUFhLENBQUNRLFlBQVksQ0FBQyxDQUFDO0VBQ3ZELE9BQU8sQ0FBQ0QsV0FBVyxLQUFLLElBQUksSUFBSUEsV0FBVyxLQUFLUixTQUFTLEdBQUdBLFNBQVMsR0FBR1EsV0FBVyxDQUFDRSxVQUFVLE1BQU1qQixTQUFTLElBQUllLFdBQVcsQ0FBQ2YsU0FBUyxLQUFLQSxTQUFTLElBQUllLFdBQVcsQ0FBQ2QsWUFBWSxLQUFLLENBQUMsSUFBSWMsV0FBVyxDQUFDYixXQUFXLEtBQUtGLFNBQVMsQ0FBQ1UsVUFBVSxDQUFDTixNQUFNO0FBQ3JQO0FBRUFjLE9BQU8sQ0FBQ1AsYUFBYSxHQUFHQSxhQUFhO0FBQ3JDTyxPQUFPLENBQUNyQixTQUFTLEdBQUdBLFNBQVMiLCJpZ25vcmVMaXN0IjpbXX0=