ebde7c0415c258ad5f055a764481bb94
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatInput = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const React = __importStar(require("react"));
const utils_1 = require("../../lib/utils");
const schemas_1 = require("../../core/validation/schemas");
const ChatInput = React.forwardRef(({ className, onSend, onStop, isStreaming = false, maxLines = 10, ...props }, ref) => {
    const [value, setValue] = React.useState("");
    const textareaRef = React.useRef(null);
    // Merge refs
    React.useImperativeHandle(ref, () => textareaRef.current);
    // Auto-resize functionality
    const adjustHeight = React.useCallback(() => {
        const textarea = textareaRef.current;
        if (!textarea)
            return;
        // Reset height to calculate scrollHeight
        textarea.style.height = "auto";
        // Calculate line height and max height
        const lineHeight = parseInt(getComputedStyle(textarea).lineHeight);
        const maxHeight = lineHeight * maxLines;
        const newHeight = Math.min(textarea.scrollHeight, maxHeight);
        textarea.style.height = `${newHeight}px`;
    }, [maxLines]);
    // Handle input change
    const handleChange = (e) => {
        setValue(e.target.value);
        adjustHeight();
        props.onChange?.(e);
    };
    // Handle key press
    const handleKeyPress = (e) => {
        if (e.key === "Enter") {
            if (e.shiftKey) {
                // Allow Shift+Enter for new line
                return;
            }
            else {
                // Send message on Enter
                e.preventDefault();
                handleSend();
            }
        }
        props.onKeyDown?.(e);
    };
    // Handle send message
    const handleSend = () => {
        const trimmedValue = value.trim();
        if (trimmedValue && onSend && !isStreaming) {
            try {
                // Validate and sanitize input
                const sanitizedValue = (0, schemas_1.sanitizeInput)(trimmedValue);
                const validatedMessage = schemas_1.messageSchema.parse({
                    content: sanitizedValue,
                    role: 'user'
                });
                onSend(validatedMessage.content);
                setValue("");
                // Reset height after clearing
                setTimeout(adjustHeight, 0);
            }
            catch (error) {
                // Handle validation error - could show user notification
                console.error('Input validation failed:', error);
                // For now, just don't send the message
                return;
            }
        }
    };
    // Handle stop streaming
    const handleStop = () => {
        if (onStop && isStreaming) {
            onStop();
        }
    };
    // Adjust height on mount and value changes
    React.useEffect(() => {
        adjustHeight();
    }, [adjustHeight]);
    // Check if send button should be disabled
    const isSendDisabled = !value.trim() || isStreaming;
    return ((0, jsx_runtime_1.jsxs)("div", { className: "relative flex items-end gap-2 p-4 border-t border-border bg-background", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex-1 relative", children: [(0, jsx_runtime_1.jsx)("textarea", { ref: textareaRef, className: (0, utils_1.cn)("flex w-full resize-none rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50", "min-h-[2.5rem] max-h-[10rem] overflow-y-auto", className), value: value, onChange: handleChange, onKeyDown: handleKeyPress, placeholder: "Type your message... (Enter to send, Shift+Enter for new line)", "aria-label": "Chat message input", "aria-describedby": "chat-input-help", role: "textbox", "aria-multiline": "true", ...props }), (0, jsx_runtime_1.jsx)("div", { id: "chat-input-help", className: "sr-only", children: "Press Enter to send your message, or Shift+Enter to add a new line. Maximum 10 lines allowed." })] }), (0, jsx_runtime_1.jsx)("div", { className: "flex gap-2", children: isStreaming ? ((0, jsx_runtime_1.jsxs)("button", { type: "button", onClick: handleStop, className: "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring h-9 px-4 py-2 bg-destructive text-destructive-foreground shadow hover:bg-destructive/90", "aria-label": "Stop streaming response", children: [(0, jsx_runtime_1.jsx)("div", { className: "w-3 h-3 bg-current rounded-sm" }), "Stop"] })) : ((0, jsx_runtime_1.jsxs)("button", { type: "button", onClick: handleSend, disabled: isSendDisabled, className: "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 h-9 px-4 py-2 bg-primary text-primary-foreground shadow hover:bg-primary/90", "aria-label": "Send message", children: [(0, jsx_runtime_1.jsx)("svg", { className: "w-4 h-4", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg", children: (0, jsx_runtime_1.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M12 19l9 2-9-18-9 18 9-2zm0 0v-8" }) }), "Send"] })) })] }));
});
exports.ChatInput = ChatInput;
ChatInput.displayName = "ChatInput";
//# sourceMappingURL=data:application/json;charset=utf-8;base64,