{"file":"C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\src\\components\\ui\\chat-input.tsx","mappings":"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","names":[],"sources":["C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\src\\components\\ui\\chat-input.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { cn } from \"../../lib/utils\";\n\nexport interface ChatInputProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {\n  onSend?: (message: string) => void;\n  onStop?: () => void;\n  isStreaming?: boolean;\n  maxLines?: number;\n}\n\nconst ChatInput = React.forwardRef<HTMLTextAreaElement, ChatInputProps>(\n  ({ className, onSend, onStop, isStreaming = false, maxLines = 10, ...props }, ref) => {\n    const [value, setValue] = React.useState(\"\");\n    const textareaRef = React.useRef<HTMLTextAreaElement>(null);\n    \n    // Merge refs\n    React.useImperativeHandle(ref, () => textareaRef.current!);\n\n    // Auto-resize functionality\n    const adjustHeight = React.useCallback(() => {\n      const textarea = textareaRef.current;\n      if (!textarea) return;\n\n      // Reset height to calculate scrollHeight\n      textarea.style.height = \"auto\";\n      \n      // Calculate line height and max height\n      const lineHeight = parseInt(getComputedStyle(textarea).lineHeight);\n      const maxHeight = lineHeight * maxLines;\n      const newHeight = Math.min(textarea.scrollHeight, maxHeight);\n      \n      textarea.style.height = `${newHeight}px`;\n    }, [maxLines]);\n\n    // Handle input change\n    const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n      setValue(e.target.value);\n      adjustHeight();\n      props.onChange?.(e);\n    };\n\n    // Handle key press\n    const handleKeyPress = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n      if (e.key === \"Enter\") {\n        if (e.shiftKey) {\n          // Allow Shift+Enter for new line\n          return;\n        } else {\n          // Send message on Enter\n          e.preventDefault();\n          handleSend();\n        }\n      }\n      props.onKeyDown?.(e);\n    };\n\n    // Handle send message\n    const handleSend = () => {\n      const trimmedValue = value.trim();\n      if (trimmedValue && onSend && !isStreaming) {\n        onSend(trimmedValue);\n        setValue(\"\");\n        // Reset height after clearing\n        setTimeout(adjustHeight, 0);\n      }\n    };\n\n    // Handle stop streaming\n    const handleStop = () => {\n      if (onStop && isStreaming) {\n        onStop();\n      }\n    };\n\n    // Adjust height on mount and value changes\n    React.useEffect(() => {\n      adjustHeight();\n    }, [adjustHeight]);\n\n    // Check if send button should be disabled\n    const isSendDisabled = !value.trim() || isStreaming;\n\n    return (\n      <div className=\"relative flex items-end gap-2 p-4 border-t border-border bg-background\">\n        <div className=\"flex-1 relative\">\n          <textarea\n            ref={textareaRef}\n            className={cn(\n              \"flex w-full resize-none rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n              \"min-h-[2.5rem] max-h-[10rem] overflow-y-auto\",\n              className,\n            )}\n            value={value}\n            onChange={handleChange}\n            onKeyDown={handleKeyPress}\n            placeholder=\"Type your message... (Enter to send, Shift+Enter for new line)\"\n            aria-label=\"Chat message input\"\n            aria-describedby=\"chat-input-help\"\n            role=\"textbox\"\n            aria-multiline=\"true\"\n            {...props}\n          />\n          <div id=\"chat-input-help\" className=\"sr-only\">\n            Press Enter to send your message, or Shift+Enter to add a new line. Maximum 10 lines allowed.\n          </div>\n        </div>\n        \n        <div className=\"flex gap-2\">\n          {isStreaming ? (\n            <button\n              type=\"button\"\n              onClick={handleStop}\n              className=\"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring h-9 px-4 py-2 bg-destructive text-destructive-foreground shadow hover:bg-destructive/90\"\n              aria-label=\"Stop streaming response\"\n            >\n              <div className=\"w-3 h-3 bg-current rounded-sm\" />\n              Stop\n            </button>\n          ) : (\n            <button\n              type=\"button\"\n              onClick={handleSend}\n              disabled={isSendDisabled}\n              className=\"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 h-9 px-4 py-2 bg-primary text-primary-foreground shadow hover:bg-primary/90\"\n              aria-label=\"Send message\"\n            >\n              <svg\n                className=\"w-4 h-4\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M12 19l9 2-9-18-9 18 9-2zm0 0v-8\"\n                />\n              </svg>\n              Send\n            </button>\n          )}\n        </div>\n      </div>\n    );\n  },\n);\n\nChatInput.displayName = \"ChatInput\";\n\nexport { ChatInput };"],"version":3}