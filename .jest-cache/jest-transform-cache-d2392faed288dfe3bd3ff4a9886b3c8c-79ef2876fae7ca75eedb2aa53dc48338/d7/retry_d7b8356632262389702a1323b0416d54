cd047c3a9c79d5b5c1eb04046ebc49cf
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.aggressiveRetry = exports.quickRetry = exports.defaultRetry = exports.RetryWithBackoff = void 0;
const logger_1 = require("../logging/logger");
/**
 * Retry with exponential backoff implementation
 */
class RetryWithBackoff {
    constructor(config) {
        Object.defineProperty(this, "config", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {
                maxAttempts: 3,
                initialDelay: 1000,
                maxDelay: 10000,
                backoffMultiplier: 2,
                retryableErrors: ['NETWORK_ERROR', 'TIMEOUT', '503', '429', '502', '504'],
                jitterRange: 1000
            }
        });
        this.config = { ...this.config, ...config };
    }
    /**
     * Execute a function with retry logic
     */
    async execute(fn, context) {
        const startTime = Date.now();
        let lastError;
        for (let attempt = 1; attempt <= this.config.maxAttempts; attempt++) {
            try {
                logger_1.logger.debug(`Retry attempt ${attempt}/${this.config.maxAttempts}`, {
                    context,
                    attempt,
                    maxAttempts: this.config.maxAttempts
                });
                const result = await fn();
                // Log successful attempt
                if (attempt > 1) {
                    logger_1.logger.info(`Retry succeeded on attempt ${attempt}`, {
                        context,
                        attempts: attempt,
                        totalTime: Date.now() - startTime
                    });
                }
                return result;
            }
            catch (error) {
                lastError = error;
                if (!this.isRetryable(error) || attempt === this.config.maxAttempts) {
                    logger_1.logger.error('Non-retryable error or max attempts reached', {
                        error: lastError.message,
                        errorCode: this.getErrorCode(error),
                        attempt,
                        maxAttempts: this.config.maxAttempts,
                        context,
                        totalTime: Date.now() - startTime
                    });
                    throw error;
                }
                const delay = this.calculateDelay(attempt);
                logger_1.logger.warn(`Retrying after ${delay}ms`, {
                    error: lastError.message,
                    errorCode: this.getErrorCode(error),
                    attempt,
                    nextAttempt: attempt + 1,
                    delay,
                    context
                });
                await this.sleep(delay);
            }
        }
        throw lastError;
    }
    /**
     * Execute with detailed result information
     */
    async executeWithResult(fn, context) {
        const startTime = Date.now();
        let lastError;
        for (let attempt = 1; attempt <= this.config.maxAttempts; attempt++) {
            try {
                const result = await fn();
                return {
                    success: true,
                    data: result,
                    attempts: attempt,
                    totalTime: Date.now() - startTime
                };
            }
            catch (error) {
                lastError = error;
                if (!this.isRetryable(error) || attempt === this.config.maxAttempts) {
                    return {
                        success: false,
                        error: lastError,
                        attempts: attempt,
                        totalTime: Date.now() - startTime
                    };
                }
                const delay = this.calculateDelay(attempt);
                await this.sleep(delay);
            }
        }
        return {
            success: false,
            error: lastError,
            attempts: this.config.maxAttempts,
            totalTime: Date.now() - startTime
        };
    }
    /**
     * Check if an error is retryable
     */
    isRetryable(error) {
        const errorMessage = this.getErrorMessage(error);
        const errorCode = this.getErrorCode(error);
        // Check if error message contains retryable patterns
        const isRetryableMessage = this.config.retryableErrors.some(retryableError => errorMessage.includes(retryableError));
        // Check if error code is retryable
        const isRetryableCode = this.config.retryableErrors.some(retryableError => errorCode.includes(retryableError));
        return isRetryableMessage || isRetryableCode;
    }
    /**
     * Calculate delay with exponential backoff and jitter
     */
    calculateDelay(attempt) {
        const baseDelay = Math.min(this.config.initialDelay * Math.pow(this.config.backoffMultiplier, attempt - 1), this.config.maxDelay);
        // Add jitter to prevent thundering herd
        const jitter = Math.random() * (this.config.jitterRange || 1000);
        return Math.floor(baseDelay + jitter);
    }
    /**
     * Sleep for specified milliseconds
     */
    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
    /**
     * Extract error message from various error types
     */
    getErrorMessage(error) {
        if (error instanceof Error) {
            return error.message;
        }
        if (typeof error === 'string') {
            return error;
        }
        if (error && typeof error === 'object' && 'message' in error) {
            return String(error.message);
        }
        return 'Unknown error';
    }
    /**
     * Extract error code from various error types
     */
    getErrorCode(error) {
        if (error && typeof error === 'object') {
            if ('code' in error) {
                return String(error.code);
            }
            if ('status' in error) {
                return String(error.status);
            }
            if ('statusCode' in error) {
                return String(error.statusCode);
            }
        }
        return '';
    }
    /**
     * Get current retry configuration
     */
    getConfig() {
        return { ...this.config };
    }
    /**
     * Update retry configuration
     */
    updateConfig(config) {
        this.config = { ...this.config, ...config };
    }
}
exports.RetryWithBackoff = RetryWithBackoff;
/**
 * Default retry instance for common use cases
 */
exports.defaultRetry = new RetryWithBackoff();
/**
 * Quick retry utility for simple operations
 */
exports.quickRetry = new RetryWithBackoff({
    maxAttempts: 2,
    initialDelay: 500,
    maxDelay: 2000
});
/**
 * Aggressive retry utility for critical operations
 */
exports.aggressiveRetry = new RetryWithBackoff({
    maxAttempts: 5,
    initialDelay: 2000,
    maxDelay: 30000,
    backoffMultiplier: 1.5
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,