a7274371f79e7e412679a4de0269a2c7
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.queryByAltText = exports.queryAllByAltText = exports.getByAltText = exports.getAllByAltText = exports.findByAltText = exports.findAllByAltText = void 0;
var _queryHelpers = require("../query-helpers");
var _helpers = require("../helpers");
var _allUtils = require("./all-utils");
// Valid tags are img, input, area and custom elements
const VALID_TAG_REGEXP = /^(img|input|area|.+-.+)$/i;
const queryAllByAltText = (container, alt, options = {}) => {
  (0, _helpers.checkContainerType)(container);
  return (0, _queryHelpers.queryAllByAttribute)('alt', container, alt, options).filter(node => VALID_TAG_REGEXP.test(node.tagName));
};
const getMultipleError = (c, alt) => `Found multiple elements with the alt text: ${alt}`;
const getMissingError = (c, alt) => `Unable to find an element with the alt text: ${alt}`;
const queryAllByAltTextWithSuggestions = exports.queryAllByAltText = (0, _queryHelpers.wrapAllByQueryWithSuggestion)(queryAllByAltText, queryAllByAltText.name, 'queryAll');
const [queryByAltText, getAllByAltText, getByAltText, findAllByAltText, findByAltText] = (0, _allUtils.buildQueries)(queryAllByAltText, getMultipleError, getMissingError);
exports.findByAltText = findByAltText;
exports.findAllByAltText = findAllByAltText;
exports.getByAltText = getByAltText;
exports.getAllByAltText = getAllByAltText;
exports.queryByAltText = queryByAltText;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInF1ZXJ5QnlBbHRUZXh0IiwicXVlcnlBbGxCeUFsdFRleHQiLCJnZXRCeUFsdFRleHQiLCJnZXRBbGxCeUFsdFRleHQiLCJmaW5kQnlBbHRUZXh0IiwiZmluZEFsbEJ5QWx0VGV4dCIsIl9xdWVyeUhlbHBlcnMiLCJyZXF1aXJlIiwiX2hlbHBlcnMiLCJfYWxsVXRpbHMiLCJWQUxJRF9UQUdfUkVHRVhQIiwiY29udGFpbmVyIiwiYWx0Iiwib3B0aW9ucyIsImNoZWNrQ29udGFpbmVyVHlwZSIsInF1ZXJ5QWxsQnlBdHRyaWJ1dGUiLCJmaWx0ZXIiLCJub2RlIiwidGVzdCIsInRhZ05hbWUiLCJnZXRNdWx0aXBsZUVycm9yIiwiYyIsImdldE1pc3NpbmdFcnJvciIsInF1ZXJ5QWxsQnlBbHRUZXh0V2l0aFN1Z2dlc3Rpb25zIiwid3JhcEFsbEJ5UXVlcnlXaXRoU3VnZ2VzdGlvbiIsIm5hbWUiLCJidWlsZFF1ZXJpZXMiXSwic291cmNlcyI6WyJhbHQtdGV4dC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMucXVlcnlCeUFsdFRleHQgPSBleHBvcnRzLnF1ZXJ5QWxsQnlBbHRUZXh0ID0gZXhwb3J0cy5nZXRCeUFsdFRleHQgPSBleHBvcnRzLmdldEFsbEJ5QWx0VGV4dCA9IGV4cG9ydHMuZmluZEJ5QWx0VGV4dCA9IGV4cG9ydHMuZmluZEFsbEJ5QWx0VGV4dCA9IHZvaWQgMDtcbnZhciBfcXVlcnlIZWxwZXJzID0gcmVxdWlyZShcIi4uL3F1ZXJ5LWhlbHBlcnNcIik7XG52YXIgX2hlbHBlcnMgPSByZXF1aXJlKFwiLi4vaGVscGVyc1wiKTtcbnZhciBfYWxsVXRpbHMgPSByZXF1aXJlKFwiLi9hbGwtdXRpbHNcIik7XG4vLyBWYWxpZCB0YWdzIGFyZSBpbWcsIGlucHV0LCBhcmVhIGFuZCBjdXN0b20gZWxlbWVudHNcbmNvbnN0IFZBTElEX1RBR19SRUdFWFAgPSAvXihpbWd8aW5wdXR8YXJlYXwuKy0uKykkL2k7XG5jb25zdCBxdWVyeUFsbEJ5QWx0VGV4dCA9IChjb250YWluZXIsIGFsdCwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gICgwLCBfaGVscGVycy5jaGVja0NvbnRhaW5lclR5cGUpKGNvbnRhaW5lcik7XG4gIHJldHVybiAoMCwgX3F1ZXJ5SGVscGVycy5xdWVyeUFsbEJ5QXR0cmlidXRlKSgnYWx0JywgY29udGFpbmVyLCBhbHQsIG9wdGlvbnMpLmZpbHRlcihub2RlID0+IFZBTElEX1RBR19SRUdFWFAudGVzdChub2RlLnRhZ05hbWUpKTtcbn07XG5jb25zdCBnZXRNdWx0aXBsZUVycm9yID0gKGMsIGFsdCkgPT4gYEZvdW5kIG11bHRpcGxlIGVsZW1lbnRzIHdpdGggdGhlIGFsdCB0ZXh0OiAke2FsdH1gO1xuY29uc3QgZ2V0TWlzc2luZ0Vycm9yID0gKGMsIGFsdCkgPT4gYFVuYWJsZSB0byBmaW5kIGFuIGVsZW1lbnQgd2l0aCB0aGUgYWx0IHRleHQ6ICR7YWx0fWA7XG5jb25zdCBxdWVyeUFsbEJ5QWx0VGV4dFdpdGhTdWdnZXN0aW9ucyA9IGV4cG9ydHMucXVlcnlBbGxCeUFsdFRleHQgPSAoMCwgX3F1ZXJ5SGVscGVycy53cmFwQWxsQnlRdWVyeVdpdGhTdWdnZXN0aW9uKShxdWVyeUFsbEJ5QWx0VGV4dCwgcXVlcnlBbGxCeUFsdFRleHQubmFtZSwgJ3F1ZXJ5QWxsJyk7XG5jb25zdCBbcXVlcnlCeUFsdFRleHQsIGdldEFsbEJ5QWx0VGV4dCwgZ2V0QnlBbHRUZXh0LCBmaW5kQWxsQnlBbHRUZXh0LCBmaW5kQnlBbHRUZXh0XSA9ICgwLCBfYWxsVXRpbHMuYnVpbGRRdWVyaWVzKShxdWVyeUFsbEJ5QWx0VGV4dCwgZ2V0TXVsdGlwbGVFcnJvciwgZ2V0TWlzc2luZ0Vycm9yKTtcbmV4cG9ydHMuZmluZEJ5QWx0VGV4dCA9IGZpbmRCeUFsdFRleHQ7XG5leHBvcnRzLmZpbmRBbGxCeUFsdFRleHQgPSBmaW5kQWxsQnlBbHRUZXh0O1xuZXhwb3J0cy5nZXRCeUFsdFRleHQgPSBnZXRCeUFsdFRleHQ7XG5leHBvcnRzLmdldEFsbEJ5QWx0VGV4dCA9IGdldEFsbEJ5QWx0VGV4dDtcbmV4cG9ydHMucXVlcnlCeUFsdFRleHQgPSBxdWVyeUJ5QWx0VGV4dDsiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQzNDQyxLQUFLLEVBQUU7QUFDVCxDQUFDLENBQUM7QUFDRkQsT0FBTyxDQUFDRSxjQUFjLEdBQUdGLE9BQU8sQ0FBQ0csaUJBQWlCLEdBQUdILE9BQU8sQ0FBQ0ksWUFBWSxHQUFHSixPQUFPLENBQUNLLGVBQWUsR0FBR0wsT0FBTyxDQUFDTSxhQUFhLEdBQUdOLE9BQU8sQ0FBQ08sZ0JBQWdCLEdBQUcsS0FBSyxDQUFDO0FBQy9KLElBQUlDLGFBQWEsR0FBR0MsT0FBTyxDQUFDLGtCQUFrQixDQUFDO0FBQy9DLElBQUlDLFFBQVEsR0FBR0QsT0FBTyxDQUFDLFlBQVksQ0FBQztBQUNwQyxJQUFJRSxTQUFTLEdBQUdGLE9BQU8sQ0FBQyxhQUFhLENBQUM7QUFDdEM7QUFDQSxNQUFNRyxnQkFBZ0IsR0FBRywyQkFBMkI7QUFDcEQsTUFBTVQsaUJBQWlCLEdBQUdBLENBQUNVLFNBQVMsRUFBRUMsR0FBRyxFQUFFQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLEtBQUs7RUFDMUQsQ0FBQyxDQUFDLEVBQUVMLFFBQVEsQ0FBQ00sa0JBQWtCLEVBQUVILFNBQVMsQ0FBQztFQUMzQyxPQUFPLENBQUMsQ0FBQyxFQUFFTCxhQUFhLENBQUNTLG1CQUFtQixFQUFFLEtBQUssRUFBRUosU0FBUyxFQUFFQyxHQUFHLEVBQUVDLE9BQU8sQ0FBQyxDQUFDRyxNQUFNLENBQUNDLElBQUksSUFBSVAsZ0JBQWdCLENBQUNRLElBQUksQ0FBQ0QsSUFBSSxDQUFDRSxPQUFPLENBQUMsQ0FBQztBQUNuSSxDQUFDO0FBQ0QsTUFBTUMsZ0JBQWdCLEdBQUdBLENBQUNDLENBQUMsRUFBRVQsR0FBRyxLQUFLLDhDQUE4Q0EsR0FBRyxFQUFFO0FBQ3hGLE1BQU1VLGVBQWUsR0FBR0EsQ0FBQ0QsQ0FBQyxFQUFFVCxHQUFHLEtBQUssZ0RBQWdEQSxHQUFHLEVBQUU7QUFDekYsTUFBTVcsZ0NBQWdDLEdBQUd6QixPQUFPLENBQUNHLGlCQUFpQixHQUFHLENBQUMsQ0FBQyxFQUFFSyxhQUFhLENBQUNrQiw0QkFBNEIsRUFBRXZCLGlCQUFpQixFQUFFQSxpQkFBaUIsQ0FBQ3dCLElBQUksRUFBRSxVQUFVLENBQUM7QUFDM0ssTUFBTSxDQUFDekIsY0FBYyxFQUFFRyxlQUFlLEVBQUVELFlBQVksRUFBRUcsZ0JBQWdCLEVBQUVELGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFSyxTQUFTLENBQUNpQixZQUFZLEVBQUV6QixpQkFBaUIsRUFBRW1CLGdCQUFnQixFQUFFRSxlQUFlLENBQUM7QUFDMUt4QixPQUFPLENBQUNNLGFBQWEsR0FBR0EsYUFBYTtBQUNyQ04sT0FBTyxDQUFDTyxnQkFBZ0IsR0FBR0EsZ0JBQWdCO0FBQzNDUCxPQUFPLENBQUNJLFlBQVksR0FBR0EsWUFBWTtBQUNuQ0osT0FBTyxDQUFDSyxlQUFlLEdBQUdBLGVBQWU7QUFDekNMLE9BQU8sQ0FBQ0UsY0FBYyxHQUFHQSxjQUFjIiwiaWdub3JlTGlzdCI6W119