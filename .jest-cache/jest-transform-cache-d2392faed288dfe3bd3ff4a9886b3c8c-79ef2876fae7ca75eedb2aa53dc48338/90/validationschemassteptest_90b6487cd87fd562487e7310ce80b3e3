a6333bce0a130be782b5fdf8362a4cf8
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const zod_1 = require("zod");
(0, globals_1.describe)('Validation Schemas Step by Step', () => {
    (0, globals_1.it)('should create messageSchema', () => {
        const messageSchema = zod_1.z.object({
            content: zod_1.z.string().min(1).max(10000),
            role: zod_1.z.enum(['user', 'assistant', 'system']),
            timestamp: zod_1.z.date().optional(),
            metadata: zod_1.z.record(zod_1.z.string()).optional()
        });
        const validMessage = {
            content: 'Hello, world!',
            role: 'user',
            timestamp: new Date(),
            metadata: { sessionId: '123' }
        };
        const result = messageSchema.safeParse(validMessage);
        (0, globals_1.expect)(result.success).toBe(true);
    });
    (0, globals_1.it)('should create fileUploadSchema', () => {
        const fileUploadSchema = zod_1.z.object({
            name: zod_1.z.string().min(1).max(255),
            size: zod_1.z.number().max(20 * 1024 * 1024),
            type: zod_1.z.enum([
                'application/pdf',
                'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                'text/plain',
                'image/png',
                'image/jpeg'
            ]),
            content: zod_1.z.instanceof(File)
        });
        const mockFile = new File(['test content'], 'test.pdf', { type: 'application/pdf' });
        const validUpload = {
            name: 'test.pdf',
            size: 1024,
            type: 'application/pdf',
            content: mockFile
        };
        const result = fileUploadSchema.safeParse(validUpload);
        (0, globals_1.expect)(result.success).toBe(true);
    });
    (0, globals_1.it)('should create apiRequestSchema', () => {
        const messageSchema = zod_1.z.object({
            content: zod_1.z.string().min(1).max(10000),
            role: zod_1.z.enum(['user', 'assistant', 'system']),
            timestamp: zod_1.z.date().optional(),
            metadata: zod_1.z.record(zod_1.z.string()).optional()
        });
        const apiRequestSchema = zod_1.z.object({
            messages: zod_1.z.array(messageSchema).min(1),
            model: zod_1.z.string().optional(),
            temperature: zod_1.z.number().min(0).max(2).optional(),
            maxTokens: zod_1.z.number().min(1).max(100000).optional()
        });
        const validRequest = {
            messages: [
                {
                    content: 'Hello',
                    role: 'user'
                },
                {
                    content: 'Hi there!',
                    role: 'assistant'
                }
            ],
            model: 'gpt-4',
            temperature: 0.7,
            maxTokens: 1000
        };
        const result = apiRequestSchema.safeParse(validRequest);
        (0, globals_1.expect)(result.success).toBe(true);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxzYXJhaFxcUmVwb3NcXENDSCBBeGNlc3MgSW50ZWxsaWdlbmNlIFZpYmVkXFx0ZXN0c1xcdW5pdFxcdmFsaWRhdGlvbi1zY2hlbWFzLXN0ZXAudGVzdC50cyIsIm1hcHBpbmdzIjoiOztBQUFBLDJDQUFxRDtBQUNyRCw2QkFBd0I7QUFFeEIsSUFBQSxrQkFBUSxFQUFDLGlDQUFpQyxFQUFFLEdBQUcsRUFBRTtJQUMvQyxJQUFBLFlBQUUsRUFBQyw2QkFBNkIsRUFBRSxHQUFHLEVBQUU7UUFDckMsTUFBTSxhQUFhLEdBQUcsT0FBQyxDQUFDLE1BQU0sQ0FBQztZQUM3QixPQUFPLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDO1lBQ3JDLElBQUksRUFBRSxPQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxFQUFFLFdBQVcsRUFBRSxRQUFRLENBQUMsQ0FBQztZQUM3QyxTQUFTLEVBQUUsT0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLFFBQVEsRUFBRTtZQUM5QixRQUFRLEVBQUUsT0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxRQUFRLEVBQUU7U0FDMUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxZQUFZLEdBQUc7WUFDbkIsT0FBTyxFQUFFLGVBQWU7WUFDeEIsSUFBSSxFQUFFLE1BQWU7WUFDckIsU0FBUyxFQUFFLElBQUksSUFBSSxFQUFFO1lBQ3JCLFFBQVEsRUFBRSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUU7U0FDL0IsQ0FBQztRQUVGLE1BQU0sTUFBTSxHQUFHLGFBQWEsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDckQsSUFBQSxnQkFBTSxFQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDcEMsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFBLFlBQUUsRUFBQyxnQ0FB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QixDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUN4RCxJQUFBLGdCQUFNLEVBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNwQyxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcc2FyYWhcXFJlcG9zXFxDQ0ggQXhjZXNzIEludGVsbGlnZW5jZSBWaWJlZFxcdGVzdHNcXHVuaXRcXHZhbGlkYXRpb24tc2NoZW1hcy1zdGVwLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVzY3JpYmUsIGl0LCBleHBlY3QgfSBmcm9tICdAamVzdC9nbG9iYWxzJztcclxuaW1wb3J0IHsgeiB9IGZyb20gJ3pvZCc7XHJcblxyXG5kZXNjcmliZSgnVmFsaWRhdGlvbiBTY2hlbWFzIFN0ZXAgYnkgU3RlcCcsICgpID0+IHtcclxuICBpdCgnc2hvdWxkIGNyZWF0ZSBtZXNzYWdlU2NoZW1hJywgKCkgPT4ge1xyXG4gICAgY29uc3QgbWVzc2FnZVNjaGVtYSA9IHoub2JqZWN0KHtcclxuICAgICAgY29udGVudDogei5zdHJpbmcoKS5taW4oMSkubWF4KDEwMDAwKSxcclxuICAgICAgcm9sZTogei5lbnVtKFsndXNlcicsICdhc3Npc3RhbnQnLCAnc3lzdGVtJ10pLFxyXG4gICAgICB0aW1lc3RhbXA6IHouZGF0ZSgpLm9wdGlvbmFsKCksXHJcbiAgICAgIG1ldGFkYXRhOiB6LnJlY29yZCh6LnN0cmluZygpKS5vcHRpb25hbCgpXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCB2YWxpZE1lc3NhZ2UgPSB7XHJcbiAgICAgIGNvbnRlbnQ6ICdIZWxsbywgd29ybGQhJyxcclxuICAgICAgcm9sZTogJ3VzZXInIGFzIGNvbnN0LFxyXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXHJcbiAgICAgIG1ldGFkYXRhOiB7IHNlc3Npb25JZDogJzEyMycgfVxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCByZXN1bHQgPSBtZXNzYWdlU2NoZW1hLnNhZmVQYXJzZSh2YWxpZE1lc3NhZ2UpO1xyXG4gICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlKHRydWUpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIGNyZWF0ZSBmaWxlVXBsb2FkU2NoZW1hJywgKCkgPT4ge1xyXG4gICAgY29uc3QgZmlsZVVwbG9hZFNjaGVtYSA9IHoub2JqZWN0KHtcclxuICAgICAgbmFtZTogei5zdHJpbmcoKS5taW4oMSkubWF4KDI1NSksXHJcbiAgICAgIHNpemU6IHoubnVtYmVyKCkubWF4KDIwICogMTAyNCAqIDEwMjQpLFxyXG4gICAgICB0eXBlOiB6LmVudW0oW1xyXG4gICAgICAgICdhcHBsaWNhdGlvbi9wZGYnLFxyXG4gICAgICAgICdhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5kb2N1bWVudCcsXHJcbiAgICAgICAgJ2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnNoZWV0JyxcclxuICAgICAgICAndGV4dC9wbGFpbicsXHJcbiAgICAgICAgJ2ltYWdlL3BuZycsXHJcbiAgICAgICAgJ2ltYWdlL2pwZWcnXHJcbiAgICAgIF0pLFxyXG4gICAgICBjb250ZW50OiB6Lmluc3RhbmNlb2YoRmlsZSlcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IG1vY2tGaWxlID0gbmV3IEZpbGUoWyd0ZXN0IGNvbnRlbnQnXSwgJ3Rlc3QucGRmJywgeyB0eXBlOiAnYXBwbGljYXRpb24vcGRmJyB9KTtcclxuICAgIGNvbnN0IHZhbGlkVXBsb2FkID0ge1xyXG4gICAgICBuYW1lOiAndGVzdC5wZGYnLFxyXG4gICAgICBzaXplOiAxMDI0LFxyXG4gICAgICB0eXBlOiAnYXBwbGljYXRpb24vcGRmJyBhcyBjb25zdCxcclxuICAgICAgY29udGVudDogbW9ja0ZpbGVcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgcmVzdWx0ID0gZmlsZVVwbG9hZFNjaGVtYS5zYWZlUGFyc2UodmFsaWRVcGxvYWQpO1xyXG4gICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlKHRydWUpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIGNyZWF0ZSBhcGlSZXF1ZXN0U2NoZW1hJywgKCkgPT4ge1xyXG4gICAgY29uc3QgbWVzc2FnZVNjaGVtYSA9IHoub2JqZWN0KHtcclxuICAgICAgY29udGVudDogei5zdHJpbmcoKS5taW4oMSkubWF4KDEwMDAwKSxcclxuICAgICAgcm9sZTogei5lbnVtKFsndXNlcicsICdhc3Npc3RhbnQnLCAnc3lzdGVtJ10pLFxyXG4gICAgICB0aW1lc3RhbXA6IHouZGF0ZSgpLm9wdGlvbmFsKCksXHJcbiAgICAgIG1ldGFkYXRhOiB6LnJlY29yZCh6LnN0cmluZygpKS5vcHRpb25hbCgpXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBhcGlSZXF1ZXN0U2NoZW1hID0gei5vYmplY3Qoe1xyXG4gICAgICBtZXNzYWdlczogei5hcnJheShtZXNzYWdlU2NoZW1hKS5taW4oMSksXHJcbiAgICAgIG1vZGVsOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXHJcbiAgICAgIHRlbXBlcmF0dXJlOiB6Lm51bWJlcigpLm1pbigwKS5tYXgoMikub3B0aW9uYWwoKSxcclxuICAgICAgbWF4VG9rZW5zOiB6Lm51bWJlcigpLm1pbigxKS5tYXgoMTAwMDAwKS5vcHRpb25hbCgpXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCB2YWxpZFJlcXVlc3QgPSB7XHJcbiAgICAgIG1lc3NhZ2VzOiBbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgY29udGVudDogJ0hlbGxvJyxcclxuICAgICAgICAgIHJvbGU6ICd1c2VyJyBhcyBjb25zdFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgY29udGVudDogJ0hpIHRoZXJlIScsXHJcbiAgICAgICAgICByb2xlOiAnYXNzaXN0YW50JyBhcyBjb25zdFxyXG4gICAgICAgIH1cclxuICAgICAgXSxcclxuICAgICAgbW9kZWw6ICdncHQtNCcsXHJcbiAgICAgIHRlbXBlcmF0dXJlOiAwLjcsXHJcbiAgICAgIG1heFRva2VuczogMTAwMFxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCByZXN1bHQgPSBhcGlSZXF1ZXN0U2NoZW1hLnNhZmVQYXJzZSh2YWxpZFJlcXVlc3QpO1xyXG4gICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlKHRydWUpO1xyXG4gIH0pO1xyXG59KTtcclxuIl0sInZlcnNpb24iOjN9