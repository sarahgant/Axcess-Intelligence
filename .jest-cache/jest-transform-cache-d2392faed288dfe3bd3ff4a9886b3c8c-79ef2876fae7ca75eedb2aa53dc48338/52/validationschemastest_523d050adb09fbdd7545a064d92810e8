0c4cde64ee2d610cc772103a029731d4
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const schemas_1 = require("../../src/core/validation/schemas");
(0, globals_1.describe)('Validation Schemas', () => {
    (0, globals_1.describe)('messageSchema', () => {
        (0, globals_1.it)('should validate a valid message', () => {
            const validMessage = {
                content: 'Hello, world!',
                role: 'user',
                timestamp: new Date(),
                metadata: { sessionId: '123' }
            };
            const result = schemas_1.messageSchema.safeParse(validMessage);
            (0, globals_1.expect)(result.success).toBe(true);
        });
        (0, globals_1.it)('should validate a minimal message', () => {
            const minimalMessage = {
                content: 'Test',
                role: 'assistant'
            };
            const result = schemas_1.messageSchema.safeParse(minimalMessage);
            (0, globals_1.expect)(result.success).toBe(true);
        });
        (0, globals_1.it)('should reject empty content', () => {
            const invalidMessage = {
                content: '',
                role: 'user'
            };
            const result = schemas_1.messageSchema.safeParse(invalidMessage);
            (0, globals_1.expect)(result.success).toBe(false);
            if (!result.success) {
                (0, globals_1.expect)(result.error.issues[0].path).toContain('content');
            }
        });
        (0, globals_1.it)('should reject content that is too long', () => {
            const invalidMessage = {
                content: 'a'.repeat(10001),
                role: 'user'
            };
            const result = schemas_1.messageSchema.safeParse(invalidMessage);
            (0, globals_1.expect)(result.success).toBe(false);
            if (!result.success) {
                (0, globals_1.expect)(result.error.issues[0].path).toContain('content');
            }
        });
        (0, globals_1.it)('should reject invalid role', () => {
            const invalidMessage = {
                content: 'Test',
                role: 'invalid'
            };
            const result = schemas_1.messageSchema.safeParse(invalidMessage);
            (0, globals_1.expect)(result.success).toBe(false);
            if (!result.success) {
                (0, globals_1.expect)(result.error.issues[0].path).toContain('role');
            }
        });
    });
    (0, globals_1.describe)('fileUploadSchema', () => {
        (0, globals_1.it)('should validate a valid file upload', () => {
            const mockFile = new File(['test content'], 'test.pdf', { type: 'application/pdf' });
            const validUpload = {
                name: 'test.pdf',
                size: 1024,
                type: 'application/pdf',
                content: mockFile
            };
            const result = schemas_1.fileUploadSchema.safeParse(validUpload);
            (0, globals_1.expect)(result.success).toBe(true);
        });
        (0, globals_1.it)('should reject file with empty name', () => {
            const mockFile = new File(['test content'], 'test.pdf', { type: 'application/pdf' });
            const invalidUpload = {
                name: '',
                size: 1024,
                type: 'application/pdf',
                content: mockFile
            };
            const result = schemas_1.fileUploadSchema.safeParse(invalidUpload);
            (0, globals_1.expect)(result.success).toBe(false);
            if (!result.success) {
                (0, globals_1.expect)(result.error.issues[0].path).toContain('name');
            }
        });
        (0, globals_1.it)('should reject file with name too long', () => {
            const mockFile = new File(['test content'], 'test.pdf', { type: 'application/pdf' });
            const invalidUpload = {
                name: 'a'.repeat(256),
                size: 1024,
                type: 'application/pdf',
                content: mockFile
            };
            const result = schemas_1.fileUploadSchema.safeParse(invalidUpload);
            (0, globals_1.expect)(result.success).toBe(false);
            if (!result.success) {
                (0, globals_1.expect)(result.error.issues[0].path).toContain('name');
            }
        });
        (0, globals_1.it)('should reject file that is too large', () => {
            const mockFile = new File(['test content'], 'test.pdf', { type: 'application/pdf' });
            const invalidUpload = {
                name: 'test.pdf',
                size: 21 * 1024 * 1024, // 21MB
                type: 'application/pdf',
                content: mockFile
            };
            const result = schemas_1.fileUploadSchema.safeParse(invalidUpload);
            (0, globals_1.expect)(result.success).toBe(false);
            if (!result.success) {
                (0, globals_1.expect)(result.error.issues[0].path).toContain('size');
            }
        });
        (0, globals_1.it)('should reject unsupported file type', () => {
            const mockFile = new File(['test content'], 'test.exe', { type: 'application/x-executable' });
            const invalidUpload = {
                name: 'test.exe',
                size: 1024,
                type: 'application/x-executable',
                content: mockFile
            };
            const result = schemas_1.fileUploadSchema.safeParse(invalidUpload);
            (0, globals_1.expect)(result.success).toBe(false);
            if (!result.success) {
                (0, globals_1.expect)(result.error.issues[0].path).toContain('type');
            }
        });
        (0, globals_1.it)('should accept all supported file types', () => {
            const supportedTypes = [
                'application/pdf',
                'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                'text/plain',
                'image/png',
                'image/jpeg'
            ];
            supportedTypes.forEach(type => {
                const mockFile = new File(['test content'], 'test.file', { type });
                const validUpload = {
                    name: 'test.file',
                    size: 1024,
                    type: type,
                    content: mockFile
                };
                const result = schemas_1.fileUploadSchema.safeParse(validUpload);
                (0, globals_1.expect)(result.success).toBe(true);
            });
        });
    });
    (0, globals_1.describe)('apiRequestSchema', () => {
        (0, globals_1.it)('should validate a valid API request', () => {
            const validRequest = {
                messages: [
                    {
                        content: 'Hello',
                        role: 'user'
                    },
                    {
                        content: 'Hi there!',
                        role: 'assistant'
                    }
                ],
                model: 'gpt-4',
                temperature: 0.7,
                maxTokens: 1000
            };
            const result = schemas_1.apiRequestSchema.safeParse(validRequest);
            (0, globals_1.expect)(result.success).toBe(true);
        });
        (0, globals_1.it)('should validate minimal API request', () => {
            const minimalRequest = {
                messages: [
                    {
                        content: 'Hello',
                        role: 'user'
                    }
                ]
            };
            const result = schemas_1.apiRequestSchema.safeParse(minimalRequest);
            (0, globals_1.expect)(result.success).toBe(true);
        });
        (0, globals_1.it)('should reject empty messages array', () => {
            const invalidRequest = {
                messages: []
            };
            const result = schemas_1.apiRequestSchema.safeParse(invalidRequest);
            (0, globals_1.expect)(result.success).toBe(false);
            if (!result.success) {
                (0, globals_1.expect)(result.error.issues[0].path).toContain('messages');
            }
        });
        (0, globals_1.it)('should reject invalid temperature', () => {
            const invalidRequest = {
                messages: [
                    {
                        content: 'Hello',
                        role: 'user'
                    }
                ],
                temperature: 3.0 // Too high
            };
            const result = schemas_1.apiRequestSchema.safeParse(invalidRequest);
            (0, globals_1.expect)(result.success).toBe(false);
            if (!result.success) {
                (0, globals_1.expect)(result.error.issues[0].path).toContain('temperature');
            }
        });
        (0, globals_1.it)('should reject negative temperature', () => {
            const invalidRequest = {
                messages: [
                    {
                        content: 'Hello',
                        role: 'user'
                    }
                ],
                temperature: -0.1
            };
            const result = schemas_1.apiRequestSchema.safeParse(invalidRequest);
            (0, globals_1.expect)(result.success).toBe(false);
            if (!result.success) {
                (0, globals_1.expect)(result.error.issues[0].path).toContain('temperature');
            }
        });
        (0, globals_1.it)('should reject invalid maxTokens', () => {
            const invalidRequest = {
                messages: [
                    {
                        content: 'Hello',
                        role: 'user'
                    }
                ],
                maxTokens: 0 // Too low
            };
            const result = schemas_1.apiRequestSchema.safeParse(invalidRequest);
            (0, globals_1.expect)(result.success).toBe(false);
            if (!result.success) {
                (0, globals_1.expect)(result.error.issues[0].path).toContain('maxTokens');
            }
        });
        (0, globals_1.it)('should reject maxTokens that is too high', () => {
            const invalidRequest = {
                messages: [
                    {
                        content: 'Hello',
                        role: 'user'
                    }
                ],
                maxTokens: 100001 // Too high
            };
            const result = schemas_1.apiRequestSchema.safeParse(invalidRequest);
            (0, globals_1.expect)(result.success).toBe(false);
            if (!result.success) {
                (0, globals_1.expect)(result.error.issues[0].path).toContain('maxTokens');
            }
        });
    });
    (0, globals_1.describe)('sanitizeInput', () => {
        (0, globals_1.it)('should remove HTML tags', () => {
            const input = '<script>alert("xss")</script>Hello world';
            const result = (0, schemas_1.sanitizeInput)(input);
            (0, globals_1.expect)(result).toBe('scriptalert("xss")/scriptHello world');
        });
        (0, globals_1.it)('should remove javascript protocol', () => {
            const input = 'javascript:alert("xss")';
            const result = (0, schemas_1.sanitizeInput)(input);
            (0, globals_1.expect)(result).toBe('alert("xss")');
        });
        (0, globals_1.it)('should remove event handlers', () => {
            const input = 'onclick=alert("xss") onload=alert("xss")';
            const result = (0, schemas_1.sanitizeInput)(input);
            (0, globals_1.expect)(result).toBe('alert("xss") alert("xss")');
        });
        (0, globals_1.it)('should trim whitespace', () => {
            const input = '  Hello world  ';
            const result = (0, schemas_1.sanitizeInput)(input);
            (0, globals_1.expect)(result).toBe('Hello world');
        });
        (0, globals_1.it)('should handle empty string', () => {
            const input = '';
            const result = (0, schemas_1.sanitizeInput)(input);
            (0, globals_1.expect)(result).toBe('');
        });
        (0, globals_1.it)('should handle string with only whitespace', () => {
            const input = '   \n\t  ';
            const result = (0, schemas_1.sanitizeInput)(input);
            (0, globals_1.expect)(result).toBe('');
        });
        (0, globals_1.it)('should preserve normal text', () => {
            const input = 'This is normal text with numbers 123 and symbols @#$%';
            const result = (0, schemas_1.sanitizeInput)(input);
            (0, globals_1.expect)(result).toBe('This is normal text with numbers 123 and symbols @#$%');
        });
        (0, globals_1.it)('should handle complex XSS attempts', () => {
            const input = '<img src="x" onerror="alert(\'xss\')">javascript:alert("xss")<script>alert("xss")</script>';
            const result = (0, schemas_1.sanitizeInput)(input);
            (0, globals_1.expect)(result).toBe('img src="x" "alert(\'xss\')"alert("xss")scriptalert("xss")/script');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,