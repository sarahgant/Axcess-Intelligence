1b7b184228a6f36fa4a57ce9f195cee0
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.logger = exports.LogLevel = void 0;
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
    LogLevel[LogLevel["INFO"] = 1] = "INFO";
    LogLevel[LogLevel["WARN"] = 2] = "WARN";
    LogLevel[LogLevel["ERROR"] = 3] = "ERROR";
    LogLevel[LogLevel["FATAL"] = 4] = "FATAL";
})(LogLevel || (exports.LogLevel = LogLevel = {}));
class Logger {
    constructor() {
        Object.defineProperty(this, "isDevelopment", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: process.env.NODE_ENV === 'development'
        });
        Object.defineProperty(this, "isLoggingEnabled", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        }); // Will be set by environment config
        Object.defineProperty(this, "logLevel", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.isDevelopment ? LogLevel.DEBUG : LogLevel.INFO
        });
    }
    formatLog(context) {
        return JSON.stringify(context);
    }
    shouldLog(level) {
        return level >= this.logLevel;
    }
    log(level, message, meta, context) {
        if (!this.shouldLog(level) || !this.isLoggingEnabled)
            return;
        const logContext = {
            timestamp: new Date().toISOString(),
            level,
            message,
            meta,
            correlationId: this.getCorrelationId(),
            userId: this.getUserId(),
            sessionId: this.getSessionId(),
            ...context
        };
        // In development, use console for readability
        if (this.isDevelopment) {
            const color = this.getConsoleColor(level);
            const levelName = LogLevel[level];
            console.log(`%c[${levelName}]`, color, message, meta || '');
        }
        else {
            // In production, send to monitoring service
            this.sendToMonitoring(logContext);
        }
        // Store in local buffer for debugging
        this.storeInBuffer(logContext);
    }
    debug(message, meta, context) {
        this.log(LogLevel.DEBUG, message, meta, context);
    }
    info(message, meta, context) {
        this.log(LogLevel.INFO, message, meta, context);
    }
    warn(message, meta, context) {
        this.log(LogLevel.WARN, message, meta, context);
    }
    error(message, meta, context) {
        this.log(LogLevel.ERROR, message, meta, context);
    }
    fatal(message, meta, context) {
        this.log(LogLevel.FATAL, message, meta, context);
    }
    // Component-specific logging methods
    component(componentName) {
        return {
            debug: (message, meta) => this.debug(message, meta, { component: componentName }),
            info: (message, meta) => this.info(message, meta, { component: componentName }),
            warn: (message, meta) => this.warn(message, meta, { component: componentName }),
            error: (message, meta) => this.error(message, meta, { component: componentName }),
            fatal: (message, meta) => this.fatal(message, meta, { component: componentName })
        };
    }
    // Action-specific logging methods
    action(actionName) {
        return {
            debug: (message, meta) => this.debug(message, meta, { action: actionName }),
            info: (message, meta) => this.info(message, meta, { action: actionName }),
            warn: (message, meta) => this.warn(message, meta, { action: actionName }),
            error: (message, meta) => this.error(message, meta, { action: actionName }),
            fatal: (message, meta) => this.fatal(message, meta, { action: actionName })
        };
    }
    // Helper methods
    getConsoleColor(level) {
        const colors = {
            [LogLevel.DEBUG]: 'color: gray',
            [LogLevel.INFO]: 'color: blue',
            [LogLevel.WARN]: 'color: orange',
            [LogLevel.ERROR]: 'color: red',
            [LogLevel.FATAL]: 'color: darkred; font-weight: bold'
        };
        return colors[level];
    }
    getCorrelationId() {
        if (typeof window === 'undefined')
            return 'server-side';
        return sessionStorage.getItem('correlationId') || 'no-correlation-id';
    }
    getUserId() {
        if (typeof window === 'undefined')
            return 'server-side';
        return sessionStorage.getItem('userId') || 'anonymous';
    }
    getSessionId() {
        if (typeof window === 'undefined')
            return 'server-side';
        return sessionStorage.getItem('sessionId') || 'no-session';
    }
    sendToMonitoring(context) {
        // Future: Send to Azure Application Insights
        // For now, store in IndexedDB for retrieval
        if (typeof window !== 'undefined') {
            this.storeInIndexedDB(context);
        }
    }
    storeInBuffer(context) {
        // Store last 100 logs in memory for debugging
        if (typeof window === 'undefined')
            return;
        if (!window.__logBuffer)
            window.__logBuffer = [];
        window.__logBuffer.push(context);
        if (window.__logBuffer.length > 100) {
            window.__logBuffer.shift();
        }
    }
    async storeInIndexedDB(context) {
        try {
            // Simple IndexedDB storage for production logs
            const dbName = 'CCHLogs';
            const storeName = 'logs';
            const request = indexedDB.open(dbName, 1);
            request.onupgradeneeded = (event) => {
                const db = event.target.result;
                if (!db.objectStoreNames.contains(storeName)) {
                    db.createObjectStore(storeName, { keyPath: 'timestamp' });
                }
            };
            request.onsuccess = (event) => {
                const db = event.target.result;
                const transaction = db.transaction([storeName], 'readwrite');
                const store = transaction.objectStore(storeName);
                store.add(context);
            };
        }
        catch (error) {
            // Fallback to console if IndexedDB fails
            console.error('Failed to store log in IndexedDB:', error);
        }
    }
    // Utility methods for debugging
    getLogBuffer() {
        if (typeof window === 'undefined')
            return [];
        return window.__logBuffer || [];
    }
    clearLogBuffer() {
        if (typeof window === 'undefined')
            return;
        window.__logBuffer = [];
    }
    // Export logs for debugging
    exportLogs() {
        const logs = this.getLogBuffer();
        return JSON.stringify(logs, null, 2);
    }
}
exports.logger = new Logger();
// Add to window for debugging in production
if (typeof window !== 'undefined') {
    window.__logger = exports.logger;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,