acbdda942245b0be746c4cf05450786e
'use strict';

require('./behavior/click.js');
require('./behavior/cut.js');
require('./behavior/keydown.js');
require('./behavior/keypress.js');
require('./behavior/keyup.js');
require('./behavior/paste.js');
var registry = require('./behavior/registry.js');
var wrapEvent = require('./wrapEvent.js');
var eventMap = require('./eventMap.js');
var createEvent = require('./createEvent.js');
function dispatchUIEvent(target, type, init, preventDefault = false) {
  if (eventMap.isMouseEvent(type) || eventMap.isKeyboardEvent(type)) {
    init = {
      ...init,
      ...this.system.getUIEventModifiers()
    };
  }
  const event = createEvent.createEvent(type, target, init);
  return dispatchEvent.call(this, target, event, preventDefault);
}
function dispatchEvent(target, event, preventDefault = false) {
  var _behavior_type;
  const type = event.type;
  const behaviorImplementation = preventDefault ? () => {} : (_behavior_type = registry.behavior[type]) === null || _behavior_type === undefined ? undefined : _behavior_type.call(registry.behavior, event, target, this);
  if (behaviorImplementation) {
    event.preventDefault();
    let defaultPrevented = false;
    Object.defineProperty(event, 'defaultPrevented', {
      get: () => defaultPrevented
    });
    Object.defineProperty(event, 'preventDefault', {
      value: () => {
        defaultPrevented = event.cancelable;
      }
    });
    wrapEvent.wrapEvent(() => target.dispatchEvent(event));
    if (!defaultPrevented) {
      behaviorImplementation();
    }
    return !defaultPrevented;
  }
  return wrapEvent.wrapEvent(() => target.dispatchEvent(event));
}
function dispatchDOMEvent(target, type, init) {
  const event = createEvent.createEvent(type, target, init);
  wrapEvent.wrapEvent(() => target.dispatchEvent(event));
}
exports.dispatchDOMEvent = dispatchDOMEvent;
exports.dispatchEvent = dispatchEvent;
exports.dispatchUIEvent = dispatchUIEvent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1aXJlIiwicmVnaXN0cnkiLCJ3cmFwRXZlbnQiLCJldmVudE1hcCIsImNyZWF0ZUV2ZW50IiwiZGlzcGF0Y2hVSUV2ZW50IiwidGFyZ2V0IiwidHlwZSIsImluaXQiLCJwcmV2ZW50RGVmYXVsdCIsImlzTW91c2VFdmVudCIsImlzS2V5Ym9hcmRFdmVudCIsInN5c3RlbSIsImdldFVJRXZlbnRNb2RpZmllcnMiLCJldmVudCIsImRpc3BhdGNoRXZlbnQiLCJjYWxsIiwiX2JlaGF2aW9yX3R5cGUiLCJiZWhhdmlvckltcGxlbWVudGF0aW9uIiwiYmVoYXZpb3IiLCJ1bmRlZmluZWQiLCJkZWZhdWx0UHJldmVudGVkIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJ2YWx1ZSIsImNhbmNlbGFibGUiLCJkaXNwYXRjaERPTUV2ZW50IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImRpc3BhdGNoRXZlbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5yZXF1aXJlKCcuL2JlaGF2aW9yL2NsaWNrLmpzJyk7XG5yZXF1aXJlKCcuL2JlaGF2aW9yL2N1dC5qcycpO1xucmVxdWlyZSgnLi9iZWhhdmlvci9rZXlkb3duLmpzJyk7XG5yZXF1aXJlKCcuL2JlaGF2aW9yL2tleXByZXNzLmpzJyk7XG5yZXF1aXJlKCcuL2JlaGF2aW9yL2tleXVwLmpzJyk7XG5yZXF1aXJlKCcuL2JlaGF2aW9yL3Bhc3RlLmpzJyk7XG52YXIgcmVnaXN0cnkgPSByZXF1aXJlKCcuL2JlaGF2aW9yL3JlZ2lzdHJ5LmpzJyk7XG52YXIgd3JhcEV2ZW50ID0gcmVxdWlyZSgnLi93cmFwRXZlbnQuanMnKTtcbnZhciBldmVudE1hcCA9IHJlcXVpcmUoJy4vZXZlbnRNYXAuanMnKTtcbnZhciBjcmVhdGVFdmVudCA9IHJlcXVpcmUoJy4vY3JlYXRlRXZlbnQuanMnKTtcblxuZnVuY3Rpb24gZGlzcGF0Y2hVSUV2ZW50KHRhcmdldCwgdHlwZSwgaW5pdCwgcHJldmVudERlZmF1bHQgPSBmYWxzZSkge1xuICAgIGlmIChldmVudE1hcC5pc01vdXNlRXZlbnQodHlwZSkgfHwgZXZlbnRNYXAuaXNLZXlib2FyZEV2ZW50KHR5cGUpKSB7XG4gICAgICAgIGluaXQgPSB7XG4gICAgICAgICAgICAuLi5pbml0LFxuICAgICAgICAgICAgLi4udGhpcy5zeXN0ZW0uZ2V0VUlFdmVudE1vZGlmaWVycygpXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IGV2ZW50ID0gY3JlYXRlRXZlbnQuY3JlYXRlRXZlbnQodHlwZSwgdGFyZ2V0LCBpbml0KTtcbiAgICByZXR1cm4gZGlzcGF0Y2hFdmVudC5jYWxsKHRoaXMsIHRhcmdldCwgZXZlbnQsIHByZXZlbnREZWZhdWx0KTtcbn1cbmZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQodGFyZ2V0LCBldmVudCwgcHJldmVudERlZmF1bHQgPSBmYWxzZSkge1xuICAgIHZhciBfYmVoYXZpb3JfdHlwZTtcbiAgICBjb25zdCB0eXBlID0gZXZlbnQudHlwZTtcbiAgICBjb25zdCBiZWhhdmlvckltcGxlbWVudGF0aW9uID0gcHJldmVudERlZmF1bHQgPyAoKT0+e30gOiAoX2JlaGF2aW9yX3R5cGUgPSByZWdpc3RyeS5iZWhhdmlvclt0eXBlXSkgPT09IG51bGwgfHwgX2JlaGF2aW9yX3R5cGUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IF9iZWhhdmlvcl90eXBlLmNhbGwocmVnaXN0cnkuYmVoYXZpb3IsIGV2ZW50LCB0YXJnZXQsIHRoaXMpO1xuICAgIGlmIChiZWhhdmlvckltcGxlbWVudGF0aW9uKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGxldCBkZWZhdWx0UHJldmVudGVkID0gZmFsc2U7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShldmVudCwgJ2RlZmF1bHRQcmV2ZW50ZWQnLCB7XG4gICAgICAgICAgICBnZXQ6ICgpPT5kZWZhdWx0UHJldmVudGVkXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXZlbnQsICdwcmV2ZW50RGVmYXVsdCcsIHtcbiAgICAgICAgICAgIHZhbHVlOiAoKT0+e1xuICAgICAgICAgICAgICAgIGRlZmF1bHRQcmV2ZW50ZWQgPSBldmVudC5jYW5jZWxhYmxlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgd3JhcEV2ZW50LndyYXBFdmVudCgoKT0+dGFyZ2V0LmRpc3BhdGNoRXZlbnQoZXZlbnQpKTtcbiAgICAgICAgaWYgKCFkZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICBiZWhhdmlvckltcGxlbWVudGF0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICFkZWZhdWx0UHJldmVudGVkO1xuICAgIH1cbiAgICByZXR1cm4gd3JhcEV2ZW50LndyYXBFdmVudCgoKT0+dGFyZ2V0LmRpc3BhdGNoRXZlbnQoZXZlbnQpKTtcbn1cbmZ1bmN0aW9uIGRpc3BhdGNoRE9NRXZlbnQodGFyZ2V0LCB0eXBlLCBpbml0KSB7XG4gICAgY29uc3QgZXZlbnQgPSBjcmVhdGVFdmVudC5jcmVhdGVFdmVudCh0eXBlLCB0YXJnZXQsIGluaXQpO1xuICAgIHdyYXBFdmVudC53cmFwRXZlbnQoKCk9PnRhcmdldC5kaXNwYXRjaEV2ZW50KGV2ZW50KSk7XG59XG5cbmV4cG9ydHMuZGlzcGF0Y2hET01FdmVudCA9IGRpc3BhdGNoRE9NRXZlbnQ7XG5leHBvcnRzLmRpc3BhdGNoRXZlbnQgPSBkaXNwYXRjaEV2ZW50O1xuZXhwb3J0cy5kaXNwYXRjaFVJRXZlbnQgPSBkaXNwYXRjaFVJRXZlbnQ7XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQztBQUM5QkEsT0FBTyxDQUFDLG1CQUFtQixDQUFDO0FBQzVCQSxPQUFPLENBQUMsdUJBQXVCLENBQUM7QUFDaENBLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQztBQUNqQ0EsT0FBTyxDQUFDLHFCQUFx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