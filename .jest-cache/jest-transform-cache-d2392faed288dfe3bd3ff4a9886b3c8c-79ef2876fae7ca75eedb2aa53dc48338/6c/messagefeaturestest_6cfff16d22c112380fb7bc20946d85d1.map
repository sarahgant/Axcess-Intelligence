{"file":"C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\tests\\unit\\message-features.test.tsx","mappings":"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","names":[],"sources":["C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\tests\\unit\\message-features.test.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { render, screen, fireEvent, waitFor } from \"@testing-library/react\";\r\nimport userEvent from \"@testing-library/user-event\";\r\n\r\n/**\r\n * Test suite for message functionality features\r\n * Tests copy, reload/regenerate, and thumbs up/down features\r\n */\r\ndescribe(\"Message Features\", () => {\r\n  // Mock clipboard API\r\n  const mockClipboard = {\r\n    writeText: jest.fn(),\r\n  };\r\n  \r\n  // Mock DOM methods\r\n  const mockExecCommand = jest.fn();\r\n  \r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    \r\n    // Mock clipboard API\r\n    Object.assign(navigator, {\r\n      clipboard: mockClipboard,\r\n    });\r\n    \r\n    // Mock document.execCommand for fallback\r\n    document.execCommand = mockExecCommand;\r\n    \r\n    // Mock window.isSecureContext\r\n    Object.defineProperty(window, 'isSecureContext', {\r\n      writable: true,\r\n      value: true,\r\n    });\r\n  });\r\n\r\n  describe(\"Copy Functionality\", () => {\r\n    it(\"should copy message text using modern clipboard API\", async () => {\r\n      const testMessage = \"This is a test message\";\r\n      mockClipboard.writeText.mockResolvedValue(undefined);\r\n      \r\n      // Create a simple button that mimics the copy functionality from Home.tsx\r\n      const TestCopyComponent = () => {\r\n        const handleCopy = async () => {\r\n          try {\r\n            if (navigator.clipboard && window.isSecureContext) {\r\n              await navigator.clipboard.writeText(testMessage);\r\n            }\r\n          } catch (error) {\r\n            console.error('Failed to copy text:', error);\r\n          }\r\n        };\r\n        \r\n        return (\r\n          <button onClick={handleCopy} title=\"Copy message\">\r\n            Copy\r\n          </button>\r\n        );\r\n      };\r\n      \r\n      render(<TestCopyComponent />);\r\n      \r\n      const copyButton = screen.getByTitle(\"Copy message\");\r\n      await userEvent.click(copyButton);\r\n      \r\n      expect(mockClipboard.writeText).toHaveBeenCalledWith(testMessage);\r\n    });\r\n\r\n    it(\"should fallback to execCommand when clipboard API is not available\", async () => {\r\n      const testMessage = \"Test message for fallback\";\r\n      \r\n      // Mock clipboard API as unavailable\r\n      Object.assign(navigator, {\r\n        clipboard: undefined,\r\n      });\r\n      \r\n      // Mock DOM manipulation\r\n      const mockTextArea = {\r\n        value: '',\r\n        style: { position: '', left: '', top: '' },\r\n        focus: jest.fn(),\r\n        select: jest.fn(),\r\n        remove: jest.fn(),\r\n      };\r\n      \r\n      const mockCreateElement = jest.fn(() => mockTextArea);\r\n      const mockAppendChild = jest.fn();\r\n      \r\n      document.createElement = mockCreateElement;\r\n      document.body.appendChild = mockAppendChild;\r\n      mockExecCommand.mockReturnValue(true);\r\n      \r\n      const TestCopyFallbackComponent = () => {\r\n        const handleCopy = async () => {\r\n          try {\r\n            if (navigator.clipboard && window.isSecureContext) {\r\n              await navigator.clipboard.writeText(testMessage);\r\n            } else {\r\n              // Fallback implementation\r\n              const textArea = document.createElement('textarea');\r\n              textArea.value = testMessage;\r\n              textArea.style.position = 'fixed';\r\n              textArea.style.left = '-999999px';\r\n              textArea.style.top = '-999999px';\r\n              document.body.appendChild(textArea);\r\n              textArea.focus();\r\n              textArea.select();\r\n              document.execCommand('copy');\r\n              textArea.remove();\r\n            }\r\n          } catch (error) {\r\n            console.error('Failed to copy text:', error);\r\n          }\r\n        };\r\n        \r\n        return (\r\n          <button onClick={handleCopy} title=\"Copy message\">\r\n            Copy\r\n          </button>\r\n        );\r\n      };\r\n      \r\n      render(<TestCopyFallbackComponent />);\r\n      \r\n      const copyButton = screen.getByTitle(\"Copy message\");\r\n      await userEvent.click(copyButton);\r\n      \r\n      expect(mockCreateElement).toHaveBeenCalledWith('textarea');\r\n      expect(mockTextArea.value).toBe(testMessage);\r\n      expect(mockExecCommand).toHaveBeenCalledWith('copy');\r\n    });\r\n  });\r\n\r\n  describe(\"Regenerate/Reload Functionality\", () => {\r\n    it(\"should regenerate AI response when reload button is clicked\", async () => {\r\n      let messageText = \"Original AI response\";\r\n      const mockUpdateMessage = jest.fn();\r\n      const mockGenerateResponse = jest.fn(() => \"New regenerated response\");\r\n      \r\n      const TestRegenerateComponent = () => {\r\n        const [isLoading, setIsLoading] = React.useState(false);\r\n        \r\n        const handleRegenerate = async () => {\r\n          setIsLoading(true);\r\n          try {\r\n            // Simulate API delay\r\n            await new Promise(resolve => setTimeout(resolve, 100));\r\n            const newResponse = mockGenerateResponse(\"user message\");\r\n            mockUpdateMessage(\"message-id\", { text: newResponse, timestamp: new Date() });\r\n            messageText = newResponse;\r\n          } catch (error) {\r\n            console.error('Regeneration failed:', error);\r\n          } finally {\r\n            setIsLoading(false);\r\n          }\r\n        };\r\n        \r\n        return (\r\n          <div>\r\n            <div data-testid=\"message-text\">{messageText}</div>\r\n            <button \r\n              onClick={handleRegenerate} \r\n              title=\"Regenerate response\"\r\n              disabled={isLoading}\r\n            >\r\n              {isLoading ? 'Regenerating...' : 'Regenerate'}\r\n            </button>\r\n          </div>\r\n        );\r\n      };\r\n      \r\n      render(<TestRegenerateComponent />);\r\n      \r\n      const regenerateButton = screen.getByTitle(\"Regenerate response\");\r\n      await userEvent.click(regenerateButton);\r\n      \r\n      // Wait for async operation\r\n      await waitFor(() => {\r\n        expect(mockGenerateResponse).toHaveBeenCalledWith(\"user message\");\r\n        expect(mockUpdateMessage).toHaveBeenCalledWith(\r\n          \"message-id\", \r\n          expect.objectContaining({\r\n            text: \"New regenerated response\",\r\n            timestamp: expect.any(Date)\r\n          })\r\n        );\r\n      });\r\n    });\r\n  });\r\n\r\n  describe(\"Thumbs Up/Down Feedback\", () => {\r\n    it(\"should handle positive feedback (thumbs up)\", async () => {\r\n      const mockLogFeedback = jest.fn();\r\n      \r\n      const TestThumbsUpComponent = () => {\r\n        const handleFeedback = (isPositive: boolean) => {\r\n          mockLogFeedback({\r\n            messageId: \"test-message-id\",\r\n            isPositive,\r\n            action: isPositive ? 'feedback_positive' : 'feedback_negative'\r\n          });\r\n        };\r\n        \r\n        return (\r\n          <button \r\n            onClick={() => handleFeedback(true)} \r\n            title=\"Good response\"\r\n          >\r\n            👍\r\n          </button>\r\n        );\r\n      };\r\n      \r\n      render(<TestThumbsUpComponent />);\r\n      \r\n      const thumbsUpButton = screen.getByTitle(\"Good response\");\r\n      await userEvent.click(thumbsUpButton);\r\n      \r\n      expect(mockLogFeedback).toHaveBeenCalledWith({\r\n        messageId: \"test-message-id\",\r\n        isPositive: true,\r\n        action: 'feedback_positive'\r\n      });\r\n    });\r\n\r\n    it(\"should handle negative feedback (thumbs down)\", async () => {\r\n      const mockLogFeedback = jest.fn();\r\n      const mockShowFeedbackModal = jest.fn();\r\n      \r\n      const TestThumbsDownComponent = () => {\r\n        const handleFeedback = (isPositive: boolean) => {\r\n          mockLogFeedback({\r\n            messageId: \"test-message-id\",\r\n            isPositive,\r\n            action: isPositive ? 'feedback_positive' : 'feedback_negative'\r\n          });\r\n          \r\n          if (!isPositive) {\r\n            mockShowFeedbackModal(true);\r\n          }\r\n        };\r\n        \r\n        return (\r\n          <button \r\n            onClick={() => handleFeedback(false)} \r\n            title=\"Poor response\"\r\n          >\r\n            👎\r\n          </button>\r\n        );\r\n      };\r\n      \r\n      render(<TestThumbsDownComponent />);\r\n      \r\n      const thumbsDownButton = screen.getByTitle(\"Poor response\");\r\n      await userEvent.click(thumbsDownButton);\r\n      \r\n      expect(mockLogFeedback).toHaveBeenCalledWith({\r\n        messageId: \"test-message-id\",\r\n        isPositive: false,\r\n        action: 'feedback_negative'\r\n      });\r\n      expect(mockShowFeedbackModal).toHaveBeenCalledWith(true);\r\n    });\r\n\r\n    it(\"should provide visual feedback when buttons are clicked\", async () => {\r\n      const TestVisualFeedbackComponent = () => {\r\n        const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n          const button = e.currentTarget;\r\n          button.style.backgroundColor = '#dcfce7';\r\n          button.style.transform = 'scale(1.1)';\r\n          setTimeout(() => {\r\n            button.style.backgroundColor = '';\r\n            button.style.transform = '';\r\n          }, 1000);\r\n        };\r\n        \r\n        return (\r\n          <button onClick={handleClick} data-testid=\"feedback-button\">\r\n            Feedback\r\n          </button>\r\n        );\r\n      };\r\n      \r\n      render(<TestVisualFeedbackComponent />);\r\n      \r\n      const button = screen.getByTestId(\"feedback-button\");\r\n      await userEvent.click(button);\r\n      \r\n      // Check that styles were applied\r\n      expect(button.style.backgroundColor).toBe('rgb(220, 252, 231)');\r\n      expect(button.style.transform).toBe('scale(1.1)');\r\n    });\r\n  });\r\n\r\n  describe(\"Error Handling\", () => {\r\n    it(\"should handle copy failures gracefully\", async () => {\r\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\r\n      mockClipboard.writeText.mockRejectedValue(new Error('Clipboard not available'));\r\n      \r\n      const TestCopyErrorComponent = () => {\r\n        const handleCopy = async () => {\r\n          try {\r\n            await navigator.clipboard.writeText(\"test message\");\r\n          } catch (error) {\r\n            console.error('Failed to copy text:', error);\r\n          }\r\n        };\r\n        \r\n        return (\r\n          <button onClick={handleCopy} title=\"Copy message\">\r\n            Copy\r\n          </button>\r\n        );\r\n      };\r\n      \r\n      render(<TestCopyErrorComponent />);\r\n      \r\n      const copyButton = screen.getByTitle(\"Copy message\");\r\n      await userEvent.click(copyButton);\r\n      \r\n      expect(consoleSpy).toHaveBeenCalledWith(\r\n        'Failed to copy text:', \r\n        expect.any(Error)\r\n      );\r\n      \r\n      consoleSpy.mockRestore();\r\n    });\r\n\r\n    it(\"should handle regeneration failures gracefully\", async () => {\r\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\r\n      const mockFailingRegenerate = jest.fn(() => {\r\n        throw new Error('API Error');\r\n      });\r\n      \r\n      const TestRegenerateErrorComponent = () => {\r\n        const handleRegenerate = async () => {\r\n          try {\r\n            await mockFailingRegenerate();\r\n          } catch (error) {\r\n            console.error('Regeneration failed:', error);\r\n          }\r\n        };\r\n        \r\n        return (\r\n          <button onClick={handleRegenerate} title=\"Regenerate response\">\r\n            Regenerate\r\n          </button>\r\n        );\r\n      };\r\n      \r\n      render(<TestRegenerateErrorComponent />);\r\n      \r\n      const regenerateButton = screen.getByTitle(\"Regenerate response\");\r\n      await userEvent.click(regenerateButton);\r\n      \r\n      expect(consoleSpy).toHaveBeenCalledWith(\r\n        'Regeneration failed:', \r\n        expect.any(Error)\r\n      );\r\n      \r\n      consoleSpy.mockRestore();\r\n    });\r\n  });\r\n\r\n  describe(\"Accessibility\", () => {\r\n    it(\"should have proper ARIA labels for all buttons\", () => {\r\n      const TestAccessibilityComponent = () => (\r\n        <div>\r\n          <button title=\"Copy message\" aria-label=\"Copy message to clipboard\">\r\n            Copy\r\n          </button>\r\n          <button title=\"Regenerate response\" aria-label=\"Regenerate AI response\">\r\n            Regenerate\r\n          </button>\r\n          <button title=\"Good response\" aria-label=\"Mark response as helpful\">\r\n            👍\r\n          </button>\r\n          <button title=\"Poor response\" aria-label=\"Mark response as unhelpful\">\r\n            👎\r\n          </button>\r\n        </div>\r\n      );\r\n      \r\n      render(<TestAccessibilityComponent />);\r\n      \r\n      expect(screen.getByLabelText(\"Copy message to clipboard\")).toBeInTheDocument();\r\n      expect(screen.getByLabelText(\"Regenerate AI response\")).toBeInTheDocument();\r\n      expect(screen.getByLabelText(\"Mark response as helpful\")).toBeInTheDocument();\r\n      expect(screen.getByLabelText(\"Mark response as unhelpful\")).toBeInTheDocument();\r\n    });\r\n\r\n    it(\"should support keyboard navigation\", async () => {\r\n      const TestKeyboardComponent = () => (\r\n        <div>\r\n          <button title=\"Copy message\">Copy</button>\r\n          <button title=\"Regenerate response\">Regenerate</button>\r\n          <button title=\"Good response\">👍</button>\r\n          <button title=\"Poor response\">👎</button>\r\n        </div>\r\n      );\r\n      \r\n      render(<TestKeyboardComponent />);\r\n      \r\n      const copyButton = screen.getByTitle(\"Copy message\");\r\n      const regenerateButton = screen.getByTitle(\"Regenerate response\");\r\n      \r\n      // Tab navigation\r\n      copyButton.focus();\r\n      expect(copyButton).toHaveFocus();\r\n      \r\n      await userEvent.keyboard(\"{Tab}\");\r\n      expect(regenerateButton).toHaveFocus();\r\n    });\r\n  });\r\n});\r\n"],"version":3}