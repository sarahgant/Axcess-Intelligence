94557232976b7e132b97a96a55f10c66
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getUserCodeFrame = getUserCodeFrame;
// We try to load node dependencies
let picocolors = null;
let readFileSync = null;
let codeFrameColumns = null;
try {
  const nodeRequire = module && module.require;
  readFileSync = nodeRequire.call(module, 'fs').readFileSync;
  codeFrameColumns = nodeRequire.call(module, '@babel/code-frame').codeFrameColumns;
  picocolors = nodeRequire.call(module, 'picocolors');
} catch {
  // We're in a browser environment
}

// frame has the form "at myMethod (location/to/my/file.js:10:2)"
function getCodeFrame(frame) {
  const locationStart = frame.indexOf('(') + 1;
  const locationEnd = frame.indexOf(')');
  const frameLocation = frame.slice(locationStart, locationEnd);
  const frameLocationElements = frameLocation.split(':');
  const [filename, line, column] = [frameLocationElements[0], parseInt(frameLocationElements[1], 10), parseInt(frameLocationElements[2], 10)];
  let rawFileContents = '';
  try {
    rawFileContents = readFileSync(filename, 'utf-8');
  } catch {
    return '';
  }
  const codeFrame = codeFrameColumns(rawFileContents, {
    start: {
      line,
      column
    }
  }, {
    highlightCode: true,
    linesBelow: 0
  });
  return `${picocolors.dim(frameLocation)}\n${codeFrame}\n`;
}
function getUserCodeFrame() {
  // If we couldn't load dependencies, we can't generate the user trace
  /* istanbul ignore next */
  if (!readFileSync || !codeFrameColumns) {
    return '';
  }
  const err = new Error();
  const firstClientCodeFrame = err.stack.split('\n').slice(1) // Remove first line which has the form "Error: TypeError"
  .find(frame => !frame.includes('node_modules/')); // Ignore frames from 3rd party libraries

  return getCodeFrame(firstClientCodeFrame);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldFVzZXJDb2RlRnJhbWUiLCJwaWNvY29sb3JzIiwicmVhZEZpbGVTeW5jIiwiY29kZUZyYW1lQ29sdW1ucyIsIm5vZGVSZXF1aXJlIiwibW9kdWxlIiwicmVxdWlyZSIsImNhbGwiLCJnZXRDb2RlRnJhbWUiLCJmcmFtZSIsImxvY2F0aW9uU3RhcnQiLCJpbmRleE9mIiwibG9jYXRpb25FbmQiLCJmcmFtZUxvY2F0aW9uIiwic2xpY2UiLCJmcmFtZUxvY2F0aW9uRWxlbWVudHMiLCJzcGxpdCIsImZpbGVuYW1lIiwibGluZSIsImNvbHVtbiIsInBhcnNlSW50IiwicmF3RmlsZUNvbnRlbnRzIiwiY29kZUZyYW1lIiwic3RhcnQiLCJoaWdobGlnaHRDb2RlIiwibGluZXNCZWxvdyIsImRpbSIsImVyciIsIkVycm9yIiwiZmlyc3RDbGllbnRDb2RlRnJhbWUiLCJzdGFjayIsImZpbmQiLCJpbmNsdWRlcyJdLCJzb3VyY2VzIjpbImdldC11c2VyLWNvZGUtZnJhbWUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmdldFVzZXJDb2RlRnJhbWUgPSBnZXRVc2VyQ29kZUZyYW1lO1xuLy8gV2UgdHJ5IHRvIGxvYWQgbm9kZSBkZXBlbmRlbmNpZXNcbmxldCBwaWNvY29sb3JzID0gbnVsbDtcbmxldCByZWFkRmlsZVN5bmMgPSBudWxsO1xubGV0IGNvZGVGcmFtZUNvbHVtbnMgPSBudWxsO1xudHJ5IHtcbiAgY29uc3Qgbm9kZVJlcXVpcmUgPSBtb2R1bGUgJiYgbW9kdWxlLnJlcXVpcmU7XG4gIHJlYWRGaWxlU3luYyA9IG5vZGVSZXF1aXJlLmNhbGwobW9kdWxlLCAnZnMnKS5yZWFkRmlsZVN5bmM7XG4gIGNvZGVGcmFtZUNvbHVtbnMgPSBub2RlUmVxdWlyZS5jYWxsKG1vZHVsZSwgJ0BiYWJlbC9jb2RlLWZyYW1lJykuY29kZUZyYW1lQ29sdW1ucztcbiAgcGljb2NvbG9ycyA9IG5vZGVSZXF1aXJlLmNhbGwobW9kdWxlLCAncGljb2NvbG9ycycpO1xufSBjYXRjaCB7XG4gIC8vIFdlJ3JlIGluIGEgYnJvd3NlciBlbnZpcm9ubWVudFxufVxuXG4vLyBmcmFtZSBoYXMgdGhlIGZvcm0gXCJhdCBteU1ldGhvZCAobG9jYXRpb24vdG8vbXkvZmlsZS5qczoxMDoyKVwiXG5mdW5jdGlvbiBnZXRDb2RlRnJhbWUoZnJhbWUpIHtcbiAgY29uc3QgbG9jYXRpb25TdGFydCA9IGZyYW1lLmluZGV4T2YoJygnKSArIDE7XG4gIGNvbnN0IGxvY2F0aW9uRW5kID0gZnJhbWUuaW5kZXhPZignKScpO1xuICBjb25zdCBmcmFtZUxvY2F0aW9uID0gZnJhbWUuc2xpY2UobG9jYXRpb25TdGFydCwgbG9jYXRpb25FbmQpO1xuICBjb25zdCBmcmFtZUxvY2F0aW9uRWxlbWVudHMgPSBmcmFtZUxvY2F0aW9uLnNwbGl0KCc6Jyk7XG4gIGNvbnN0IFtmaWxlbmFtZSwgbGluZSwgY29sdW1uXSA9IFtmcmFtZUxvY2F0aW9uRWxlbWVudHNbMF0sIHBhcnNlSW50KGZyYW1lTG9jYXRpb25FbGVtZW50c1sxXSwgMTApLCBwYXJzZUludChmcmFtZUxvY2F0aW9uRWxlbWVudHNbMl0sIDEwKV07XG4gIGxldCByYXdGaWxlQ29udGVudHMgPSAnJztcbiAgdHJ5IHtcbiAgICByYXdGaWxlQ29udGVudHMgPSByZWFkRmlsZVN5bmMoZmlsZW5hbWUsICd1dGYtOCcpO1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbiAgY29uc3QgY29kZUZyYW1lID0gY29kZUZyYW1lQ29sdW1ucyhyYXdGaWxlQ29udGVudHMsIHtcbiAgICBzdGFydDoge1xuICAgICAgbGluZSxcbiAgICAgIGNvbHVtblxuICAgIH1cbiAgfSwge1xuICAgIGhpZ2hsaWdodENvZGU6IHRydWUsXG4gICAgbGluZXNCZWxvdzogMFxuICB9KTtcbiAgcmV0dXJuIGAke3BpY29jb2xvcnMuZGltKGZyYW1lTG9jYXRpb24pfVxcbiR7Y29kZUZyYW1lfVxcbmA7XG59XG5mdW5jdGlvbiBnZXRVc2VyQ29kZUZyYW1lKCkge1xuICAvLyBJZiB3ZSBjb3VsZG4ndCBsb2FkIGRlcGVuZGVuY2llcywgd2UgY2FuJ3QgZ2VuZXJhdGUgdGhlIHVzZXIgdHJhY2VcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgaWYgKCFyZWFkRmlsZVN5bmMgfHwgIWNvZGVGcmFtZUNvbHVtbnMpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbiAgY29uc3QgZXJyID0gbmV3IEVycm9yKCk7XG4gIGNvbnN0IGZpcnN0Q2xpZW50Q29kZUZyYW1lID0gZXJyLnN0YWNrLnNwbGl0KCdcXG4nKS5zbGljZSgxKSAvLyBSZW1vdmUgZmlyc3QgbGluZSB3aGljaCBoYXMgdGhlIGZvcm0gXCJFcnJvcjogVHlwZUVycm9yXCJcbiAgLmZpbmQoZnJhbWUgPT4gIWZyYW1lLmluY2x1ZGVzKCdub2RlX21vZHVsZXMvJykpOyAvLyBJZ25vcmUgZnJhbWVzIGZyb20gM3JkIHBhcnR5IGxpYnJhcmllc1xuXG4gIHJldHVybiBnZXRDb2RlRnJhbWUoZmlyc3RDbGllbnRDb2RlRnJhbWUpO1xufSJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FBQztBQUNGRCxPQUFPLENBQUNFLGdCQUFnQixHQUFHQSxnQkFBZ0I7QUFDM0M7QUFDQSxJQUFJQyxVQUFVLEdBQUcsSUFBSTtBQUNyQixJQUFJQyxZQUFZLEdBQUcsSUFBSTtBQUN2QixJQUFJQyxnQkFBZ0IsR0FBRyxJQUFJO0FBQzNCLElBQUk7RUFDRixNQUFNQyxXQUFXLEdBQUdDLE1BQU0sSUFBSUEsTUFBTSxDQUFDQyxPQUFPO0VBQzVDSixZQUFZLEdBQUdFLFdBQVcsQ0FBQ0csSUFBSSxDQUFDRixNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUNILFlBQVk7RUFDMURDLGdCQUFnQixHQUFHQyxXQUFXLENBQUNHLElBQUksQ0FBQ0YsTUFBTSxFQUFFLG1CQUFtQixDQUFDLENBQUNGLGdCQUFnQjtFQUNqRkYsVUFBVSxHQUFHRyxXQUFXLENBQUNHLElBQUksQ0FBQ0YsTUFBTSxFQUFFLFlBQVksQ0FBQztBQUNyRCxDQUFDLENBQUMsTUFBTTtFQUNOO0FBQUE7O0FBR0Y7QUFDQSxTQUFTRyxZQUFZQSxDQUFDQyxLQUFLLEVBQUU7RUFDM0IsTUFBTUMsYUFBYSxHQUFHRCxLQUFLLENBQUNFLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO0VBQzVDLE1BQU1DLFdBQVcsR0FBR0gsS0FBSyxDQUFDRSxPQUFPLENBQUMsR0FBRyxDQUFDO0VBQ3RDLE1BQU1FLGFBQWEsR0FBR0osS0FBSyxDQUFDSyxLQUFLLENBQUNKLGFBQWEsRUFBRUUsV0FBVyxDQUFDO0VBQzdELE1BQU1HLHFCQUFxQixHQUFHRixhQUFhLENBQUNHLEtBQUssQ0FBQyxHQUFHLENBQUM7RUFDdEQsTUFBTSxDQUFDQyxRQUFRLEVBQUVDLElBQUksRUFBRUMsTUFBTSxDQUFDLEdBQUcsQ0FBQ0oscUJBQXFCLENBQUMsQ0FBQyxDQUFDLEVBQUVLLFFBQVEsQ0FBQ0wscUJBQXFCLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUVLLFFBQVEsQ0FBQ0wscUJBQXFCLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7RUFDM0ksSUFBSU0sZUFBZSxHQUFHLEVBQUU7RUFDeEIsSUFBSTtJQUNGQSxlQUFlLEdBQUduQixZQUFZLENBQUNlLFFBQVEsRUFBRSxPQUFPLENBQUM7RUFDbkQsQ0FBQyxDQUFDLE1BQU07SUFDTixPQUFPLEVBQUU7RUFDWDtFQUNBLE1BQU1LLFNBQVMsR0FBR25CLGdCQUFnQixDQUFDa0IsZUFBZSxFQUFFO0lBQ2xERSxLQUFLLEVBQUU7TUFDTEwsSUFBSTtNQUNKQztJQUNGO0VBQ0YsQ0FBQyxFQUFFO0lBQ0RLLGFBQWEsRUFBRSxJQUFJO0lBQ25CQyxVQUFVLEVBQUU7RUFDZCxDQUFDLENBQUM7RUFDRixPQUFPLEdBQUd4QixVQUFVLENBQUN5QixHQUFHLENBQUNiLGFBQWEsQ0FBQyxLQUFLUyxTQUFTLElBQUk7QUFDM0Q7QUFDQSxTQUFTdEIsZ0JBQWdCQSxDQUFBLEVBQUc7RUFDMUI7RUFDQTtFQUNBLElBQUksQ0FBQ0UsWUFBWSxJQUFJLENBQUNDLGdCQUFnQixFQUFFO0lBQ3RDLE9BQU8sRUFBRTtFQUNYO0VBQ0EsTUFBTXdCLEdBQUcsR0FBRyxJQUFJQyxLQUFLLENBQUMsQ0FBQztFQUN2QixNQUFNQyxvQkFBb0IsR0FBR0YsR0FBRyxDQUFDRyxLQUFLLENBQUNkLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQ0YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQUEsQ0FDM0RpQixJQUFJLENBQUN0QixLQUFLLElBQUksQ0FBQ0EsS0FBSyxDQUFDdUIsUUFBUSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7RUFFbEQsT0FBT3hCLFlBQVksQ0FBQ3FCLG9CQUFvQixDQUFDO0FBQzNDIiwiaWdub3JlTGlzdCI6W119