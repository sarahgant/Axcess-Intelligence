ecc73c4da84e8a5d5d9987c61d2c33c7
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.queryByTestId = exports.queryAllByTestId = exports.getByTestId = exports.getAllByTestId = exports.findByTestId = exports.findAllByTestId = void 0;
var _helpers = require("../helpers");
var _queryHelpers = require("../query-helpers");
var _allUtils = require("./all-utils");
const getTestIdAttribute = () => (0, _allUtils.getConfig)().testIdAttribute;
const queryAllByTestId = (...args) => {
  (0, _helpers.checkContainerType)(args[0]);
  return (0, _allUtils.queryAllByAttribute)(getTestIdAttribute(), ...args);
};
const getMultipleError = (c, id) => `Found multiple elements by: [${getTestIdAttribute()}="${id}"]`;
const getMissingError = (c, id) => `Unable to find an element by: [${getTestIdAttribute()}="${id}"]`;
const queryAllByTestIdWithSuggestions = exports.queryAllByTestId = (0, _queryHelpers.wrapAllByQueryWithSuggestion)(queryAllByTestId, queryAllByTestId.name, 'queryAll');
const [queryByTestId, getAllByTestId, getByTestId, findAllByTestId, findByTestId] = (0, _allUtils.buildQueries)(queryAllByTestId, getMultipleError, getMissingError);
exports.findByTestId = findByTestId;
exports.findAllByTestId = findAllByTestId;
exports.getByTestId = getByTestId;
exports.getAllByTestId = getAllByTestId;
exports.queryByTestId = queryByTestId;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInF1ZXJ5QnlUZXN0SWQiLCJxdWVyeUFsbEJ5VGVzdElkIiwiZ2V0QnlUZXN0SWQiLCJnZXRBbGxCeVRlc3RJZCIsImZpbmRCeVRlc3RJZCIsImZpbmRBbGxCeVRlc3RJZCIsIl9oZWxwZXJzIiwicmVxdWlyZSIsIl9xdWVyeUhlbHBlcnMiLCJfYWxsVXRpbHMiLCJnZXRUZXN0SWRBdHRyaWJ1dGUiLCJnZXRDb25maWciLCJ0ZXN0SWRBdHRyaWJ1dGUiLCJhcmdzIiwiY2hlY2tDb250YWluZXJUeXBlIiwicXVlcnlBbGxCeUF0dHJpYnV0ZSIsImdldE11bHRpcGxlRXJyb3IiLCJjIiwiaWQiLCJnZXRNaXNzaW5nRXJyb3IiLCJxdWVyeUFsbEJ5VGVzdElkV2l0aFN1Z2dlc3Rpb25zIiwid3JhcEFsbEJ5UXVlcnlXaXRoU3VnZ2VzdGlvbiIsIm5hbWUiLCJidWlsZFF1ZXJpZXMiXSwic291cmNlcyI6WyJ0ZXN0LWlkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5xdWVyeUJ5VGVzdElkID0gZXhwb3J0cy5xdWVyeUFsbEJ5VGVzdElkID0gZXhwb3J0cy5nZXRCeVRlc3RJZCA9IGV4cG9ydHMuZ2V0QWxsQnlUZXN0SWQgPSBleHBvcnRzLmZpbmRCeVRlc3RJZCA9IGV4cG9ydHMuZmluZEFsbEJ5VGVzdElkID0gdm9pZCAwO1xudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4uL2hlbHBlcnNcIik7XG52YXIgX3F1ZXJ5SGVscGVycyA9IHJlcXVpcmUoXCIuLi9xdWVyeS1oZWxwZXJzXCIpO1xudmFyIF9hbGxVdGlscyA9IHJlcXVpcmUoXCIuL2FsbC11dGlsc1wiKTtcbmNvbnN0IGdldFRlc3RJZEF0dHJpYnV0ZSA9ICgpID0+ICgwLCBfYWxsVXRpbHMuZ2V0Q29uZmlnKSgpLnRlc3RJZEF0dHJpYnV0ZTtcbmNvbnN0IHF1ZXJ5QWxsQnlUZXN0SWQgPSAoLi4uYXJncykgPT4ge1xuICAoMCwgX2hlbHBlcnMuY2hlY2tDb250YWluZXJUeXBlKShhcmdzWzBdKTtcbiAgcmV0dXJuICgwLCBfYWxsVXRpbHMucXVlcnlBbGxCeUF0dHJpYnV0ZSkoZ2V0VGVzdElkQXR0cmlidXRlKCksIC4uLmFyZ3MpO1xufTtcbmNvbnN0IGdldE11bHRpcGxlRXJyb3IgPSAoYywgaWQpID0+IGBGb3VuZCBtdWx0aXBsZSBlbGVtZW50cyBieTogWyR7Z2V0VGVzdElkQXR0cmlidXRlKCl9PVwiJHtpZH1cIl1gO1xuY29uc3QgZ2V0TWlzc2luZ0Vycm9yID0gKGMsIGlkKSA9PiBgVW5hYmxlIHRvIGZpbmQgYW4gZWxlbWVudCBieTogWyR7Z2V0VGVzdElkQXR0cmlidXRlKCl9PVwiJHtpZH1cIl1gO1xuY29uc3QgcXVlcnlBbGxCeVRlc3RJZFdpdGhTdWdnZXN0aW9ucyA9IGV4cG9ydHMucXVlcnlBbGxCeVRlc3RJZCA9ICgwLCBfcXVlcnlIZWxwZXJzLndyYXBBbGxCeVF1ZXJ5V2l0aFN1Z2dlc3Rpb24pKHF1ZXJ5QWxsQnlUZXN0SWQsIHF1ZXJ5QWxsQnlUZXN0SWQubmFtZSwgJ3F1ZXJ5QWxsJyk7XG5jb25zdCBbcXVlcnlCeVRlc3RJZCwgZ2V0QWxsQnlUZXN0SWQsIGdldEJ5VGVzdElkLCBmaW5kQWxsQnlUZXN0SWQsIGZpbmRCeVRlc3RJZF0gPSAoMCwgX2FsbFV0aWxzLmJ1aWxkUXVlcmllcykocXVlcnlBbGxCeVRlc3RJZCwgZ2V0TXVsdGlwbGVFcnJvciwgZ2V0TWlzc2luZ0Vycm9yKTtcbmV4cG9ydHMuZmluZEJ5VGVzdElkID0gZmluZEJ5VGVzdElkO1xuZXhwb3J0cy5maW5kQWxsQnlUZXN0SWQgPSBmaW5kQWxsQnlUZXN0SWQ7XG5leHBvcnRzLmdldEJ5VGVzdElkID0gZ2V0QnlUZXN0SWQ7XG5leHBvcnRzLmdldEFsbEJ5VGVzdElkID0gZ2V0QWxsQnlUZXN0SWQ7XG5leHBvcnRzLnF1ZXJ5QnlUZXN0SWQgPSBxdWVyeUJ5VGVzdElkOyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FBQztBQUNGRCxPQUFPLENBQUNFLGFBQWEsR0FBR0YsT0FBTyxDQUFDRyxnQkFBZ0IsR0FBR0gsT0FBTyxDQUFDSSxXQUFXLEdBQUdKLE9BQU8sQ0FBQ0ssY0FBYyxHQUFHTCxPQUFPLENBQUNNLFlBQVksR0FBR04sT0FBTyxDQUFDTyxlQUFlLEdBQUcsS0FBSyxDQUFDO0FBQ3pKLElBQUlDLFFBQVEsR0FBR0MsT0FBTyxDQUFDLFlBQVksQ0FBQztBQUNwQyxJQUFJQyxhQUFhLEdBQUdELE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQztBQUMvQyxJQUFJRSxTQUFTLEdBQUdGLE9BQU8sQ0FBQyxhQUFhLENBQUM7QUFDdEMsTUFBTUcsa0JBQWtCLEdBQUdBLENBQUEsS0FBTSxDQUFDLENBQUMsRUFBRUQsU0FBUyxDQUFDRSxTQUFTLEVBQUUsQ0FBQyxDQUFDQyxlQUFlO0FBQzNFLE1BQU1YLGdCQUFnQixHQUFHQSxDQUFDLEdBQUdZLElBQUksS0FBSztFQUNwQyxDQUFDLENBQUMsRUFBRVAsUUFBUSxDQUFDUSxrQkFBa0IsRUFBRUQsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ3pDLE9BQU8sQ0FBQyxDQUFDLEVBQUVKLFNBQVMsQ0FBQ00sbUJBQW1CLEVBQUVMLGtCQUFrQixDQUFDLENBQUMsRUFBRSxHQUFHRyxJQUFJLENBQUM7QUFDMUUsQ0FBQztBQUNELE1BQU1HLGdCQUFnQixHQUFHQSxDQUFDQyxDQUFDLEVBQUVDLEVBQUUsS0FBSyxnQ0FBZ0NSLGtCQUFrQixDQUFDLENBQUMsS0FBS1EsRUFBRSxJQUFJO0FBQ25HLE1BQU1DLGVBQWUsR0FBR0EsQ0FBQ0YsQ0FBQyxFQUFFQyxFQUFFLEtBQUssa0NBQWtDUixrQkFBa0IsQ0FBQyxDQUFDLEtBQUtRLEVBQUUsSUFBSTtBQUNwRyxNQUFNRSwrQkFBK0IsR0FBR3RCLE9BQU8sQ0FBQ0csZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDLEVBQUVPLGFBQWEsQ0FBQ2EsNEJBQTRCLEVBQUVwQixnQkFBZ0IsRUFBRUEsZ0JBQWdCLENBQUNxQixJQUFJLEVBQUUsVUFBVSxDQUFDO0FBQ3ZLLE1BQU0sQ0FBQ3RCLGFBQWEsRUFBRUcsY0FBYyxFQUFFRCxXQUFXLEVBQUVHLGVBQWUsRUFBRUQsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUVLLFNBQVMsQ0FBQ2MsWUFBWSxFQUFFdEIsZ0JBQWdCLEVBQUVlLGdCQUFnQixFQUFFRyxlQUFlLENBQUM7QUFDcEtyQixPQUFPLENBQUNNLFlBQVksR0FBR0EsWUFBWTtBQUNuQ04sT0FBTyxDQUFDTyxlQUFlLEdBQUdBLGVBQWU7QUFDekNQLE9BQU8sQ0FBQ0ksV0FBVyxHQUFHQSxXQUFXO0FBQ2pDSixPQUFPLENBQUNLLGNBQWMsR0FBR0EsY0FBYztBQUN2Q0wsT0FBTyxDQUFDRSxhQUFhLEdBQUdBLGFBQWEiLCJpZ25vcmVMaXN0IjpbXX0=