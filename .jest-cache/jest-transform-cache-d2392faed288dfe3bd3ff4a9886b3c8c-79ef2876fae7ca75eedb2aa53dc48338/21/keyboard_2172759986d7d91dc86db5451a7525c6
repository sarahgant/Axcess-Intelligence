a0617c8aa358e2e17c6fd3f77d1596de
'use strict';

require('../utils/dataTransfer/Clipboard.js');
var getActiveElement = require('../utils/focus/getActiveElement.js');
function _define_property(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var DOM_KEY_LOCATION = /*#__PURE__*/function (DOM_KEY_LOCATION) {
  DOM_KEY_LOCATION[DOM_KEY_LOCATION["STANDARD"] = 0] = "STANDARD";
  DOM_KEY_LOCATION[DOM_KEY_LOCATION["LEFT"] = 1] = "LEFT";
  DOM_KEY_LOCATION[DOM_KEY_LOCATION["RIGHT"] = 2] = "RIGHT";
  DOM_KEY_LOCATION[DOM_KEY_LOCATION["NUMPAD"] = 3] = "NUMPAD";
  return DOM_KEY_LOCATION;
}({});
const modifierKeys = ['Alt', 'AltGraph', 'Control', 'Fn', 'Meta', 'Shift', 'Symbol'];
function isModifierKey(key) {
  return modifierKeys.includes(key);
}
const modifierLocks = ['CapsLock', 'FnLock', 'NumLock', 'ScrollLock', 'SymbolLock'];
function isModifierLock(key) {
  return modifierLocks.includes(key);
}
class KeyboardHost {
  isKeyPressed(keyDef) {
    return this.pressed.has(String(keyDef.code));
  }
  getPressedKeys() {
    return this.pressed.values().map(p => p.keyDef);
  }
  /** Press a key */
  async keydown(instance, keyDef) {
    const key = String(keyDef.key);
    const code = String(keyDef.code);
    const target = getActiveElement.getActiveElementOrBody(instance.config.document);
    this.setKeydownTarget(target);
    this.pressed.add(code, keyDef);
    if (isModifierKey(key)) {
      this.modifiers[key] = true;
    }
    const unprevented = instance.dispatchUIEvent(target, 'keydown', {
      key,
      code
    });
    if (isModifierLock(key) && !this.modifiers[key]) {
      this.modifiers[key] = true;
      this.modifierLockStart[key] = true;
    }
    if (unprevented) {
      this.pressed.setUnprevented(code);
    }
    if (unprevented && this.hasKeyPress(key)) {
      instance.dispatchUIEvent(getActiveElement.getActiveElementOrBody(instance.config.document), 'keypress', {
        key,
        code,
        charCode: keyDef.key === 'Enter' ? 13 : String(keyDef.key).charCodeAt(0)
      });
    }
  }
  /** Release a key */
  async keyup(instance, keyDef) {
    const key = String(keyDef.key);
    const code = String(keyDef.code);
    const unprevented = this.pressed.isUnprevented(code);
    this.pressed.delete(code);
    if (isModifierKey(key) && !this.pressed.values().find(p => p.keyDef.key === key)) {
      this.modifiers[key] = false;
    }
    instance.dispatchUIEvent(getActiveElement.getActiveElementOrBody(instance.config.document), 'keyup', {
      key,
      code
    }, !unprevented);
    if (isModifierLock(key) && this.modifiers[key]) {
      if (this.modifierLockStart[key]) {
        this.modifierLockStart[key] = false;
      } else {
        this.modifiers[key] = false;
      }
    }
  }
  setKeydownTarget(target) {
    if (target !== this.lastKeydownTarget) {
      this.carryChar = '';
    }
    this.lastKeydownTarget = target;
  }
  hasKeyPress(key) {
    return (key.length === 1 || key === 'Enter') && !this.modifiers.Control && !this.modifiers.Alt;
  }
  constructor(system) {
    _define_property(this, "system", undefined);
    _define_property(this, "modifiers", {
      Alt: false,
      AltGraph: false,
      CapsLock: false,
      Control: false,
      Fn: false,
      FnLock: false,
      Meta: false,
      NumLock: false,
      ScrollLock: false,
      Shift: false,
      Symbol: false,
      SymbolLock: false
    });
    _define_property(this, "pressed", new class {
      add(code, keyDef) {
        var _this_registry, _code;
        var _;
        (_ = (_this_registry = this.registry)[_code = code]) !== null && _ !== undefined ? _ : _this_registry[_code] = {
          keyDef,
          unpreventedDefault: false
        };
      }
      has(code) {
        return !!this.registry[code];
      }
      setUnprevented(code) {
        const o = this.registry[code];
        if (o) {
          o.unpreventedDefault = true;
        }
      }
      isUnprevented(code) {
        var _this_registry_code;
        return !!((_this_registry_code = this.registry[code]) === null || _this_registry_code === undefined ? undefined : _this_registry_code.unpreventedDefault);
      }
      delete(code) {
        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
        delete this.registry[code];
      }
      values() {
        return Object.values(this.registry);
      }
      constructor() {
        _define_property(this, "registry", {});
      }
    }());
    _define_property(this, "carryChar", '');
    _define_property(this, "lastKeydownTarget", undefined);
    _define_property(this, "modifierLockStart", {});
    this.system = system;
  }
}
exports.DOM_KEY_LOCATION = DOM_KEY_LOCATION;
exports.KeyboardHost = KeyboardHost;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1aXJlIiwiZ2V0QWN0aXZlRWxlbWVudCIsIl9kZWZpbmVfcHJvcGVydHkiLCJvYmoiLCJrZXkiLCJ2YWx1ZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiRE9NX0tFWV9MT0NBVElPTiIsIm1vZGlmaWVyS2V5cyIsImlzTW9kaWZpZXJLZXkiLCJpbmNsdWRlcyIsIm1vZGlmaWVyTG9ja3MiLCJpc01vZGlmaWVyTG9jayIsIktleWJvYXJkSG9zdCIsImlzS2V5UHJlc3NlZCIsImtleURlZiIsInByZXNzZWQiLCJoYXMiLCJTdHJpbmciLCJjb2RlIiwiZ2V0UHJlc3NlZEtleXMiLCJ2YWx1ZXMiLCJtYXAiLCJwIiwia2V5ZG93biIsImluc3RhbmNlIiwidGFyZ2V0IiwiZ2V0QWN0aXZlRWxlbWVudE9yQm9keSIsImNvbmZpZyIsImRvY3VtZW50Iiwic2V0S2V5ZG93blRhcmdldCIsImFkZCIsIm1vZGlmaWVycyIsInVucHJldmVudGVkIiwiZGlzcGF0Y2hVSUV2ZW50IiwibW9kaWZpZXJMb2NrU3RhcnQiLCJzZXRVbnByZXZlbnRlZCIsImhhc0tleVByZXNzIiwiY2hhckNvZGUiLCJjaGFyQ29kZUF0Iiwia2V5dXAiLCJpc1VucHJldmVudGVkIiwiZGVsZXRlIiwiZmluZCIsImxhc3RLZXlkb3duVGFyZ2V0IiwiY2FycnlDaGFyIiwibGVuZ3RoIiwiQ29udHJvbCIsIkFsdCIsImNvbnN0cnVjdG9yIiwic3lzdGVtIiwidW5kZWZpbmVkIiwiQWx0R3JhcGgiLCJDYXBzTG9jayIsIkZuIiwiRm5Mb2NrIiwiTWV0YSIsIk51bUxvY2siLCJTY3JvbGxMb2NrIiwiU2hpZnQiLCJTeW1ib2wiLCJTeW1ib2xMb2NrIiwiX3RoaXNfcmVnaXN0cnkiLCJfY29kZSIsIl8iLCJyZWdpc3RyeSIsInVucHJldmVudGVkRGVmYXVsdCIsIm8iLCJfdGhpc19yZWdpc3RyeV9jb2RlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImtleWJvYXJkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxucmVxdWlyZSgnLi4vdXRpbHMvZGF0YVRyYW5zZmVyL0NsaXBib2FyZC5qcycpO1xudmFyIGdldEFjdGl2ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi91dGlscy9mb2N1cy9nZXRBY3RpdmVFbGVtZW50LmpzJyk7XG5cbmZ1bmN0aW9uIF9kZWZpbmVfcHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgaWYgKGtleSBpbiBvYmopIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbn1cbnZhciBET01fS0VZX0xPQ0FUSU9OID0gLyojX19QVVJFX18qLyBmdW5jdGlvbihET01fS0VZX0xPQ0FUSU9OKSB7XG4gICAgRE9NX0tFWV9MT0NBVElPTltET01fS0VZX0xPQ0FUSU9OW1wiU1RBTkRBUkRcIl0gPSAwXSA9IFwiU1RBTkRBUkRcIjtcbiAgICBET01fS0VZX0xPQ0FUSU9OW0RPTV9LRVlfTE9DQVRJT05bXCJMRUZUXCJdID0gMV0gPSBcIkxFRlRcIjtcbiAgICBET01fS0VZX0xPQ0FUSU9OW0RPTV9LRVlfTE9DQVRJT05bXCJSSUdIVFwiXSA9IDJdID0gXCJSSUdIVFwiO1xuICAgIERPTV9LRVlfTE9DQVRJT05bRE9NX0tFWV9MT0NBVElPTltcIk5VTVBBRFwiXSA9IDNdID0gXCJOVU1QQURcIjtcbiAgICByZXR1cm4gRE9NX0tFWV9MT0NBVElPTjtcbn0oe30pO1xuY29uc3QgbW9kaWZpZXJLZXlzID0gW1xuICAgICdBbHQnLFxuICAgICdBbHRHcmFwaCcsXG4gICAgJ0NvbnRyb2wnLFxuICAgICdGbicsXG4gICAgJ01ldGEnLFxuICAgICdTaGlmdCcsXG4gICAgJ1N5bWJvbCdcbl07XG5mdW5jdGlvbiBpc01vZGlmaWVyS2V5KGtleSkge1xuICAgIHJldHVybiBtb2RpZmllcktleXMuaW5jbHVkZXMoa2V5KTtcbn1cbmNvbnN0IG1vZGlmaWVyTG9ja3MgPSBbXG4gICAgJ0NhcHNMb2NrJyxcbiAgICAnRm5Mb2NrJyxcbiAgICAnTnVtTG9jaycsXG4gICAgJ1Njcm9sbExvY2snLFxuICAgICdTeW1ib2xMb2NrJ1xuXTtcbmZ1bmN0aW9uIGlzTW9kaWZpZXJMb2NrKGtleSkge1xuICAgIHJldHVybiBtb2RpZmllckxvY2tzLmluY2x1ZGVzKGtleSk7XG59XG5jbGFzcyBLZXlib2FyZEhvc3Qge1xuICAgIGlzS2V5UHJlc3NlZChrZXlEZWYpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJlc3NlZC5oYXMoU3RyaW5nKGtleURlZi5jb2RlKSk7XG4gICAgfVxuICAgIGdldFByZXNzZWRLZXlzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcmVzc2VkLnZhbHVlcygpLm1hcCgocCk9PnAua2V5RGVmKTtcbiAgICB9XG4gICAgLyoqIFByZXNzIGEga2V5ICovIGFzeW5jIGtleWRvd24oaW5zdGFuY2UsIGtleURlZikge1xuICAgICAgICBjb25zdCBrZXkgPSBTdHJpbmcoa2V5RGVmLmtleSk7XG4gICAgICAgIGNvbnN0IGNvZGUgPSBTdHJpbmcoa2V5RGVmLmNvZGUpO1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBnZXRBY3RpdmVFbGVtZW50LmdldEFjdGl2ZUVsZW1lbnRPckJvZHkoaW5zdGFuY2UuY29uZmlnLmRvY3VtZW50KTtcbiAgICAgICAgdGhpcy5zZXRLZXlkb3duVGFyZ2V0KHRhcmdldCk7XG4gICAgICAgIHRoaXMucHJlc3NlZC5hZGQoY29kZSwga2V5RGVmKTtcbiAgICAgICAgaWYgKGlzTW9kaWZpZXJLZXkoa2V5KSkge1xuICAgICAgICAgICAgdGhpcy5tb2RpZmllcnNba2V5XSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdW5wcmV2ZW50ZWQgPSBpbnN0YW5jZS5kaXNwYXRjaFVJRXZlbnQodGFyZ2V0LCAna2V5ZG93bicsIHtcbiAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgIGNvZGVcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChpc01vZGlmaWVyTG9jayhrZXkpICYmICF0aGlzLm1vZGlmaWVyc1trZXldKSB7XG4gICAgICAgICAgICB0aGlzLm1vZGlmaWVyc1trZXldID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMubW9kaWZpZXJMb2NrU3RhcnRba2V5XSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVucHJldmVudGVkKSB7XG4gICAgICAgICAgICB0aGlzLnByZXNzZWQuc2V0VW5wcmV2ZW50ZWQoY29kZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVucHJldmVudGVkICYmIHRoaXMuaGFzS2V5UHJlc3Moa2V5KSkge1xuICAgICAgICAgICAgaW5zdGFuY2UuZGlzcGF0Y2hVSUV2ZW50KGdldEFjdGl2ZUVsZW1lbnQuZ2V0QWN0aXZlRWxlbWVudE9yQm9keShpbnN0YW5jZS5jb25maWcuZG9jdW1lbnQpLCAna2V5cHJlc3MnLCB7XG4gICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgIGNvZGUsXG4gICAgICAgICAgICAgICAgY2hhckNvZGU6IGtleURlZi5rZXkgPT09ICdFbnRlcicgPyAxMyA6IFN0cmluZyhrZXlEZWYua2V5KS5jaGFyQ29kZUF0KDApXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKiogUmVsZWFzZSBhIGtleSAqLyBhc3luYyBrZXl1cChpbnN0YW5jZSwga2V5RGVmKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IFN0cmluZyhrZXlEZWYua2V5KTtcbiAgICAgICAgY29uc3QgY29kZSA9IFN0cmluZyhrZXlEZWYuY29kZSk7XG4gICAgICAgIGNvbnN0IHVucHJldmVudGVkID0gdGhpcy5wcmVzc2VkLmlzVW5wcmV2ZW50ZWQoY29kZSk7XG4gICAgICAgIHRoaXMucHJlc3NlZC5kZWxldGUoY29kZSk7XG4gICAgICAgIGlmIChpc01vZGlmaWVyS2V5KGtleSkgJiYgIXRoaXMucHJlc3NlZC52YWx1ZXMoKS5maW5kKChwKT0+cC5rZXlEZWYua2V5ID09PSBrZXkpKSB7XG4gICAgICAgICAgICB0aGlzLm1vZGlmaWVyc1trZXldID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaW5zdGFuY2UuZGlzcGF0Y2hVSUV2ZW50KGdldEFjdGl2ZUVsZW1lbnQuZ2V0QWN0aXZlRWxlbWVudE9yQm9keShpbnN0YW5jZS5jb25maWcuZG9jdW1lbnQpLCAna2V5dXAnLCB7XG4gICAgICAgICAgICBrZXksXG4gICAgICAgICAgICBjb2RlXG4gICAgICAgIH0sICF1bnByZXZlbnRlZCk7XG4gICAgICAgIGlmIChpc01vZGlmaWVyTG9jayhrZXkpICYmIHRoaXMubW9kaWZpZXJzW2tleV0pIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm1vZGlmaWVyTG9ja1N0YXJ0W2tleV0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGlmaWVyTG9ja1N0YXJ0W2tleV0gPSBmYWxzZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tb2RpZmllcnNba2V5XSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHNldEtleWRvd25UYXJnZXQodGFyZ2V0KSB7XG4gICAgICAgIGlmICh0YXJnZXQgIT09IHRoaXMubGFzdEtleWRvd25UYXJnZXQpIHtcbiAgICAgICAgICAgIHRoaXMuY2FycnlDaGFyID0gJyc7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sYXN0S2V5ZG93blRhcmdldCA9IHRhcmdldDtcbiAgICB9XG4gICAgaGFzS2V5UHJlc3Moa2V5KSB7XG4gICAgICAgIHJldHVybiAoa2V5Lmxlbmd0aCA9PT0gMSB8fCBrZXkgPT09ICdFbnRlcicpICYmICF0aGlzLm1vZGlmaWVycy5Db250cm9sICYmICF0aGlzLm1vZGlmaWVycy5BbHQ7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHN5c3RlbSl7XG4gICAgICAgIF9kZWZpbmVfcHJvcGVydHkodGhpcywgXCJzeXN0ZW1cIiwgdW5kZWZpbmVkKTtcbiAgICAgICAgX2RlZmluZV9wcm9wZXJ0eSh0aGlzLCBcIm1vZGlmaWVyc1wiLCB7XG4gICAgICAgICAgICBBbHQ6IGZhbHNlLFxuICAgICAgICAgICAgQWx0R3JhcGg6IGZhbHNlLFxuICAgICAgICAgICAgQ2Fwc0xvY2s6IGZhbHNlLFxuICAgICAgICAgICAgQ29udHJvbDogZmFsc2UsXG4gICAgICAgICAgICBGbjogZmFsc2UsXG4gICAgICAgICAgICBGbkxvY2s6IGZhbHNlLFxuICAgICAgICAgICAgTWV0YTogZmFsc2UsXG4gICAgICAgICAgICBOdW1Mb2NrOiBmYWxzZSxcbiAgICAgICAgICAgIFNjcm9sbExvY2s6IGZhbHNlLFxuICAgICAgICAgICAgU2hpZnQ6IGZhbHNlLFxuICAgICAgICAgICAgU3ltYm9sOiBmYWxzZSxcbiAgICAgICAgICAgIFN5bWJvbExvY2s6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICBfZGVmaW5lX3Byb3BlcnR5KHRoaXMsIFwicHJlc3NlZFwiLCBuZXcgY2xhc3Mge1xuICAgICAgICAgICAgYWRkKGNvZGUsIGtleURlZikge1xuICAgICAgICAgICAgICAgIHZhciBfdGhpc19yZWdpc3RyeSwgX2NvZGU7XG4gICAgICAgICAgICAgICAgdmFyIF87XG4gICAgICAgICAgICAgICAgKF8gPSAoX3RoaXNfcmVnaXN0cnkgPSB0aGlzLnJlZ2lzdHJ5KVtfY29kZSA9IGNvZGVdKSAhPT0gbnVsbCAmJiBfICE9PSB1bmRlZmluZWQgPyBfIDogX3RoaXNfcmVnaXN0cnlbX2NvZGVdID0ge1xuICAgICAgICAgICAgICAgICAgICBrZXlEZWYsXG4gICAgICAgICAgICAgICAgICAgIHVucHJldmVudGVkRGVmYXVsdDogZmFsc2VcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGFzKGNvZGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gISF0aGlzLnJlZ2lzdHJ5W2NvZGVdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2V0VW5wcmV2ZW50ZWQoY29kZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSB0aGlzLnJlZ2lzdHJ5W2NvZGVdO1xuICAgICAgICAgICAgICAgIGlmIChvKSB7XG4gICAgICAgICAgICAgICAgICAgIG8udW5wcmV2ZW50ZWREZWZhdWx0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpc1VucHJldmVudGVkKGNvZGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgX3RoaXNfcmVnaXN0cnlfY29kZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gISEoKF90aGlzX3JlZ2lzdHJ5X2NvZGUgPSB0aGlzLnJlZ2lzdHJ5W2NvZGVdKSA9PT0gbnVsbCB8fCBfdGhpc19yZWdpc3RyeV9jb2RlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBfdGhpc19yZWdpc3RyeV9jb2RlLnVucHJldmVudGVkRGVmYXVsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWxldGUoY29kZSkge1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZHluYW1pYy1kZWxldGVcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5yZWdpc3RyeVtjb2RlXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhbHVlcygpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyh0aGlzLnJlZ2lzdHJ5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgICAgICAgICAgX2RlZmluZV9wcm9wZXJ0eSh0aGlzLCBcInJlZ2lzdHJ5XCIsIHt9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSgpKTtcbiAgICAgICAgX2RlZmluZV9wcm9wZXJ0eSh0aGlzLCBcImNhcnJ5Q2hhclwiLCAnJyk7XG4gICAgICAgIF9kZWZpbmVfcHJvcGVydHkodGhpcywgXCJsYXN0S2V5ZG93blRhcmdldFwiLCB1bmRlZmluZWQpO1xuICAgICAgICBfZGVmaW5lX3Byb3BlcnR5KHRoaXMsIFwibW9kaWZpZXJMb2NrU3RhcnRcIiwge30pO1xuICAgICAgICB0aGlzLnN5c3RlbSA9IHN5c3RlbTtcbiAgICB9XG59XG5cbmV4cG9ydHMuRE9NX0tFWV9MT0NBVElPTiA9IERPTV9LRVlfTE9DQVRJT047XG5leHBvcnRzLktleWJvYXJkSG9zdCA9IEtleWJvYXJkSG9zdDtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWkEsT0FBTyxDQUFDLG9DQUFvQyxDQUFDO0FBQzdDLElBQUlDLGdCQUFnQixHQUFHRCxPQUFPLENBQUMsb0NBQW9DLENBQUM7QUFFcEUsU0FBU0UsZ0JBQWdCQSxDQUFDQyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsS0FBSyxFQUFFO0VBQ3ZDLElBQUlELEdBQUcsSUFBSUQsR0FBRyxFQUFFO0lBQ1pHLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDSixHQUFHLEVBQUVDLEdBQUcsRUFBRTtNQUM1QkMsS0FBSyxFQUFFQSxLQUFLO01BQ1pHLFVBQVUsRUFBRSxJQUFJO01BQ2hCQyxZQUFZLEVBQUUsSUFBSTtNQUNsQkMsUUFBUSxFQUFFO0lBQ2QsQ0FBQyxDQUFDO0VBQ04sQ0FBQyxNQUFNO0lBQ0hQLEdBQUcsQ0FBQ0MsR0FBRyxDQUFDLEdBQUdDLEtBQUs7RUFDcEI7RUFDQSxPQUFPRixHQUFHO0FBQ2Q7QUFDQSxJQUFJUSxnQkFBZ0IsR0FBRyxhQUFjLFVBQVNBLGdCQUFnQixFQUFFO0VB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