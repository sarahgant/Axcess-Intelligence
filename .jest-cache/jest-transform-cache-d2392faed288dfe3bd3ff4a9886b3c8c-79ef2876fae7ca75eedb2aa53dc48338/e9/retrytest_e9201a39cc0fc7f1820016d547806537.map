{"file":"C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\tests\\unit\\retry.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\tests\\unit\\retry.test.ts"],"sourcesContent":["import { RetryWithBackoff, defaultRetry, quickRetry, aggressiveRetry } from '../../src/core/utils/retry';\r\n\r\n// Mock the logger to avoid console output during tests\r\njest.mock('../../src/core/logging/logger', () => ({\r\n  logger: {\r\n    debug: jest.fn(),\r\n    info: jest.fn(),\r\n    warn: jest.fn(),\r\n    error: jest.fn(),\r\n    fatal: jest.fn()\r\n  }\r\n}));\r\n\r\ndescribe('RetryWithBackoff', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('Configuration', () => {\r\n    it('should use default configuration when no config provided', () => {\r\n      const retry = new RetryWithBackoff();\r\n      const config = retry.getConfig();\r\n      \r\n      expect(config.maxAttempts).toBe(3);\r\n      expect(config.initialDelay).toBe(1000);\r\n      expect(config.maxDelay).toBe(10000);\r\n      expect(config.backoffMultiplier).toBe(2);\r\n      expect(config.retryableErrors).toContain('NETWORK_ERROR');\r\n      expect(config.retryableErrors).toContain('TIMEOUT');\r\n    });\r\n\r\n    it('should merge custom configuration with defaults', () => {\r\n      const retry = new RetryWithBackoff({\r\n        maxAttempts: 5,\r\n        initialDelay: 500\r\n      });\r\n      const config = retry.getConfig();\r\n      \r\n      expect(config.maxAttempts).toBe(5);\r\n      expect(config.initialDelay).toBe(500);\r\n      expect(config.maxDelay).toBe(10000); // Default\r\n      expect(config.backoffMultiplier).toBe(2); // Default\r\n    });\r\n\r\n    it('should update configuration after creation', () => {\r\n      const retry = new RetryWithBackoff();\r\n      retry.updateConfig({ maxAttempts: 10 });\r\n      \r\n      expect(retry.getConfig().maxAttempts).toBe(10);\r\n    });\r\n  });\r\n\r\n  describe('Successful execution', () => {\r\n    it('should return result immediately on success', async () => {\r\n      const retry = new RetryWithBackoff();\r\n      const mockFn = jest.fn().mockResolvedValue('success');\r\n      \r\n      const result = await retry.execute(mockFn, 'test');\r\n      \r\n      expect(result).toBe('success');\r\n      expect(mockFn).toHaveBeenCalledTimes(1);\r\n    });\r\n  });\r\n\r\n  describe('Failed execution', () => {\r\n    it('should not retry non-retryable errors', async () => {\r\n      const retry = new RetryWithBackoff({ maxAttempts: 3 });\r\n      const mockFn = jest.fn().mockRejectedValue(new Error('AUTHENTICATION_FAILED'));\r\n      \r\n      await expect(retry.execute(mockFn, 'test')).rejects.toThrow('AUTHENTICATION_FAILED');\r\n      expect(mockFn).toHaveBeenCalledTimes(1); // Should not retry\r\n    });\r\n  });\r\n\r\n  describe('Error detection', () => {\r\n    it('should detect retryable errors by message', () => {\r\n      const retry = new RetryWithBackoff();\r\n      const error = new Error('NETWORK_ERROR occurred');\r\n      \r\n      // Test the private method through reflection\r\n      const isRetryable = (retry as any).isRetryable(error);\r\n      expect(isRetryable).toBe(true);\r\n    });\r\n\r\n    it('should detect retryable errors by code', () => {\r\n      const retry = new RetryWithBackoff();\r\n      const error = new Error('Connection failed');\r\n      (error as any).code = 'ECONNABORTED';\r\n      \r\n      // Test the private method through reflection\r\n      const isRetryable = (retry as any).isRetryable(error);\r\n      expect(isRetryable).toBe(true);\r\n    });\r\n\r\n    it('should not retry non-retryable errors', () => {\r\n      const retry = new RetryWithBackoff();\r\n      const error = new Error('AUTHENTICATION_FAILED');\r\n      \r\n      // Test the private method through reflection\r\n      const isRetryable = (retry as any).isRetryable(error);\r\n      expect(isRetryable).toBe(false);\r\n    });\r\n  });\r\n\r\n  describe('executeWithResult', () => {\r\n    it('should return detailed result on success', async () => {\r\n      const retry = new RetryWithBackoff();\r\n      const mockFn = jest.fn().mockResolvedValue('success');\r\n      \r\n      const result = await retry.executeWithResult(mockFn, 'test');\r\n      \r\n      expect(result.success).toBe(true);\r\n      expect(result.data).toBe('success');\r\n      expect(result.attempts).toBe(1);\r\n      expect(result.totalTime).toBeGreaterThanOrEqual(0);\r\n      expect(result.error).toBeUndefined();\r\n    });\r\n  });\r\n\r\n  describe('Pre-configured instances', () => {\r\n    it('should have different configurations for different use cases', () => {\r\n      const defaultConfig = defaultRetry.getConfig();\r\n      const quickConfig = quickRetry.getConfig();\r\n      const aggressiveConfig = aggressiveRetry.getConfig();\r\n      \r\n      expect(defaultConfig.maxAttempts).toBe(3);\r\n      expect(quickConfig.maxAttempts).toBe(2);\r\n      expect(aggressiveConfig.maxAttempts).toBe(5);\r\n      \r\n      expect(quickConfig.initialDelay).toBe(500);\r\n      expect(aggressiveConfig.initialDelay).toBe(2000);\r\n    });\r\n  });\r\n\r\n  describe('Delay calculation', () => {\r\n    it('should calculate exponential backoff delays', () => {\r\n      const retry = new RetryWithBackoff({\r\n        initialDelay: 1000,\r\n        backoffMultiplier: 2,\r\n        maxDelay: 5000\r\n      });\r\n      \r\n      // Test the private method through reflection\r\n      const delay1 = (retry as any).calculateDelay(1);\r\n      const delay2 = (retry as any).calculateDelay(2);\r\n      const delay3 = (retry as any).calculateDelay(3);\r\n      \r\n      expect(delay1).toBeGreaterThanOrEqual(1000);\r\n      expect(delay2).toBeGreaterThanOrEqual(2000);\r\n      expect(delay3).toBeGreaterThanOrEqual(4000);\r\n    });\r\n\r\n    it('should respect max delay limit', () => {\r\n      const retry = new RetryWithBackoff({\r\n        initialDelay: 1000,\r\n        backoffMultiplier: 10, // Very aggressive\r\n        maxDelay: 2000\r\n      });\r\n      \r\n      // Test the private method through reflection\r\n      const delay = (retry as any).calculateDelay(3);\r\n      expect(delay).toBeLessThanOrEqual(2000 + 1000); // maxDelay + jitter\r\n    });\r\n  });\r\n});\r\n"],"version":3}