8d45b04157f7360a9a2ff77b51a1eaf6
'use strict';

require('../utils/dataTransfer/Clipboard.js');
var wait = require('../utils/misc/wait.js');
var parseKeyDef = require('./parseKeyDef.js');
async function keyboard(text) {
  const actions = parseKeyDef.parseKeyDef(this.config.keyboardMap, text);
  for (let i = 0; i < actions.length; i++) {
    await wait.wait(this.config);
    await keyboardAction(this, actions[i]);
  }
}
async function keyboardAction(instance, {
  keyDef,
  releasePrevious,
  releaseSelf,
  repeat
}) {
  const {
    system
  } = instance;
  // Release the key automatically if it was pressed before.
  if (system.keyboard.isKeyPressed(keyDef)) {
    await system.keyboard.keyup(instance, keyDef);
  }
  if (!releasePrevious) {
    for (let i = 1; i <= repeat; i++) {
      await system.keyboard.keydown(instance, keyDef);
      if (i < repeat) {
        await wait.wait(instance.config);
      }
    }
    // Release the key only on the last iteration on `state.repeatKey`.
    if (releaseSelf) {
      await system.keyboard.keyup(instance, keyDef);
    }
  }
}
async function releaseAllKeys(instance) {
  for (const k of instance.system.keyboard.getPressedKeys()) {
    await instance.system.keyboard.keyup(instance, k);
  }
}
exports.keyboard = keyboard;
exports.releaseAllKeys = releaseAllKeys;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1aXJlIiwid2FpdCIsInBhcnNlS2V5RGVmIiwia2V5Ym9hcmQiLCJ0ZXh0IiwiYWN0aW9ucyIsImNvbmZpZyIsImtleWJvYXJkTWFwIiwiaSIsImxlbmd0aCIsImtleWJvYXJkQWN0aW9uIiwiaW5zdGFuY2UiLCJrZXlEZWYiLCJyZWxlYXNlUHJldmlvdXMiLCJyZWxlYXNlU2VsZiIsInJlcGVhdCIsInN5c3RlbSIsImlzS2V5UHJlc3NlZCIsImtleXVwIiwia2V5ZG93biIsInJlbGVhc2VBbGxLZXlzIiwiayIsImdldFByZXNzZWRLZXlzIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxucmVxdWlyZSgnLi4vdXRpbHMvZGF0YVRyYW5zZmVyL0NsaXBib2FyZC5qcycpO1xudmFyIHdhaXQgPSByZXF1aXJlKCcuLi91dGlscy9taXNjL3dhaXQuanMnKTtcbnZhciBwYXJzZUtleURlZiA9IHJlcXVpcmUoJy4vcGFyc2VLZXlEZWYuanMnKTtcblxuYXN5bmMgZnVuY3Rpb24ga2V5Ym9hcmQodGV4dCkge1xuICAgIGNvbnN0IGFjdGlvbnMgPSBwYXJzZUtleURlZi5wYXJzZUtleURlZih0aGlzLmNvbmZpZy5rZXlib2FyZE1hcCwgdGV4dCk7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IGFjdGlvbnMubGVuZ3RoOyBpKyspe1xuICAgICAgICBhd2FpdCB3YWl0LndhaXQodGhpcy5jb25maWcpO1xuICAgICAgICBhd2FpdCBrZXlib2FyZEFjdGlvbih0aGlzLCBhY3Rpb25zW2ldKTtcbiAgICB9XG59XG5hc3luYyBmdW5jdGlvbiBrZXlib2FyZEFjdGlvbihpbnN0YW5jZSwgeyBrZXlEZWYsIHJlbGVhc2VQcmV2aW91cywgcmVsZWFzZVNlbGYsIHJlcGVhdCB9KSB7XG4gICAgY29uc3QgeyBzeXN0ZW0gfSA9IGluc3RhbmNlO1xuICAgIC8vIFJlbGVhc2UgdGhlIGtleSBhdXRvbWF0aWNhbGx5IGlmIGl0IHdhcyBwcmVzc2VkIGJlZm9yZS5cbiAgICBpZiAoc3lzdGVtLmtleWJvYXJkLmlzS2V5UHJlc3NlZChrZXlEZWYpKSB7XG4gICAgICAgIGF3YWl0IHN5c3RlbS5rZXlib2FyZC5rZXl1cChpbnN0YW5jZSwga2V5RGVmKTtcbiAgICB9XG4gICAgaWYgKCFyZWxlYXNlUHJldmlvdXMpIHtcbiAgICAgICAgZm9yKGxldCBpID0gMTsgaSA8PSByZXBlYXQ7IGkrKyl7XG4gICAgICAgICAgICBhd2FpdCBzeXN0ZW0ua2V5Ym9hcmQua2V5ZG93bihpbnN0YW5jZSwga2V5RGVmKTtcbiAgICAgICAgICAgIGlmIChpIDwgcmVwZWF0KSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgd2FpdC53YWl0KGluc3RhbmNlLmNvbmZpZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVsZWFzZSB0aGUga2V5IG9ubHkgb24gdGhlIGxhc3QgaXRlcmF0aW9uIG9uIGBzdGF0ZS5yZXBlYXRLZXlgLlxuICAgICAgICBpZiAocmVsZWFzZVNlbGYpIHtcbiAgICAgICAgICAgIGF3YWl0IHN5c3RlbS5rZXlib2FyZC5rZXl1cChpbnN0YW5jZSwga2V5RGVmKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmFzeW5jIGZ1bmN0aW9uIHJlbGVhc2VBbGxLZXlzKGluc3RhbmNlKSB7XG4gICAgZm9yIChjb25zdCBrIG9mIGluc3RhbmNlLnN5c3RlbS5rZXlib2FyZC5nZXRQcmVzc2VkS2V5cygpKXtcbiAgICAgICAgYXdhaXQgaW5zdGFuY2Uuc3lzdGVtLmtleWJvYXJkLmtleXVwKGluc3RhbmNlLCBrKTtcbiAgICB9XG59XG5cbmV4cG9ydHMua2V5Ym9hcmQgPSBrZXlib2FyZDtcbmV4cG9ydHMucmVsZWFzZUFsbEtleXMgPSByZWxlYXNlQWxsS2V5cztcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWkEsT0FBTyxDQUFDLG9DQUFvQyxDQUFDO0FBQzdDLElBQUlDLElBQUksR0FBR0QsT0FBTyxDQUFDLHVCQUF1QixDQUFDO0FBQzNDLElBQUlFLFdBQVcsR0FBR0YsT0FBTyxDQUFDLGtCQUFrQixDQUFDO0FBRTdDLGVBQWVHLFFBQVFBLENBQUNDLElBQUksRUFBRTtFQUMxQixNQUFNQyxPQUFPLEdBQUdILFdBQVcsQ0FBQ0EsV0FBVyxDQUFDLElBQUksQ0FBQ0ksTUFBTSxDQUFDQyxXQUFXLEVBQUVILElBQUksQ0FBQztFQUN0RSxLQUFJLElBQUlJLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0gsT0FBTyxDQUFDSSxNQUFNLEVBQUVELENBQUMsRUFBRSxFQUFDO0lBQ25DLE1BQU1QLElBQUksQ0FBQ0EsSUFBSSxDQUFDLElBQUksQ0FBQ0ssTUFBTSxDQUFDO0lBQzVCLE1BQU1JLGNBQWMsQ0FBQyxJQUFJLEVBQUVMLE9BQU8sQ0FBQ0csQ0FBQyxDQUFDLENBQUM7RUFDMUM7QUFDSjtBQUNBLGVBQWVFLGNBQWNBLENBQUNDLFFBQVEsRUFBRTtFQUFFQyxNQUFNO0VBQUVDLGVBQWU7RUFBRUMsV0FBVztFQUFFQztBQUFPLENBQUMsRUFBRTtFQUN0RixNQUFNO0lBQUVDO0VBQU8sQ0FBQyxHQUFHTCxRQUFRO0VBQzNCO0VBQ0EsSUFBSUssTUFBTSxDQUFDYixRQUFRLENBQUNjLFlBQVksQ0FBQ0wsTUFBTSxDQUFDLEVBQUU7SUFDdEMsTUFBTUksTUFBTSxDQUFDYixRQUFRLENBQUNlLEtBQUssQ0FBQ1AsUUFBUSxFQUFFQyxNQUFNLENBQUM7RUFDakQ7RUFDQSxJQUFJLENBQUNDLGVBQWUsRUFBRTtJQUNsQixLQUFJLElBQUlMLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsSUFBSU8sTUFBTSxFQUFFUCxDQUFDLEVBQUUsRUFBQztNQUM1QixNQUFNUSxNQUFNLENBQUNiLFFBQVEsQ0FBQ2dCLE9BQU8sQ0FBQ1IsUUFBUSxFQUFFQyxNQUFNLENBQUM7TUFDL0MsSUFBSUosQ0FBQyxHQUFHTyxNQUFNLEVBQUU7UUFDWixNQUFNZCxJQUFJLENBQUNBLElBQUksQ0FBQ1UsUUFBUSxDQUFDTCxNQUFNLENBQUM7TUFDcEM7SUFDSjtJQUNBO0lBQ0EsSUFBSVEsV0FBVyxFQUFFO01BQ2IsTUFBTUUsTUFBTSxDQUFDYixRQUFRLENBQUNlLEtBQUssQ0FBQ1AsUUFBUSxFQUFFQyxNQUFNLENBQUM7SUFDakQ7RUFDSjtBQUNKO0FBQ0EsZUFBZVEsY0FBY0EsQ0FBQ1QsUUFBUSxFQUFFO0VBQ3BDLEtBQUssTUFBTVUsQ0FBQyxJQUFJVixRQUFRLENBQUNLLE1BQU0sQ0FBQ2IsUUFBUSxDQUFDbUIsY0FBYyxDQUFDLENBQUMsRUFBQztJQUN0RCxNQUFNWCxRQUFRLENBQUNLLE1BQU0sQ0FBQ2IsUUFBUSxDQUFDZSxLQUFLLENBQUNQLFFBQVEsRUFBRVUsQ0FBQyxDQUFDO0VBQ3JEO0FBQ0o7QUFFQUUsT0FBTyxDQUFDcEIsUUFBUSxHQUFHQSxRQUFRO0FBQzNCb0IsT0FBTyxDQUFDSCxjQUFjLEdBQUdBLGNBQWMiLCJpZ25vcmVMaXN0IjpbXX0=