715142eb58335b7bac244c865c791425
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const schemas_1 = require("../../src/core/validation/schemas");
(0, globals_1.describe)('Validation Schemas', () => {
    (0, globals_1.describe)('messageSchema', () => {
        (0, globals_1.it)('should validate a valid message', () => {
            const validMessage = {
                content: 'Hello, world!',
                role: 'user',
                timestamp: new Date(),
                metadata: { sessionId: '123' }
            };
            const result = schemas_1.messageSchema.safeParse(validMessage);
            (0, globals_1.expect)(result.success).toBe(true);
        });
        (0, globals_1.it)('should validate a minimal message', () => {
            const minimalMessage = {
                content: 'Test',
                role: 'assistant'
            };
            const result = schemas_1.messageSchema.safeParse(minimalMessage);
            (0, globals_1.expect)(result.success).toBe(true);
        });
        (0, globals_1.it)('should reject empty content', () => {
            const invalidMessage = {
                content: '',
                role: 'user'
            };
            const result = schemas_1.messageSchema.safeParse(invalidMessage);
            (0, globals_1.expect)(result.success).toBe(false);
            if (!result.success) {
                (0, globals_1.expect)(result.error.issues[0].path).toContain('content');
            }
        });
        (0, globals_1.it)('should reject content that is too long', () => {
            const invalidMessage = {
                content: 'a'.repeat(10001),
                role: 'user'
            };
            const result = schemas_1.messageSchema.safeParse(invalidMessage);
            (0, globals_1.expect)(result.success).toBe(false);
            if (!result.success) {
                (0, globals_1.expect)(result.error.issues[0].path).toContain('content');
            }
        });
        (0, globals_1.it)('should reject invalid role', () => {
            const invalidMessage = {
                content: 'Test',
                role: 'invalid'
            };
            const result = schemas_1.messageSchema.safeParse(invalidMessage);
            (0, globals_1.expect)(result.success).toBe(false);
            if (!result.success) {
                (0, globals_1.expect)(result.error.issues[0].path).toContain('role');
            }
        });
    });
    (0, globals_1.describe)('fileUploadSchema', () => {
        (0, globals_1.it)('should validate a valid file upload', () => {
            const mockFile = new File(['test content'], 'test.pdf', { type: 'application/pdf' });
            const validUpload = {
                name: 'test.pdf',
                size: 1024,
                type: 'application/pdf',
                content: mockFile
            };
            const result = schemas_1.fileUploadSchema.safeParse(validUpload);
            (0, globals_1.expect)(result.success).toBe(true);
        });
        (0, globals_1.it)('should reject file with empty name', () => {
            const mockFile = new File(['test content'], 'test.pdf', { type: 'application/pdf' });
            const invalidUpload = {
                name: '',
                size: 1024,
                type: 'application/pdf',
                content: mockFile
            };
            const result = schemas_1.fileUploadSchema.safeParse(invalidUpload);
            (0, globals_1.expect)(result.success).toBe(false);
            if (!result.success) {
                (0, globals_1.expect)(result.error.issues[0].path).toContain('name');
            }
        });
        (0, globals_1.it)('should reject file with name too long', () => {
            const mockFile = new File(['test content'], 'test.pdf', { type: 'application/pdf' });
            const invalidUpload = {
                name: 'a'.repeat(256),
                size: 1024,
                type: 'application/pdf',
                content: mockFile
            };
            const result = schemas_1.fileUploadSchema.safeParse(invalidUpload);
            (0, globals_1.expect)(result.success).toBe(false);
            if (!result.success) {
                (0, globals_1.expect)(result.error.issues[0].path).toContain('name');
            }
        });
        (0, globals_1.it)('should reject file that is too large', () => {
            const mockFile = new File(['test content'], 'test.pdf', { type: 'application/pdf' });
            const invalidUpload = {
                name: 'test.pdf',
                size: 21 * 1024 * 1024, // 21MB
                type: 'application/pdf',
                content: mockFile
            };
            const result = schemas_1.fileUploadSchema.safeParse(invalidUpload);
            (0, globals_1.expect)(result.success).toBe(false);
            if (!result.success) {
                (0, globals_1.expect)(result.error.issues[0].path).toContain('size');
            }
        });
        (0, globals_1.it)('should reject unsupported file type', () => {
            const mockFile = new File(['test content'], 'test.exe', { type: 'application/x-executable' });
            const invalidUpload = {
                name: 'test.exe',
                size: 1024,
                type: 'application/x-executable',
                content: mockFile
            };
            const result = schemas_1.fileUploadSchema.safeParse(invalidUpload);
            (0, globals_1.expect)(result.success).toBe(false);
            if (!result.success) {
                (0, globals_1.expect)(result.error.issues[0].path).toContain('type');
            }
        });
        (0, globals_1.it)('should accept all supported file types', () => {
            const supportedTypes = [
                'application/pdf',
                'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                'text/plain',
                'image/png',
                'image/jpeg'
            ];
            supportedTypes.forEach(type => {
                const mockFile = new File(['test content'], 'test.file', { type });
                const validUpload = {
                    name: 'test.file',
                    size: 1024,
                    type: type,
                    content: mockFile
                };
                const result = schemas_1.fileUploadSchema.safeParse(validUpload);
                (0, globals_1.expect)(result.success).toBe(true);
            });
        });
    });
    (0, globals_1.describe)('apiRequestSchema', () => {
        (0, globals_1.it)('should validate a valid API request', () => {
            const validRequest = {
                messages: [
                    {
                        content: 'Hello',
                        role: 'user'
                    },
                    {
                        content: 'Hi there!',
                        role: 'assistant'
                    }
                ],
                model: 'gpt-4',
                temperature: 0.7,
                maxTokens: 1000
            };
            const result = schemas_1.apiRequestSchema.safeParse(validRequest);
            (0, globals_1.expect)(result.success).toBe(true);
        });
        (0, globals_1.it)('should validate minimal API request', () => {
            const minimalRequest = {
                messages: [
                    {
                        content: 'Hello',
                        role: 'user'
                    }
                ]
            };
            const result = schemas_1.apiRequestSchema.safeParse(minimalRequest);
            (0, globals_1.expect)(result.success).toBe(true);
        });
        (0, globals_1.it)('should reject empty messages array', () => {
            const invalidRequest = {
                messages: []
            };
            const result = schemas_1.apiRequestSchema.safeParse(invalidRequest);
            (0, globals_1.expect)(result.success).toBe(false);
            if (!result.success) {
                (0, globals_1.expect)(result.error.issues[0].path).toContain('messages');
            }
        });
        (0, globals_1.it)('should reject invalid temperature', () => {
            const invalidRequest = {
                messages: [
                    {
                        content: 'Hello',
                        role: 'user'
                    }
                ],
                temperature: 3.0 // Too high
            };
            const result = schemas_1.apiRequestSchema.safeParse(invalidRequest);
            (0, globals_1.expect)(result.success).toBe(false);
            if (!result.success) {
                (0, globals_1.expect)(result.error.issues[0].path).toContain('temperature');
            }
        });
        (0, globals_1.it)('should reject negative temperature', () => {
            const invalidRequest = {
                messages: [
                    {
                        content: 'Hello',
                        role: 'user'
                    }
                ],
                temperature: -0.1
            };
            const result = schemas_1.apiRequestSchema.safeParse(invalidRequest);
            (0, globals_1.expect)(result.success).toBe(false);
            if (!result.success) {
                (0, globals_1.expect)(result.error.issues[0].path).toContain('temperature');
            }
        });
        (0, globals_1.it)('should reject invalid maxTokens', () => {
            const invalidRequest = {
                messages: [
                    {
                        content: 'Hello',
                        role: 'user'
                    }
                ],
                maxTokens: 0 // Too low
            };
            const result = schemas_1.apiRequestSchema.safeParse(invalidRequest);
            (0, globals_1.expect)(result.success).toBe(false);
            if (!result.success) {
                (0, globals_1.expect)(result.error.issues[0].path).toContain('maxTokens');
            }
        });
        (0, globals_1.it)('should reject maxTokens that is too high', () => {
            const invalidRequest = {
                messages: [
                    {
                        content: 'Hello',
                        role: 'user'
                    }
                ],
                maxTokens: 100001 // Too high
            };
            const result = schemas_1.apiRequestSchema.safeParse(invalidRequest);
            (0, globals_1.expect)(result.success).toBe(false);
            if (!result.success) {
                (0, globals_1.expect)(result.error.issues[0].path).toContain('maxTokens');
            }
        });
    });
    (0, globals_1.describe)('sanitizeInput', () => {
        (0, globals_1.it)('should remove HTML tags', () => {
            const input = '<script>alert("xss")</script>Hello world';
            const result = (0, schemas_1.sanitizeInput)(input);
            (0, globals_1.expect)(result).toBe('scriptalert("xss")/scriptHello world');
        });
        (0, globals_1.it)('should remove javascript protocol', () => {
            const input = 'javascript:alert("xss")';
            const result = (0, schemas_1.sanitizeInput)(input);
            (0, globals_1.expect)(result).toBe('alert("xss")');
        });
        (0, globals_1.it)('should remove event handlers', () => {
            const input = 'onclick=alert("xss") onload=alert("xss")';
            const result = (0, schemas_1.sanitizeInput)(input);
            (0, globals_1.expect)(result).toBe('alert("xss") alert("xss")');
        });
        (0, globals_1.it)('should trim whitespace', () => {
            const input = '  Hello world  ';
            const result = (0, schemas_1.sanitizeInput)(input);
            (0, globals_1.expect)(result).toBe('Hello world');
        });
        (0, globals_1.it)('should handle empty string', () => {
            const input = '';
            const result = (0, schemas_1.sanitizeInput)(input);
            (0, globals_1.expect)(result).toBe('');
        });
        (0, globals_1.it)('should handle string with only whitespace', () => {
            const input = '   \n\t  ';
            const result = (0, schemas_1.sanitizeInput)(input);
            (0, globals_1.expect)(result).toBe('');
        });
        (0, globals_1.it)('should preserve normal text', () => {
            const input = 'This is normal text with numbers 123 and symbols @#$%';
            const result = (0, schemas_1.sanitizeInput)(input);
            (0, globals_1.expect)(result).toBe('This is normal text with numbers 123 and symbols @#$%');
        });
        (0, globals_1.it)('should handle complex XSS attempts', () => {
            const input = '<img src="x" onerror="alert(\'xss\')">javascript:alert("xss")<script>alert("xss")</script>';
            const result = (0, schemas_1.sanitizeInput)(input);
            (0, globals_1.expect)(result).toBe('img src="x" "alert(\'xss\')"alert("xss")scriptalert("xss")/script');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxzYXJhaFxcUmVwb3NcXENDSCBBeGNlc3MgSW50ZWxsaWdlbmNlIFZpYmVkXFx0ZXN0c1xcdW5pdFxcdmFsaWRhdGlvbi1zY2hlbWFzLnRlc3QudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSwyQ0FBcUQ7QUFDckQsK0RBSzJDO0FBRzNDLElBQUEsa0JBQVEsRUFBQyxvQkFBb0IsRUFBRSxHQUFHLEVBQUU7SUFDbEMsSUFBQSxrQkFBUSxFQUFDLGVBQWUsRUFBRSxHQUFHLEVBQUU7UUFDN0IsSUFBQSxZQUFFLEVBQUMsaUNBQWlDLEVBQUUsR0FBRyxFQUFFO1lBQ3pDLE1BQU0sWUFBWSxHQUFHO2dCQUNuQixPQUFPLEVBQUUsZUFBZTtnQkFDeEIsSUFBSSxFQUFFLE1BQWU7Z0JBQ3JCLFNBQVMsRUFBRSxJQUFJLElBQUksRUFBRTtnQkFDckIsUUFBUSxFQUFFLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRTthQUMvQixDQUFDO1lBRUYsTUFBTSxNQUFNLEdBQUcsdUJBQWEsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDckQsSUFBQSxnQkFBTSxFQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDcEMsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFBLFlBQUUsRUFBQyxtQ0FBbUMsRUFBRSxHQUFHLEVBQUU7WUFDM0MsTUFBTSxjQUFjLEdBQUc7Z0JBQ3JCLE9BQU8sRUFBRSxNQUFNO2dCQUNmLElBQUksRUFBRSxXQUFvQjthQUMzQixDQUFDO1lBRUYsTUFBTSxNQUFNLEdBQUcsdUJBQWEsQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDdkQsSUFBQSxnQkFBTSxFQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDcEMsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFBLFlBQUUsRUFBQyw2QkFBNkIsRUFBRSxHQUFHLEVBQUU7WUFDckMsTUFBTSxjQUFjLEdB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QUMxQixNQUFNLE1BQU0sR0FBRyxJQUFBLHVCQUFhLEVBQUMsS0FBSyxDQUFDLENBQUM7WUFDcEMsSUFBQSxnQkFBTSxFQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMxQixDQUFDLENBQUMsQ0FBQztRQUVILElBQUEsWUFBRSxFQUFDLDZCQUE2QixFQUFFLEdBQUcsRUFBRTtZQUNyQyxNQUFNLEtBQUssR0FBRyx1REFBdUQsQ0FBQztZQUN0RSxNQUFNLE1BQU0sR0FBRyxJQUFBLHVCQUFhLEVBQUMsS0FBSyxDQUFDLENBQUM7WUFDcEMsSUFBQSxnQkFBTSxFQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyx1REFBdUQsQ0FBQyxDQUFDO1FBQy9FLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBQSxZQUFFLEVBQUMsb0NBQW9DLEVBQUUsR0FBRyxFQUFFO1lBQzVDLE1BQU0sS0FBSyxHQUFHLDRGQUE0RixDQUFDO1lBQzNHLE1BQU0sTUFBTSxHQUFHLElBQUEsdUJBQWEsRUFBQyxLQUFLLENBQUMsQ0FBQztZQUNwQyxJQUFBLGdCQUFNLEVBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLG1FQUFtRSxDQUFDLENBQUM7UUFDM0YsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcc2FyYWhcXFJlcG9zXFxDQ0ggQXhjZXNzIEludGVsbGlnZW5jZSBWaWJlZFxcdGVzdHNcXHVuaXRcXHZhbGlkYXRpb24tc2NoZW1hcy50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlc2NyaWJlLCBpdCwgZXhwZWN0IH0gZnJvbSAnQGplc3QvZ2xvYmFscyc7XHJcbmltcG9ydCB7IFxyXG4gIG1lc3NhZ2VTY2hlbWEsIFxyXG4gIGZpbGVVcGxvYWRTY2hlbWEsIFxyXG4gIGFwaVJlcXVlc3RTY2hlbWEsIFxyXG4gIHNhbml0aXplSW5wdXQgXHJcbn0gZnJvbSAnLi4vLi4vc3JjL2NvcmUvdmFsaWRhdGlvbi9zY2hlbWFzJztcclxuaW1wb3J0IHsgeiB9IGZyb20gJ3pvZCc7XHJcblxyXG5kZXNjcmliZSgnVmFsaWRhdGlvbiBTY2hlbWFzJywgKCkgPT4ge1xyXG4gIGRlc2NyaWJlKCdtZXNzYWdlU2NoZW1hJywgKCkgPT4ge1xyXG4gICAgaXQoJ3Nob3VsZCB2YWxpZGF0ZSBhIHZhbGlkIG1lc3NhZ2UnLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHZhbGlkTWVzc2FnZSA9IHtcclxuICAgICAgICBjb250ZW50OiAnSGVsbG8sIHdvcmxkIScsXHJcbiAgICAgICAgcm9sZTogJ3VzZXInIGFzIGNvbnN0LFxyXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcclxuICAgICAgICBtZXRhZGF0YTogeyBzZXNzaW9uSWQ6ICcxMjMnIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IG1lc3NhZ2VTY2hlbWEuc2FmZVBhcnNlKHZhbGlkTWVzc2FnZSk7XHJcbiAgICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZSh0cnVlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgdmFsaWRhdGUgYSBtaW5pbWFsIG1lc3NhZ2UnLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IG1pbmltYWxNZXNzYWdlID0ge1xyXG4gICAgICAgIGNvbnRlbnQ6ICdUZXN0JyxcclxuICAgICAgICByb2xlOiAnYXNzaXN0YW50JyBhcyBjb25zdFxyXG4gICAgICB9O1xyXG5cclxuICAgICAgY29uc3QgcmVzdWx0ID0gbWVzc2FnZVNjaGVtYS5zYWZlUGFyc2UobWluaW1hbE1lc3NhZ2UpO1xyXG4gICAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2hvdWxkIHJlamVjdCBlbXB0eSBjb250ZW50JywgKCkgPT4ge1xyXG4gICAgICBjb25zdCBpbnZhbGlkTWVzc2FnZSA9IHtcclxuICAgICAgICBjb250ZW50OiAnJyxcclxuICAgICAgICByb2xlOiAndXNlcicgYXMgY29uc3RcclxuICAgICAgfTtcclxuXHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IG1lc3NhZ2VTY2hlbWEuc2FmZVBhcnNlKGludmFsaWRNZXNzYWdlKTtcclxuICAgICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlKGZhbHNlKTtcclxuICAgICAgaWYgKCFyZXN1bHQuc3VjY2Vzcykge1xyXG4gICAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3IuaXNzdWVzWzBdLnBhdGgpLnRvQ29udGFpbignY29udGVudCcpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2hvdWxkIHJlamVjdCBjb250ZW50IHRoYXQgaXMgdG9vIGxvbmcnLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGludmFsaWRNZXNzYWdlID0ge1xyXG4gICAgICAgIGNvbnRlbnQ6ICdhJy5yZXBlYXQoMTAwMDEpLFxyXG4gICAgICAgIHJvbGU6ICd1c2VyJyBhcyBjb25zdFxyXG4gICAgICB9O1xyXG5cclxuICAgICAgY29uc3QgcmVzdWx0ID0gbWVzc2FnZVNjaGVtYS5zYWZlUGFyc2UoaW52YWxpZE1lc3NhZ2UpO1xyXG4gICAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmUoZmFsc2UpO1xyXG4gICAgICBpZiAoIXJlc3VsdC5zdWNjZXNzKSB7XHJcbiAgICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvci5pc3N1ZXNbMF0ucGF0aCkudG9Db250YWluKCdjb250ZW50Jyk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgcmVqZWN0IGludmFsaWQgcm9sZScsICgpID0+IHtcclxuICAgICAgY29uc3QgaW52YWxpZE1lc3NhZ2UgPSB7XHJcbiAgICAgICAgY29udGVudDogJ1Rlc3QnLFxyXG4gICAgICAgIHJvbGU6ICdpbnZhbGlkJyBhcyBhbnlcclxuICAgICAgfTtcclxuXHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IG1lc3NhZ2VTY2hlbWEuc2FmZVBhcnNlKGludmFsaWRNZXNzYWdlKTtcclxuICAgICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlKGZhbHNlKTtcclxuICAgICAgaWYgKCFyZXN1bHQuc3VjY2Vzcykge1xyXG4gICAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3IuaXNzdWVzWzBdLnBhdGgpLnRvQ29udGFpbigncm9sZScpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoJ2ZpbGVVcGxvYWRTY2hlbWEnLCAoKSA9PiB7XHJcbiAgICBpdCgnc2hvdWxkIHZhbGlkYXRlIGEgdmFsaWQgZmlsZSB1cGxvYWQnLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IG1vY2tGaWxlID0gbmV3IEZpbGUoWyd0ZXN0IGNvbnRlbnQnXSwgJ3Rlc3QucGRmJywgeyB0eXBlOiAnYXBwbGljYXRpb24vcGRmJyB9KTtcclxuICAgICAgY29uc3QgdmFsaWRVcGxvYWQgPSB7XHJcbiAgICAgICAgbmFtZTogJ3Rlc3QucGRmJyxcclxuICAgICAgICBzaXplOiAxMDI0LFxyXG4gICAgICAgIHR5cGU6ICdhcHBsaWNhdGlvbi9wZGYnIGFzIGNvbnN0LFxyXG4gICAgICAgIGNvbnRlbnQ6IG1vY2tGaWxlXHJcbiAgICAgIH07XHJcblxyXG4gICAgICBjb25zdCByZXN1bHQgPSBmaWxlVXBsb2FkU2NoZW1hLnNhZmVQYXJzZSh2YWxpZFVwbG9hZCk7XHJcbiAgICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZSh0cnVlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgcmVqZWN0IGZpbGUgd2l0aCBlbXB0eSBuYW1lJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCBtb2NrRmlsZSA9IG5ldyBGaWxlKFsndGVzdCBjb250ZW50J10sICd0ZXN0LnBkZicsIHsgdHlwZTogJ2FwcGxpY2F0aW9uL3BkZicgfSk7XHJcbiAgICAgIGNvbnN0IGludmFsaWRVcGxvYWQgPSB7XHJcbiAgICAgICAgbmFtZTogJycsXHJcbiAgICAgICAgc2l6ZTogMTAyNCxcclxuICAgICAgICB0eXBlOiAnYXBwbGljYXRpb24vcGRmJyBhcyBjb25zdCxcclxuICAgICAgICBjb250ZW50OiBtb2NrRmlsZVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgY29uc3QgcmVzdWx0ID0gZmlsZVVwbG9hZFNjaGVtYS5zYWZlUGFyc2UoaW52YWxpZFVwbG9hZCk7XHJcbiAgICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZShmYWxzZSk7XHJcbiAgICAgIGlmICghcmVzdWx0LnN1Y2Nlc3MpIHtcclxuICAgICAgICBleHBlY3QocmVzdWx0LmVycm9yLmlzc3Vlc1swXS5wYXRoKS50b0NvbnRhaW4oJ25hbWUnKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3Nob3VsZCByZWplY3QgZmlsZSB3aXRoIG5hbWUgdG9vIGxvbmcnLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IG1vY2tGaWxlID0gbmV3IEZpbGUoWyd0ZXN0IGNvbnRlbnQnXSwgJ3Rlc3QucGRmJywgeyB0eXBlOiAnYXBwbGljYXRpb24vcGRmJyB9KTtcclxuICAgICAgY29uc3QgaW52YWxpZFVwbG9hZCA9IHtcclxuICAgICAgICBuYW1lOiAnYScucmVwZWF0KDI1NiksXHJcbiAgICAgICAgc2l6ZTogMTAyNCxcclxuICAgICAgICB0eXBlOiAnYXBwbGljYXRpb24vcGRmJyBhcyBjb25zdCxcclxuICAgICAgICBjb250ZW50OiBtb2NrRmlsZVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgY29uc3QgcmVzdWx0ID0gZmlsZVVwbG9hZFNjaGVtYS5zYWZlUGFyc2UoaW52YWxpZFVwbG9hZCk7XHJcbiAgICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZShmYWxzZSk7XHJcbiAgICAgIGlmICghcmVzdWx0LnN1Y2Nlc3MpIHtcclxuICAgICAgICBleHBlY3QocmVzdWx0LmVycm9yLmlzc3Vlc1swXS5wYXRoKS50b0NvbnRhaW4oJ25hbWUnKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3Nob3VsZCByZWplY3QgZmlsZSB0aGF0IGlzIHRvbyBsYXJnZScsICgpID0+IHtcclxuICAgICAgY29uc3QgbW9ja0ZpbGUgPSBuZXcgRmlsZShbJ3Rlc3QgY29udGVudCddLCAndGVzdC5wZGYnLCB7IHR5cGU6ICdhcHBsaWNhdGlvbi9wZGYnIH0pO1xyXG4gICAgICBjb25zdCBpbnZhbGlkVXBsb2FkID0ge1xyXG4gICAgICAgIG5hbWU6ICd0ZXN0LnBkZicsXHJcbiAgICAgICAgc2l6ZTogMjEgKiAxMDI0ICogMTAyNCwgLy8gMjFNQlxyXG4gICAgICAgIHR5cGU6ICdhcHBsaWNhdGlvbi9wZGYnIGFzIGNvbnN0LFxyXG4gICAgICAgIGNvbnRlbnQ6IG1vY2tGaWxlXHJcbiAgICAgIH07XHJcblxyXG4gICAgICBjb25zdCByZXN1bHQgPSBmaWxlVXBsb2FkU2NoZW1hLnNhZmVQYXJzZShpbnZhbGlkVXBsb2FkKTtcclxuICAgICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlKGZhbHNlKTtcclxuICAgICAgaWYgKCFyZXN1bHQuc3VjY2Vzcykge1xyXG4gICAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3IuaXNzdWVzWzBdLnBhdGgpLnRvQ29udGFpbignc2l6ZScpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2hvdWxkIHJlamVjdCB1bnN1cHBvcnRlZCBmaWxlIHR5cGUnLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IG1vY2tGaWxlID0gbmV3IEZpbGUoWyd0ZXN0IGNvbnRlbnQnXSwgJ3Rlc3QuZXhlJywgeyB0eXBlOiAnYXBwbGljYXRpb24veC1leGVjdXRhYmxlJyB9KTtcclxuICAgICAgY29uc3QgaW52YWxpZFVwbG9hZCA9IHtcclxuICAgICAgICBuYW1lOiAndGVzdC5leGUnLFxyXG4gICAgICAgIHNpemU6IDEwMjQsXHJcbiAgICAgICAgdHlwZTogJ2FwcGxpY2F0aW9uL3gtZXhlY3V0YWJsZScgYXMgYW55LFxyXG4gICAgICAgIGNvbnRlbnQ6IG1vY2tGaWxlXHJcbiAgICAgIH07XHJcblxyXG4gICAgICBjb25zdCByZXN1bHQgPSBmaWxlVXBsb2FkU2NoZW1hLnNhZmVQYXJzZShpbnZhbGlkVXBsb2FkKTtcclxuICAgICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlKGZhbHNlKTtcclxuICAgICAgaWYgKCFyZXN1bHQuc3VjY2Vzcykge1xyXG4gICAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3IuaXNzdWVzWzBdLnBhdGgpLnRvQ29udGFpbigndHlwZScpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2hvdWxkIGFjY2VwdCBhbGwgc3VwcG9ydGVkIGZpbGUgdHlwZXMnLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHN1cHBvcnRlZFR5cGVzID0gW1xyXG4gICAgICAgICdhcHBsaWNhdGlvbi9wZGYnLFxyXG4gICAgICAgICdhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5kb2N1bWVudCcsXHJcbiAgICAgICAgJ2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnNoZWV0JyxcclxuICAgICAgICAndGV4dC9wbGFpbicsXHJcbiAgICAgICAgJ2ltYWdlL3BuZycsXHJcbiAgICAgICAgJ2ltYWdlL2pwZWcnXHJcbiAgICAgIF07XHJcblxyXG4gICAgICBzdXBwb3J0ZWRUeXBlcy5mb3JFYWNoKHR5cGUgPT4ge1xyXG4gICAgICAgIGNvbnN0IG1vY2tGaWxlID0gbmV3IEZpbGUoWyd0ZXN0IGNvbnRlbnQnXSwgJ3Rlc3QuZmlsZScsIHsgdHlwZSB9KTtcclxuICAgICAgICBjb25zdCB2YWxpZFVwbG9hZCA9IHtcclxuICAgICAgICAgIG5hbWU6ICd0ZXN0LmZpbGUnLFxyXG4gICAgICAgICAgc2l6ZTogMTAyNCxcclxuICAgICAgICAgIHR5cGU6IHR5cGUgYXMgYW55LFxyXG4gICAgICAgICAgY29udGVudDogbW9ja0ZpbGVcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBjb25zdCByZXN1bHQgPSBmaWxlVXBsb2FkU2NoZW1hLnNhZmVQYXJzZSh2YWxpZFVwbG9hZCk7XHJcbiAgICAgICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlKHRydWUpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgnYXBpUmVxdWVzdFNjaGVtYScsICgpID0+IHtcclxuICAgIGl0KCdzaG91bGQgdmFsaWRhdGUgYSB2YWxpZCBBUEkgcmVxdWVzdCcsICgpID0+IHtcclxuICAgICAgY29uc3QgdmFsaWRSZXF1ZXN0ID0ge1xyXG4gICAgICAgIG1lc3NhZ2VzOiBbXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbnRlbnQ6ICdIZWxsbycsXHJcbiAgICAgICAgICAgIHJvbGU6ICd1c2VyJyBhcyBjb25zdFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgY29udGVudDogJ0hpIHRoZXJlIScsXHJcbiAgICAgICAgICAgIHJvbGU6ICdhc3Npc3RhbnQnIGFzIGNvbnN0XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgXSxcclxuICAgICAgICBtb2RlbDogJ2dwdC00JyxcclxuICAgICAgICB0ZW1wZXJhdHVyZTogMC43LFxyXG4gICAgICAgIG1heFRva2VuczogMTAwMFxyXG4gICAgICB9O1xyXG5cclxuICAgICAgY29uc3QgcmVzdWx0ID0gYXBpUmVxdWVzdFNjaGVtYS5zYWZlUGFyc2UodmFsaWRSZXF1ZXN0KTtcclxuICAgICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlKHRydWUpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3Nob3VsZCB2YWxpZGF0ZSBtaW5pbWFsIEFQSSByZXF1ZXN0JywgKCkgPT4ge1xyXG4gICAgICBjb25zdCBtaW5pbWFsUmVxdWVzdCA9IHtcclxuICAgICAgICBtZXNzYWdlczogW1xyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBjb250ZW50OiAnSGVsbG8nLFxyXG4gICAgICAgICAgICByb2xlOiAndXNlcicgYXMgY29uc3RcclxuICAgICAgICAgIH1cclxuICAgICAgICBdXHJcbiAgICAgIH07XHJcblxyXG4gICAgICBjb25zdCByZXN1bHQgPSBhcGlSZXF1ZXN0U2NoZW1hLnNhZmVQYXJzZShtaW5pbWFsUmVxdWVzdCk7XHJcbiAgICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZSh0cnVlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgcmVqZWN0IGVtcHR5IG1lc3NhZ2VzIGFycmF5JywgKCkgPT4ge1xyXG4gICAgICBjb25zdCBpbnZhbGlkUmVxdWVzdCA9IHtcclxuICAgICAgICBtZXNzYWdlczogW11cclxuICAgICAgfTtcclxuXHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGFwaVJlcXVlc3RTY2hlbWEuc2FmZVBhcnNlKGludmFsaWRSZXF1ZXN0KTtcclxuICAgICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlKGZhbHNlKTtcclxuICAgICAgaWYgKCFyZXN1bHQuc3VjY2Vzcykge1xyXG4gICAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3IuaXNzdWVzWzBdLnBhdGgpLnRvQ29udGFpbignbWVzc2FnZXMnKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3Nob3VsZCByZWplY3QgaW52YWxpZCB0ZW1wZXJhdHVyZScsICgpID0+IHtcclxuICAgICAgY29uc3QgaW52YWxpZFJlcXVlc3QgPSB7XHJcbiAgICAgICAgbWVzc2FnZXM6IFtcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgY29udGVudDogJ0hlbGxvJyxcclxuICAgICAgICAgICAgcm9sZTogJ3VzZXInIGFzIGNvbnN0XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgXSxcclxuICAgICAgICB0ZW1wZXJhdHVyZTogMy4wIC8vIFRvbyBoaWdoXHJcbiAgICAgIH07XHJcblxyXG4gICAgICBjb25zdCByZXN1bHQgPSBhcGlSZXF1ZXN0U2NoZW1hLnNhZmVQYXJzZShpbnZhbGlkUmVxdWVzdCk7XHJcbiAgICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZShmYWxzZSk7XHJcbiAgICAgIGlmICghcmVzdWx0LnN1Y2Nlc3MpIHtcclxuICAgICAgICBleHBlY3QocmVzdWx0LmVycm9yLmlzc3Vlc1swXS5wYXRoKS50b0NvbnRhaW4oJ3RlbXBlcmF0dXJlJyk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgcmVqZWN0IG5lZ2F0aXZlIHRlbXBlcmF0dXJlJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCBpbnZhbGlkUmVxdWVzdCA9IHtcclxuICAgICAgICBtZXNzYWdlczogW1xyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBjb250ZW50OiAnSGVsbG8nLFxyXG4gICAgICAgICAgICByb2xlOiAndXNlcicgYXMgY29uc3RcclxuICAgICAgICAgIH1cclxuICAgICAgICBdLFxyXG4gICAgICAgIHRlbXBlcmF0dXJlOiAtMC4xXHJcbiAgICAgIH07XHJcblxyXG4gICAgICBjb25zdCByZXN1bHQgPSBhcGlSZXF1ZXN0U2NoZW1hLnNhZmVQYXJzZShpbnZhbGlkUmVxdWVzdCk7XHJcbiAgICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZShmYWxzZSk7XHJcbiAgICAgIGlmICghcmVzdWx0LnN1Y2Nlc3MpIHtcclxuICAgICAgICBleHBlY3QocmVzdWx0LmVycm9yLmlzc3Vlc1swXS5wYXRoKS50b0NvbnRhaW4oJ3RlbXBlcmF0dXJlJyk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgcmVqZWN0IGludmFsaWQgbWF4VG9rZW5zJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCBpbnZhbGlkUmVxdWVzdCA9IHtcclxuICAgICAgICBtZXNzYWdlczogW1xyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBjb250ZW50OiAnSGVsbG8nLFxyXG4gICAgICAgICAgICByb2xlOiAndXNlcicgYXMgY29uc3RcclxuICAgICAgICAgIH1cclxuICAgICAgICBdLFxyXG4gICAgICAgIG1heFRva2VuczogMCAvLyBUb28gbG93XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBjb25zdCByZXN1bHQgPSBhcGlSZXF1ZXN0U2NoZW1hLnNhZmVQYXJzZShpbnZhbGlkUmVxdWVzdCk7XHJcbiAgICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZShmYWxzZSk7XHJcbiAgICAgIGlmICghcmVzdWx0LnN1Y2Nlc3MpIHtcclxuICAgICAgICBleHBlY3QocmVzdWx0LmVycm9yLmlzc3Vlc1swXS5wYXRoKS50b0NvbnRhaW4oJ21heFRva2VucycpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2hvdWxkIHJlamVjdCBtYXhUb2tlbnMgdGhhdCBpcyB0b28gaGlnaCcsICgpID0+IHtcclxuICAgICAgY29uc3QgaW52YWxpZFJlcXVlc3QgPSB7XHJcbiAgICAgICAgbWVzc2FnZXM6IFtcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgY29udGVudDogJ0hlbGxvJyxcclxuICAgICAgICAgICAgcm9sZTogJ3VzZXInIGFzIGNvbnN0XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgXSxcclxuICAgICAgICBtYXhUb2tlbnM6IDEwMDAwMSAvLyBUb28gaGlnaFxyXG4gICAgICB9O1xyXG5cclxuICAgICAgY29uc3QgcmVzdWx0ID0gYXBpUmVxdWVzdFNjaGVtYS5zYWZlUGFyc2UoaW52YWxpZFJlcXVlc3QpO1xyXG4gICAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmUoZmFsc2UpO1xyXG4gICAgICBpZiAoIXJlc3VsdC5zdWNjZXNzKSB7XHJcbiAgICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvci5pc3N1ZXNbMF0ucGF0aCkudG9Db250YWluKCdtYXhUb2tlbnMnKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKCdzYW5pdGl6ZUlucHV0JywgKCkgPT4ge1xyXG4gICAgaXQoJ3Nob3VsZCByZW1vdmUgSFRNTCB0YWdzJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCBpbnB1dCA9ICc8c2NyaXB0PmFsZXJ0KFwieHNzXCIpPC9zY3JpcHQ+SGVsbG8gd29ybGQnO1xyXG4gICAgICBjb25zdCByZXN1bHQgPSBzYW5pdGl6ZUlucHV0KGlucHV0KTtcclxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZSgnc2NyaXB0YWxlcnQoXCJ4c3NcIikvc2NyaXB0SGVsbG8gd29ybGQnKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgcmVtb3ZlIGphdmFzY3JpcHQgcHJvdG9jb2wnLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGlucHV0ID0gJ2phdmFzY3JpcHQ6YWxlcnQoXCJ4c3NcIiknO1xyXG4gICAgICBjb25zdCByZXN1bHQgPSBzYW5pdGl6ZUlucHV0KGlucHV0KTtcclxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZSgnYWxlcnQoXCJ4c3NcIiknKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgcmVtb3ZlIGV2ZW50IGhhbmRsZXJzJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCBpbnB1dCA9ICdvbmNsaWNrPWFsZXJ0KFwieHNzXCIpIG9ubG9hZD1hbGVydChcInhzc1wiKSc7XHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHNhbml0aXplSW5wdXQoaW5wdXQpO1xyXG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlKCdhbGVydChcInhzc1wiKSBhbGVydChcInhzc1wiKScpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3Nob3VsZCB0cmltIHdoaXRlc3BhY2UnLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGlucHV0ID0gJyAgSGVsbG8gd29ybGQgICc7XHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHNhbml0aXplSW5wdXQoaW5wdXQpO1xyXG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlKCdIZWxsbyB3b3JsZCcpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZW1wdHkgc3RyaW5nJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCBpbnB1dCA9ICcnO1xyXG4gICAgICBjb25zdCByZXN1bHQgPSBzYW5pdGl6ZUlucHV0KGlucHV0KTtcclxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZSgnJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBzdHJpbmcgd2l0aCBvbmx5IHdoaXRlc3BhY2UnLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGlucHV0ID0gJyAgIFxcblxcdCAgJztcclxuICAgICAgY29uc3QgcmVzdWx0ID0gc2FuaXRpemVJbnB1dChpbnB1dCk7XHJcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmUoJycpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3Nob3VsZCBwcmVzZXJ2ZSBub3JtYWwgdGV4dCcsICgpID0+IHtcclxuICAgICAgY29uc3QgaW5wdXQgPSAnVGhpcyBpcyBub3JtYWwgdGV4dCB3aXRoIG51bWJlcnMgMTIzIGFuZCBzeW1ib2xzIEAjJCUnO1xyXG4gICAgICBjb25zdCByZXN1bHQgPSBzYW5pdGl6ZUlucHV0KGlucHV0KTtcclxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZSgnVGhpcyBpcyBub3JtYWwgdGV4dCB3aXRoIG51bWJlcnMgMTIzIGFuZCBzeW1ib2xzIEAjJCUnKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGNvbXBsZXggWFNTIGF0dGVtcHRzJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCBpbnB1dCA9ICc8aW1nIHNyYz1cInhcIiBvbmVycm9yPVwiYWxlcnQoXFwneHNzXFwnKVwiPmphdmFzY3JpcHQ6YWxlcnQoXCJ4c3NcIik8c2NyaXB0PmFsZXJ0KFwieHNzXCIpPC9zY3JpcHQ+JztcclxuICAgICAgY29uc3QgcmVzdWx0ID0gc2FuaXRpemVJbnB1dChpbnB1dCk7XHJcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmUoJ2ltZyBzcmM9XCJ4XCIgXCJhbGVydChcXCd4c3NcXCcpXCJhbGVydChcInhzc1wiKXNjcmlwdGFsZXJ0KFwieHNzXCIpL3NjcmlwdCcpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXSwidmVyc2lvbiI6M30=