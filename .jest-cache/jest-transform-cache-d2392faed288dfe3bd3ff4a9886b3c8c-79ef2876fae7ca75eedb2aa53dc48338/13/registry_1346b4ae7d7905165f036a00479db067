452dc3055f6eff0ba3ee470af74b563e
"use strict";

/* istanbul ignore next */
function cov_2maamjotvn() {
  var path = "C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\src\\prompts\\registry.ts";
  var hash = "6f4906f64521204766c169cac2c7b98f40eef746";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\src\\prompts\\registry.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 32
        }
      },
      "2": {
        start: {
          line: 4,
          column: 16
        },
        end: {
          line: 4,
          column: 34
        }
      },
      "3": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 33
        }
      },
      "4": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 39
        }
      },
      "5": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 36
        }
      },
      "6": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 170
        }
      },
      "7": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 45,
          column: 9
        }
      },
      "8": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 48
        }
      },
      "9": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 26,
          column: 13
        }
      },
      "10": {
        start: {
          line: 25,
          column: 16
        },
        end: {
          line: 25,
          column: 121
        }
      },
      "11": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 28,
          column: 67
        }
      },
      "12": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 37,
          column: 15
        }
      },
      "13": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 40,
          column: 13
        }
      },
      "14": {
        start: {
          line: 39,
          column: 16
        },
        end: {
          line: 39,
          column: 94
        }
      },
      "15": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 80
        }
      },
      "16": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 44,
          column: 24
        }
      },
      "17": {
        start: {
          line: 51,
          column: 23
        },
        end: {
          line: 51,
          column: 25
        }
      },
      "18": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 62,
          column: 9
        }
      },
      "19": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 61,
          column: 13
        }
      },
      "20": {
        start: {
          line: 54,
          column: 16
        },
        end: {
          line: 54,
          column: 38
        }
      },
      "21": {
        start: {
          line: 57,
          column: 16
        },
        end: {
          line: 60,
          column: 19
        }
      },
      "22": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 65,
          column: 9
        }
      },
      "23": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 84
        }
      },
      "24": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 68,
          column: 9
        }
      },
      "25": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 110
        }
      },
      "26": {
        start: {
          line: 75,
          column: 23
        },
        end: {
          line: 75,
          column: 43
        }
      },
      "27": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 78,
          column: 9
        }
      },
      "28": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 54
        }
      },
      "29": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 82,
          column: 9
        }
      },
      "30": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 106
        }
      },
      "31": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 83,
          column: 41
        }
      },
      "32": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 89,
          column: 36
        }
      },
      "33": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 95,
          column: 47
        }
      },
      "34": {
        start: {
          line: 101,
          column: 24
        },
        end: {
          line: 101,
          column: 26
        }
      },
      "35": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 106,
          column: 9
        }
      },
      "36": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 105,
          column: 13
        }
      },
      "37": {
        start: {
          line: 104,
          column: 16
        },
        end: {
          line: 104,
          column: 56
        }
      },
      "38": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 107,
          column: 23
        }
      },
      "39": {
        start: {
          line: 113,
          column: 26
        },
        end: {
          line: 113,
          column: 36
        }
      },
      "40": {
        start: {
          line: 114,
          column: 21
        },
        end: {
          line: 114,
          column: 124
        }
      },
      "41": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 162,
          column: 9
        }
      },
      "42": {
        start: {
          line: 117,
          column: 27
        },
        end: {
          line: 117,
          column: 54
        }
      },
      "43": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 126,
          column: 13
        }
      },
      "44": {
        start: {
          line: 120,
          column: 33
        },
        end: {
          line: 120,
          column: 79
        }
      },
      "45": {
        start: {
          line: 121,
          column: 31
        },
        end: {
          line: 121,
          column: 63
        }
      },
      "46": {
        start: {
          line: 122,
          column: 16
        },
        end: {
          line: 125,
          column: 17
        }
      },
      "47": {
        start: {
          line: 123,
          column: 20
        },
        end: {
          line: 123,
          column: 77
        }
      },
      "48": {
        start: {
          line: 124,
          column: 20
        },
        end: {
          line: 124,
          column: 53
        }
      },
      "49": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 130,
          column: 13
        }
      },
      "50": {
        start: {
          line: 129,
          column: 16
        },
        end: {
          line: 129,
          column: 58
        }
      },
      "51": {
        start: {
          line: 132,
          column: 33
        },
        end: {
          line: 132,
          column: 91
        }
      },
      "52": {
        start: {
          line: 133,
          column: 29
        },
        end: {
          line: 143,
          column: 13
        }
      },
      "53": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 148,
          column: 13
        }
      },
      "54": {
        start: {
          line: 146,
          column: 33
        },
        end: {
          line: 146,
          column: 79
        }
      },
      "55": {
        start: {
          line: 147,
          column: 16
        },
        end: {
          line: 147,
          column: 59
        }
      },
      "56": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 150,
          column: 69
        }
      },
      "57": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 153,
          column: 13
        }
      },
      "58": {
        start: {
          line: 152,
          column: 16
        },
        end: {
          line: 152,
          column: 89
        }
      },
      "59": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 154,
          column: 28
        }
      },
      "60": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 157,
          column: 68
        }
      },
      "61": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 160,
          column: 13
        }
      },
      "62": {
        start: {
          line: 159,
          column: 16
        },
        end: {
          line: 159,
          column: 28
        }
      },
      "63": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 161,
          column: 155
        }
      },
      "64": {
        start: {
          line: 168,
          column: 22
        },
        end: {
          line: 168,
          column: 45
        }
      },
      "65": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 169,
          column: 55
        }
      },
      "66": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 175,
          column: 40
        }
      },
      "67": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 181,
          column: 35
        }
      },
      "68": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 184,
          column: 9
        }
      },
      "69": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 183,
          column: 65
        }
      },
      "70": {
        start: {
          line: 190,
          column: 24
        },
        end: {
          line: 190,
          column: 47
        }
      },
      "71": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 197,
          column: 9
        }
      },
      "72": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 192,
          column: 39
        }
      },
      "73": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 41
        }
      },
      "74": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 196,
          column: 13
        }
      },
      "75": {
        start: {
          line: 195,
          column: 16
        },
        end: {
          line: 195,
          column: 73
        }
      },
      "76": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 198,
          column: 23
        }
      },
      "77": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 204,
          column: 76
        }
      },
      "78": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 207,
          column: 9
        }
      },
      "79": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 206,
          column: 30
        }
      },
      "80": {
        start: {
          line: 213,
          column: 27
        },
        end: {
          line: 213,
          column: 29
        }
      },
      "81": {
        start: {
          line: 214,
          column: 32
        },
        end: {
          line: 214,
          column: 33
        }
      },
      "82": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 217,
          column: 9
        }
      },
      "83": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 216,
          column: 81
        }
      },
      "84": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 220,
          column: 9
        }
      },
      "85": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 219,
          column: 50
        }
      },
      "86": {
        start: {
          line: 221,
          column: 25
        },
        end: {
          line: 224,
          column: 83
        }
      },
      "87": {
        start: {
          line: 222,
          column: 28
        },
        end: {
          line: 222,
          column: 55
        }
      },
      "88": {
        start: {
          line: 224,
          column: 27
        },
        end: {
          line: 224,
          column: 81
        }
      },
      "89": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 231,
          column: 10
        }
      },
      "90": {
        start: {
          line: 235,
          column: 8
        },
        end: {
          line: 237,
          column: 9
        }
      },
      "91": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 236,
          column: 98
        }
      },
      "92": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 240,
          column: 9
        }
      },
      "93": {
        start: {
          line: 239,
          column: 12
        },
        end: {
          line: 239,
          column: 111
        }
      },
      "94": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 243,
          column: 9
        }
      },
      "95": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 242,
          column: 115
        }
      },
      "96": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 246,
          column: 9
        }
      },
      "97": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 100
        }
      },
      "98": {
        start: {
          line: 248,
          column: 29
        },
        end: {
          line: 248,
          column: 79
        }
      },
      "99": {
        start: {
          line: 249,
          column: 31
        },
        end: {
          line: 249,
          column: 86
        }
      },
      "100": {
        start: {
          line: 249,
          column: 56
        },
        end: {
          line: 249,
          column: 85
        }
      },
      "101": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 252,
          column: 9
        }
      },
      "102": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 251,
          column: 201
        }
      },
      "103": {
        start: {
          line: 257,
          column: 29
        },
        end: {
          line: 257,
          column: 124
        }
      },
      "104": {
        start: {
          line: 258,
          column: 28
        },
        end: {
          line: 258,
          column: 71
        }
      },
      "105": {
        start: {
          line: 258,
          column: 53
        },
        end: {
          line: 258,
          column: 70
        }
      },
      "106": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 261,
          column: 9
        }
      },
      "107": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 260,
          column: 175
        }
      },
      "108": {
        start: {
          line: 263,
          column: 8
        },
        end: {
          line: 273,
          column: 9
        }
      },
      "109": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 272,
          column: 13
        }
      },
      "110": {
        start: {
          line: 265,
          column: 16
        },
        end: {
          line: 271,
          column: 17
        }
      },
      "111": {
        start: {
          line: 266,
          column: 35
        },
        end: {
          line: 266,
          column: 64
        }
      },
      "112": {
        start: {
          line: 267,
          column: 20
        },
        end: {
          line: 270,
          column: 21
        }
      },
      "113": {
        start: {
          line: 268,
          column: 40
        },
        end: {
          line: 268,
          column: 123
        }
      },
      "114": {
        start: {
          line: 269,
          column: 24
        },
        end: {
          line: 269,
          column: 134
        }
      },
      "115": {
        start: {
          line: 276,
          column: 21
        },
        end: {
          line: 276,
          column: 29
        }
      },
      "116": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 295,
          column: 11
        }
      },
      "117": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 293,
          column: 13
        }
      },
      "118": {
        start: {
          line: 280,
          column: 28
        },
        end: {
          line: 280,
          column: 42
        }
      },
      "119": {
        start: {
          line: 282,
          column: 16
        },
        end: {
          line: 287,
          column: 17
        }
      },
      "120": {
        start: {
          line: 283,
          column: 20
        },
        end: {
          line: 283,
          column: 50
        }
      },
      "121": {
        start: {
          line: 286,
          column: 20
        },
        end: {
          line: 286,
          column: 42
        }
      },
      "122": {
        start: {
          line: 289,
          column: 16
        },
        end: {
          line: 291,
          column: 17
        }
      },
      "123": {
        start: {
          line: 290,
          column: 20
        },
        end: {
          line: 290,
          column: 51
        }
      },
      "124": {
        start: {
          line: 292,
          column: 16
        },
        end: {
          line: 292,
          column: 29
        }
      },
      "125": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 294,
          column: 25
        }
      },
      "126": {
        start: {
          line: 296,
          column: 8
        },
        end: {
          line: 296,
          column: 22
        }
      },
      "127": {
        start: {
          line: 299,
          column: 24
        },
        end: {
          line: 299,
          column: 56
        }
      },
      "128": {
        start: {
          line: 300,
          column: 8
        },
        end: {
          line: 301,
          column: 22
        }
      },
      "129": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 301,
          column: 22
        }
      },
      "130": {
        start: {
          line: 302,
          column: 8
        },
        end: {
          line: 302,
          column: 70
        }
      },
      "131": {
        start: {
          line: 302,
          column: 48
        },
        end: {
          line: 302,
          column: 66
        }
      },
      "132": {
        start: {
          line: 306,
          column: 8
        },
        end: {
          line: 308,
          column: 9
        }
      },
      "133": {
        start: {
          line: 307,
          column: 12
        },
        end: {
          line: 307,
          column: 25
        }
      },
      "134": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 311,
          column: 9
        }
      },
      "135": {
        start: {
          line: 309,
          column: 56
        },
        end: {
          line: 309,
          column: 90
        }
      },
      "136": {
        start: {
          line: 310,
          column: 12
        },
        end: {
          line: 310,
          column: 25
        }
      },
      "137": {
        start: {
          line: 312,
          column: 8
        },
        end: {
          line: 318,
          column: 9
        }
      },
      "138": {
        start: {
          line: 313,
          column: 26
        },
        end: {
          line: 313,
          column: 54
        }
      },
      "139": {
        start: {
          line: 314,
          column: 31
        },
        end: {
          line: 314,
          column: 92
        }
      },
      "140": {
        start: {
          line: 315,
          column: 12
        },
        end: {
          line: 317,
          column: 13
        }
      },
      "141": {
        start: {
          line: 316,
          column: 16
        },
        end: {
          line: 316,
          column: 29
        }
      },
      "142": {
        start: {
          line: 319,
          column: 8
        },
        end: {
          line: 321,
          column: 9
        }
      },
      "143": {
        start: {
          line: 320,
          column: 12
        },
        end: {
          line: 320,
          column: 25
        }
      },
      "144": {
        start: {
          line: 322,
          column: 8
        },
        end: {
          line: 324,
          column: 9
        }
      },
      "145": {
        start: {
          line: 323,
          column: 12
        },
        end: {
          line: 323,
          column: 25
        }
      },
      "146": {
        start: {
          line: 325,
          column: 8
        },
        end: {
          line: 327,
          column: 9
        }
      },
      "147": {
        start: {
          line: 326,
          column: 12
        },
        end: {
          line: 326,
          column: 25
        }
      },
      "148": {
        start: {
          line: 328,
          column: 8
        },
        end: {
          line: 328,
          column: 20
        }
      },
      "149": {
        start: {
          line: 331,
          column: 24
        },
        end: {
          line: 331,
          column: 80
        }
      },
      "150": {
        start: {
          line: 332,
          column: 8
        },
        end: {
          line: 332,
          column: 59
        }
      },
      "151": {
        start: {
          line: 335,
          column: 20
        },
        end: {
          line: 335,
          column: 69
        }
      },
      "152": {
        start: {
          line: 336,
          column: 8
        },
        end: {
          line: 336,
          column: 42
        }
      },
      "153": {
        start: {
          line: 339,
          column: 8
        },
        end: {
          line: 343,
          column: 9
        }
      },
      "154": {
        start: {
          line: 340,
          column: 12
        },
        end: {
          line: 342,
          column: 13
        }
      },
      "155": {
        start: {
          line: 341,
          column: 16
        },
        end: {
          line: 341,
          column: 47
        }
      },
      "156": {
        start: {
          line: 346,
          column: 22
        },
        end: {
          line: 346,
          column: 45
        }
      },
      "157": {
        start: {
          line: 347,
          column: 8
        },
        end: {
          line: 348,
          column: 19
        }
      },
      "158": {
        start: {
          line: 348,
          column: 12
        },
        end: {
          line: 348,
          column: 19
        }
      },
      "159": {
        start: {
          line: 349,
          column: 8
        },
        end: {
          line: 349,
          column: 27
        }
      },
      "160": {
        start: {
          line: 350,
          column: 8
        },
        end: {
          line: 350,
          column: 36
        }
      },
      "161": {
        start: {
          line: 351,
          column: 8
        },
        end: {
          line: 351,
          column: 84
        }
      },
      "162": {
        start: {
          line: 352,
          column: 8
        },
        end: {
          line: 354,
          column: 9
        }
      },
      "163": {
        start: {
          line: 353,
          column: 12
        },
        end: {
          line: 353,
          column: 31
        }
      },
      "164": {
        start: {
          line: 355,
          column: 8
        },
        end: {
          line: 355,
          column: 39
        }
      },
      "165": {
        start: {
          line: 359,
          column: 8
        },
        end: {
          line: 359,
          column: 42
        }
      },
      "166": {
        start: {
          line: 362,
          column: 20
        },
        end: {
          line: 362,
          column: 49
        }
      },
      "167": {
        start: {
          line: 363,
          column: 8
        },
        end: {
          line: 363,
          column: 31
        }
      },
      "168": {
        start: {
          line: 364,
          column: 8
        },
        end: {
          line: 364,
          column: 29
        }
      },
      "169": {
        start: {
          line: 367,
          column: 0
        },
        end: {
          line: 367,
          column: 40
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 5
          }
        },
        loc: {
          start: {
            line: 10,
            column: 24
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 21
          },
          end: {
            line: 46,
            column: 5
          }
        },
        line: 19
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 50,
            column: 4
          },
          end: {
            line: 50,
            column: 5
          }
        },
        loc: {
          start: {
            line: 50,
            column: 27
          },
          end: {
            line: 69,
            column: 5
          }
        },
        line: 50
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 73,
            column: 4
          },
          end: {
            line: 73,
            column: 5
          }
        },
        loc: {
          start: {
            line: 73,
            column: 22
          },
          end: {
            line: 84,
            column: 5
          }
        },
        line: 73
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 88,
            column: 4
          },
          end: {
            line: 88,
            column: 5
          }
        },
        loc: {
          start: {
            line: 88,
            column: 12
          },
          end: {
            line: 90,
            column: 5
          }
        },
        line: 88
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 94,
            column: 4
          },
          end: {
            line: 94,
            column: 5
          }
        },
        loc: {
          start: {
            line: 94,
            column: 13
          },
          end: {
            line: 96,
            column: 5
          }
        },
        line: 94
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 100,
            column: 4
          },
          end: {
            line: 100,
            column: 5
          }
        },
        loc: {
          start: {
            line: 100,
            column: 21
          },
          end: {
            line: 108,
            column: 5
          }
        },
        line: 100
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 112,
            column: 4
          },
          end: {
            line: 112,
            column: 5
          }
        },
        loc: {
          start: {
            line: 112,
            column: 36
          },
          end: {
            line: 163,
            column: 5
          }
        },
        line: 112
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 167,
            column: 4
          },
          end: {
            line: 167,
            column: 5
          }
        },
        loc: {
          start: {
            line: 167,
            column: 22
          },
          end: {
            line: 170,
            column: 5
          }
        },
        line: 167
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 174,
            column: 4
          },
          end: {
            line: 174,
            column: 5
          }
        },
        loc: {
          start: {
            line: 174,
            column: 23
          },
          end: {
            line: 176,
            column: 5
          }
        },
        line: 174
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 180,
            column: 4
          },
          end: {
            line: 180,
            column: 5
          }
        },
        loc: {
          start: {
            line: 180,
            column: 17
          },
          end: {
            line: 185,
            column: 5
          }
        },
        line: 180
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 189,
            column: 4
          },
          end: {
            line: 189,
            column: 5
          }
        },
        loc: {
          start: {
            line: 189,
            column: 19
          },
          end: {
            line: 199,
            column: 5
          }
        },
        line: 189
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 203,
            column: 4
          },
          end: {
            line: 203,
            column: 5
          }
        },
        loc: {
          start: {
            line: 203,
            column: 25
          },
          end: {
            line: 208,
            column: 5
          }
        },
        line: 203
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 212,
            column: 4
          },
          end: {
            line: 212,
            column: 5
          }
        },
        loc: {
          start: {
            line: 212,
            column: 23
          },
          end: {
            line: 232,
            column: 5
          }
        },
        line: 212
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 222,
            column: 18
          },
          end: {
            line: 222,
            column: 19
          }
        },
        loc: {
          start: {
            line: 222,
            column: 28
          },
          end: {
            line: 222,
            column: 55
          }
        },
        line: 222
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 224,
            column: 17
          },
          end: {
            line: 224,
            column: 18
          }
        },
        loc: {
          start: {
            line: 224,
            column: 27
          },
          end: {
            line: 224,
            column: 81
          }
        },
        line: 224
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 234,
            column: 4
          },
          end: {
            line: 234,
            column: 5
          }
        },
        loc: {
          start: {
            line: 234,
            column: 35
          },
          end: {
            line: 253,
            column: 5
          }
        },
        line: 234
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 249,
            column: 51
          },
          end: {
            line: 249,
            column: 52
          }
        },
        loc: {
          start: {
            line: 249,
            column: 56
          },
          end: {
            line: 249,
            column: 85
          }
        },
        line: 249
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 254,
            column: 4
          },
          end: {
            line: 254,
            column: 5
          }
        },
        loc: {
          start: {
            line: 254,
            column: 41
          },
          end: {
            line: 274,
            column: 5
          }
        },
        line: 254
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 258,
            column: 48
          },
          end: {
            line: 258,
            column: 49
          }
        },
        loc: {
          start: {
            line: 258,
            column: 53
          },
          end: {
            line: 258,
            column: 70
          }
        },
        line: 258
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 275,
            column: 4
          },
          end: {
            line: 275,
            column: 5
          }
        },
        loc: {
          start: {
            line: 275,
            column: 54
          },
          end: {
            line: 297,
            column: 5
          }
        },
        line: 275
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 278,
            column: 50
          },
          end: {
            line: 278,
            column: 51
          }
        },
        loc: {
          start: {
            line: 278,
            column: 66
          },
          end: {
            line: 295,
            column: 9
          }
        },
        line: 278
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 298,
            column: 4
          },
          end: {
            line: 298,
            column: 5
          }
        },
        loc: {
          start: {
            line: 298,
            column: 43
          },
          end: {
            line: 303,
            column: 5
          }
        },
        line: 298
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 302,
            column: 39
          },
          end: {
            line: 302,
            column: 40
          }
        },
        loc: {
          start: {
            line: 302,
            column: 48
          },
          end: {
            line: 302,
            column: 66
          }
        },
        line: 302
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 304,
            column: 4
          },
          end: {
            line: 304,
            column: 5
          }
        },
        loc: {
          start: {
            line: 304,
            column: 38
          },
          end: {
            line: 329,
            column: 5
          }
        },
        line: 304
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 309,
            column: 49
          },
          end: {
            line: 309,
            column: 50
          }
        },
        loc: {
          start: {
            line: 309,
            column: 56
          },
          end: {
            line: 309,
            column: 90
          }
        },
        line: 309
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 330,
            column: 4
          },
          end: {
            line: 330,
            column: 5
          }
        },
        loc: {
          start: {
            line: 330,
            column: 41
          },
          end: {
            line: 333,
            column: 5
          }
        },
        line: 330
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 334,
            column: 4
          },
          end: {
            line: 334,
            column: 5
          }
        },
        loc: {
          start: {
            line: 334,
            column: 25
          },
          end: {
            line: 337,
            column: 5
          }
        },
        line: 334
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 338,
            column: 4
          },
          end: {
            line: 338,
            column: 5
          }
        },
        loc: {
          start: {
            line: 338,
            column: 28
          },
          end: {
            line: 344,
            column: 5
          }
        },
        line: 338
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 345,
            column: 4
          },
          end: {
            line: 345,
            column: 5
          }
        },
        loc: {
          start: {
            line: 345,
            column: 51
          },
          end: {
            line: 356,
            column: 5
          }
        },
        line: 345
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 357,
            column: 4
          },
          end: {
            line: 357,
            column: 5
          }
        },
        loc: {
          start: {
            line: 357,
            column: 25
          },
          end: {
            line: 360,
            column: 5
          }
        },
        line: 357
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 361,
            column: 4
          },
          end: {
            line: 361,
            column: 5
          }
        },
        loc: {
          start: {
            line: 361,
            column: 21
          },
          end: {
            line: 365,
            column: 5
          }
        },
        line: 361
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 24,
            column: 12
          },
          end: {
            line: 26,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 12
          },
          end: {
            line: 26,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 24
      },
      "1": {
        loc: {
          start: {
            line: 38,
            column: 12
          },
          end: {
            line: 40,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 12
          },
          end: {
            line: 40,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "2": {
        loc: {
          start: {
            line: 59,
            column: 27
          },
          end: {
            line: 59,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 59,
            column: 52
          },
          end: {
            line: 59,
            column: 57
          }
        }, {
          start: {
            line: 59,
            column: 60
          },
          end: {
            line: 59,
            column: 84
          }
        }],
        line: 59
      },
      "3": {
        loc: {
          start: {
            line: 63,
            column: 8
          },
          end: {
            line: 65,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 63,
            column: 8
          },
          end: {
            line: 65,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 63
      },
      "4": {
        loc: {
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 68,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 68,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 66
      },
      "5": {
        loc: {
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      },
      "6": {
        loc: {
          start: {
            line: 80,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 80
      },
      "7": {
        loc: {
          start: {
            line: 80,
            column: 12
          },
          end: {
            line: 80,
            column: 103
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 80,
            column: 12
          },
          end: {
            line: 80,
            column: 20
          }
        }, {
          start: {
            line: 80,
            column: 25
          },
          end: {
            line: 80,
            column: 102
          }
        }],
        line: 80
      },
      "8": {
        loc: {
          start: {
            line: 80,
            column: 25
          },
          end: {
            line: 80,
            column: 102
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 80,
            column: 81
          },
          end: {
            line: 80,
            column: 87
          }
        }, {
          start: {
            line: 80,
            column: 90
          },
          end: {
            line: 80,
            column: 102
          }
        }],
        line: 80
      },
      "9": {
        loc: {
          start: {
            line: 80,
            column: 25
          },
          end: {
            line: 80,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 80,
            column: 25
          },
          end: {
            line: 80,
            column: 61
          }
        }, {
          start: {
            line: 80,
            column: 65
          },
          end: {
            line: 80,
            column: 78
          }
        }],
        line: 80
      },
      "10": {
        loc: {
          start: {
            line: 103,
            column: 12
          },
          end: {
            line: 105,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 103,
            column: 12
          },
          end: {
            line: 105,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 103
      },
      "11": {
        loc: {
          start: {
            line: 119,
            column: 12
          },
          end: {
            line: 126,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 119,
            column: 12
          },
          end: {
            line: 126,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 119
      },
      "12": {
        loc: {
          start: {
            line: 122,
            column: 16
          },
          end: {
            line: 125,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 122,
            column: 16
          },
          end: {
            line: 125,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 122
      },
      "13": {
        loc: {
          start: {
            line: 122,
            column: 20
          },
          end: {
            line: 122,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 122,
            column: 20
          },
          end: {
            line: 122,
            column: 26
          }
        }, {
          start: {
            line: 122,
            column: 30
          },
          end: {
            line: 122,
            column: 55
          }
        }],
        line: 122
      },
      "14": {
        loc: {
          start: {
            line: 128,
            column: 12
          },
          end: {
            line: 130,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 128,
            column: 12
          },
          end: {
            line: 130,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 128
      },
      "15": {
        loc: {
          start: {
            line: 145,
            column: 12
          },
          end: {
            line: 148,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 12
          },
          end: {
            line: 148,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 145
      },
      "16": {
        loc: {
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 153,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 153,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 151
      },
      "17": {
        loc: {
          start: {
            line: 158,
            column: 12
          },
          end: {
            line: 160,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 158,
            column: 12
          },
          end: {
            line: 160,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 158
      },
      "18": {
        loc: {
          start: {
            line: 169,
            column: 15
          },
          end: {
            line: 169,
            column: 54
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 169,
            column: 23
          },
          end: {
            line: 169,
            column: 47
          }
        }, {
          start: {
            line: 169,
            column: 50
          },
          end: {
            line: 169,
            column: 54
          }
        }],
        line: 169
      },
      "19": {
        loc: {
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 184,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 184,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 182
      },
      "20": {
        loc: {
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 197,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 197,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "21": {
        loc: {
          start: {
            line: 194,
            column: 12
          },
          end: {
            line: 196,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 194,
            column: 12
          },
          end: {
            line: 196,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 194
      },
      "22": {
        loc: {
          start: {
            line: 205,
            column: 8
          },
          end: {
            line: 207,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 205,
            column: 8
          },
          end: {
            line: 207,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 205
      },
      "23": {
        loc: {
          start: {
            line: 216,
            column: 43
          },
          end: {
            line: 216,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 216,
            column: 43
          },
          end: {
            line: 216,
            column: 70
          }
        }, {
          start: {
            line: 216,
            column: 74
          },
          end: {
            line: 216,
            column: 75
          }
        }],
        line: 216
      },
      "24": {
        loc: {
          start: {
            line: 235,
            column: 8
          },
          end: {
            line: 237,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 235,
            column: 8
          },
          end: {
            line: 237,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 235
      },
      "25": {
        loc: {
          start: {
            line: 235,
            column: 12
          },
          end: {
            line: 235,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 235,
            column: 12
          },
          end: {
            line: 235,
            column: 22
          }
        }, {
          start: {
            line: 235,
            column: 26
          },
          end: {
            line: 235,
            column: 55
          }
        }],
        line: 235
      },
      "26": {
        loc: {
          start: {
            line: 238,
            column: 8
          },
          end: {
            line: 240,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 238,
            column: 8
          },
          end: {
            line: 240,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 238
      },
      "27": {
        loc: {
          start: {
            line: 238,
            column: 12
          },
          end: {
            line: 238,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 238,
            column: 12
          },
          end: {
            line: 238,
            column: 24
          }
        }, {
          start: {
            line: 238,
            column: 28
          },
          end: {
            line: 238,
            column: 59
          }
        }],
        line: 238
      },
      "28": {
        loc: {
          start: {
            line: 241,
            column: 8
          },
          end: {
            line: 243,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 241,
            column: 8
          },
          end: {
            line: 243,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 241
      },
      "29": {
        loc: {
          start: {
            line: 241,
            column: 12
          },
          end: {
            line: 241,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 241,
            column: 12
          },
          end: {
            line: 241,
            column: 28
          }
        }, {
          start: {
            line: 241,
            column: 32
          },
          end: {
            line: 241,
            column: 67
          }
        }],
        line: 241
      },
      "30": {
        loc: {
          start: {
            line: 244,
            column: 8
          },
          end: {
            line: 246,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 244,
            column: 8
          },
          end: {
            line: 246,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 244
      },
      "31": {
        loc: {
          start: {
            line: 250,
            column: 8
          },
          end: {
            line: 252,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 250,
            column: 8
          },
          end: {
            line: 252,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 250
      },
      "32": {
        loc: {
          start: {
            line: 257,
            column: 29
          },
          end: {
            line: 257,
            column: 124
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 257,
            column: 30
          },
          end: {
            line: 257,
            column: 103
          }
        }, {
          start: {
            line: 257,
            column: 108
          },
          end: {
            line: 257,
            column: 124
          }
        }],
        line: 257
      },
      "33": {
        loc: {
          start: {
            line: 257,
            column: 30
          },
          end: {
            line: 257,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 257,
            column: 83
          },
          end: {
            line: 257,
            column: 89
          }
        }, {
          start: {
            line: 257,
            column: 92
          },
          end: {
            line: 257,
            column: 103
          }
        }],
        line: 257
      },
      "34": {
        loc: {
          start: {
            line: 257,
            column: 30
          },
          end: {
            line: 257,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 257,
            column: 30
          },
          end: {
            line: 257,
            column: 63
          }
        }, {
          start: {
            line: 257,
            column: 67
          },
          end: {
            line: 257,
            column: 80
          }
        }],
        line: 257
      },
      "35": {
        loc: {
          start: {
            line: 259,
            column: 8
          },
          end: {
            line: 261,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 259,
            column: 8
          },
          end: {
            line: 261,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 259
      },
      "36": {
        loc: {
          start: {
            line: 263,
            column: 8
          },
          end: {
            line: 273,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 263,
            column: 8
          },
          end: {
            line: 273,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 263
      },
      "37": {
        loc: {
          start: {
            line: 263,
            column: 12
          },
          end: {
            line: 263,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 263,
            column: 65
          },
          end: {
            line: 263,
            column: 71
          }
        }, {
          start: {
            line: 263,
            column: 74
          },
          end: {
            line: 263,
            column: 87
          }
        }],
        line: 263
      },
      "38": {
        loc: {
          start: {
            line: 263,
            column: 12
          },
          end: {
            line: 263,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 263,
            column: 12
          },
          end: {
            line: 263,
            column: 45
          }
        }, {
          start: {
            line: 263,
            column: 49
          },
          end: {
            line: 263,
            column: 62
          }
        }],
        line: 263
      },
      "39": {
        loc: {
          start: {
            line: 265,
            column: 16
          },
          end: {
            line: 271,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 265,
            column: 16
          },
          end: {
            line: 271,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 265
      },
      "40": {
        loc: {
          start: {
            line: 267,
            column: 20
          },
          end: {
            line: 270,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 267,
            column: 20
          },
          end: {
            line: 270,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 267
      },
      "41": {
        loc: {
          start: {
            line: 268,
            column: 40
          },
          end: {
            line: 268,
            column: 123
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 268,
            column: 69
          },
          end: {
            line: 268,
            column: 75
          }
        }, {
          start: {
            line: 268,
            column: 78
          },
          end: {
            line: 268,
            column: 123
          }
        }],
        line: 268
      },
      "42": {
        loc: {
          start: {
            line: 279,
            column: 12
          },
          end: {
            line: 293,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 279,
            column: 12
          },
          end: {
            line: 293,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 279
      },
      "43": {
        loc: {
          start: {
            line: 282,
            column: 16
          },
          end: {
            line: 287,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 282,
            column: 16
          },
          end: {
            line: 287,
            column: 17
          }
        }, {
          start: {
            line: 285,
            column: 21
          },
          end: {
            line: 287,
            column: 17
          }
        }],
        line: 282
      },
      "44": {
        loc: {
          start: {
            line: 289,
            column: 16
          },
          end: {
            line: 291,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 289,
            column: 16
          },
          end: {
            line: 291,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 289
      },
      "45": {
        loc: {
          start: {
            line: 300,
            column: 8
          },
          end: {
            line: 301,
            column: 22
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 300,
            column: 8
          },
          end: {
            line: 301,
            column: 22
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 300
      },
      "46": {
        loc: {
          start: {
            line: 306,
            column: 8
          },
          end: {
            line: 308,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 306,
            column: 8
          },
          end: {
            line: 308,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 306
      },
      "47": {
        loc: {
          start: {
            line: 306,
            column: 12
          },
          end: {
            line: 306,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 306,
            column: 12
          },
          end: {
            line: 306,
            column: 29
          }
        }, {
          start: {
            line: 306,
            column: 33
          },
          end: {
            line: 306,
            column: 70
          }
        }],
        line: 306
      },
      "48": {
        loc: {
          start: {
            line: 309,
            column: 8
          },
          end: {
            line: 311,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 309,
            column: 8
          },
          end: {
            line: 311,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 309
      },
      "49": {
        loc: {
          start: {
            line: 309,
            column: 12
          },
          end: {
            line: 309,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 309,
            column: 12
          },
          end: {
            line: 309,
            column: 25
          }
        }, {
          start: {
            line: 309,
            column: 29
          },
          end: {
            line: 309,
            column: 91
          }
        }],
        line: 309
      },
      "50": {
        loc: {
          start: {
            line: 312,
            column: 8
          },
          end: {
            line: 318,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 312,
            column: 8
          },
          end: {
            line: 318,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 312
      },
      "51": {
        loc: {
          start: {
            line: 315,
            column: 12
          },
          end: {
            line: 317,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 315,
            column: 12
          },
          end: {
            line: 317,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 315
      },
      "52": {
        loc: {
          start: {
            line: 319,
            column: 8
          },
          end: {
            line: 321,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 319,
            column: 8
          },
          end: {
            line: 321,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 319
      },
      "53": {
        loc: {
          start: {
            line: 319,
            column: 12
          },
          end: {
            line: 319,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 319,
            column: 12
          },
          end: {
            line: 319,
            column: 27
          }
        }, {
          start: {
            line: 319,
            column: 31
          },
          end: {
            line: 319,
            column: 73
          }
        }],
        line: 319
      },
      "54": {
        loc: {
          start: {
            line: 322,
            column: 8
          },
          end: {
            line: 324,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 322,
            column: 8
          },
          end: {
            line: 324,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 322
      },
      "55": {
        loc: {
          start: {
            line: 322,
            column: 12
          },
          end: {
            line: 322,
            column: 99
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 322,
            column: 12
          },
          end: {
            line: 322,
            column: 45
          }
        }, {
          start: {
            line: 322,
            column: 49
          },
          end: {
            line: 322,
            column: 99
          }
        }],
        line: 322
      },
      "56": {
        loc: {
          start: {
            line: 325,
            column: 8
          },
          end: {
            line: 327,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 325,
            column: 8
          },
          end: {
            line: 327,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 325
      },
      "57": {
        loc: {
          start: {
            line: 325,
            column: 12
          },
          end: {
            line: 325,
            column: 140
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 325,
            column: 12
          },
          end: {
            line: 325,
            column: 38
          }
        }, {
          start: {
            line: 325,
            column: 42
          },
          end: {
            line: 325,
            column: 140
          }
        }],
        line: 325
      },
      "58": {
        loc: {
          start: {
            line: 325,
            column: 44
          },
          end: {
            line: 325,
            column: 139
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 325,
            column: 100
          },
          end: {
            line: 325,
            column: 106
          }
        }, {
          start: {
            line: 325,
            column: 109
          },
          end: {
            line: 325,
            column: 139
          }
        }],
        line: 325
      },
      "59": {
        loc: {
          start: {
            line: 325,
            column: 44
          },
          end: {
            line: 325,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 325,
            column: 44
          },
          end: {
            line: 325,
            column: 80
          }
        }, {
          start: {
            line: 325,
            column: 84
          },
          end: {
            line: 325,
            column: 97
          }
        }],
        line: 325
      },
      "60": {
        loc: {
          start: {
            line: 332,
            column: 24
          },
          end: {
            line: 332,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 332,
            column: 24
          },
          end: {
            line: 332,
            column: 32
          }
        }, {
          start: {
            line: 332,
            column: 36
          },
          end: {
            line: 332,
            column: 45
          }
        }],
        line: 332
      },
      "61": {
        loc: {
          start: {
            line: 340,
            column: 12
          },
          end: {
            line: 342,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 340,
            column: 12
          },
          end: {
            line: 342,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 340
      },
      "62": {
        loc: {
          start: {
            line: 347,
            column: 8
          },
          end: {
            line: 348,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 347,
            column: 8
          },
          end: {
            line: 348,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 347
      },
      "63": {
        loc: {
          start: {
            line: 352,
            column: 8
          },
          end: {
            line: 354,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 352,
            column: 8
          },
          end: {
            line: 354,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 352
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\src\\prompts\\registry.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\src\\prompts\\registry.ts"],
      sourcesContent: ["import {\r\n  PromptTemplate,\r\n  CompiledPrompt,\r\n  PromptRegistryConfig,\r\n  PromptSearchCriteria,\r\n  PromptUsageStats,\r\n  CompilationOptions,\r\n  ModelProvider,\r\n  PromptError,\r\n  PromptNotFoundError,\r\n  PromptValidationError,\r\n  PromptCompilationError\r\n} from './types';\r\n\r\n/**\r\n * Central registry for managing prompt templates\r\n * Provides template storage, compilation, caching, and validation\r\n */\r\nexport class PromptRegistry {\r\n  private prompts: Map<string, PromptTemplate> = new Map();\r\n  private compiledCache: Map<string, CompiledPrompt> = new Map();\r\n  private usageStats: Map<string, PromptUsageStats> = new Map();\r\n  private config: PromptRegistryConfig;\r\n\r\n  constructor(config?: Partial<PromptRegistryConfig>) {\r\n    this.config = {\r\n      strictValidation: true,\r\n      enableCaching: true,\r\n      cacheTTL: 30 * 60 * 1000, // 30 minutes\r\n      enableLogging: true,\r\n      defaultProvider: 'anthropic',\r\n      ...config\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Register a new prompt template\r\n   */\r\n  register(prompt: PromptTemplate): void {\r\n    try {\r\n      // Validate prompt structure\r\n      this.validatePromptTemplate(prompt);\r\n      \r\n      // Check for ID conflicts\r\n      if (this.prompts.has(prompt.id)) {\r\n        throw new PromptError(\r\n          `Prompt with ID '${prompt.id}' already exists`,\r\n          'DUPLICATE_ID',\r\n          prompt.id\r\n        );\r\n      }\r\n\r\n      // Register the prompt\r\n      this.prompts.set(prompt.id, { ...prompt });\r\n      \r\n      // Initialize usage stats\r\n      this.usageStats.set(prompt.id, {\r\n        templateId: prompt.id,\r\n        usageCount: 0,\r\n        lastUsed: new Date(),\r\n        avgCompilationTime: 0,\r\n        errorCount: 0,\r\n        commonVariables: {}\r\n      });\r\n\r\n      if (this.config.enableLogging) {\r\n        console.debug(`\uD83D\uDCDD Registered prompt template: ${prompt.id} (${prompt.name})`);\r\n      }\r\n    } catch (error) {\r\n      console.error(`\u274C Failed to register prompt '${prompt.id}':`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register multiple prompts at once\r\n   */\r\n  registerBatch(prompts: PromptTemplate[]): void {\r\n    const errors: Array<{ id: string; error: Error }> = [];\r\n    \r\n    for (const prompt of prompts) {\r\n      try {\r\n        this.register(prompt);\r\n      } catch (error) {\r\n        errors.push({ \r\n          id: prompt.id, \r\n          error: error instanceof Error ? error : new Error(String(error))\r\n        });\r\n      }\r\n    }\r\n\r\n    if (errors.length > 0) {\r\n      console.warn(`\u26A0\uFE0F Failed to register ${errors.length} prompts:`, errors);\r\n    }\r\n\r\n    if (this.config.enableLogging) {\r\n      console.log(`\uD83D\uDCDD Registered ${prompts.length - errors.length}/${prompts.length} prompt templates`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get a prompt template by ID\r\n   */\r\n  get(id: string, provider?: ModelProvider): PromptTemplate {\r\n    const prompt = this.prompts.get(id);\r\n    \r\n    if (!prompt) {\r\n      throw new PromptNotFoundError(id);\r\n    }\r\n\r\n    // Return model-specific version if available and requested\r\n    if (provider && prompt.modelSpecific?.[provider]) {\r\n      return {\r\n        ...prompt,\r\n        template: prompt.modelSpecific[provider]\r\n      };\r\n    }\r\n\r\n    return { ...prompt };\r\n  }\r\n\r\n  /**\r\n   * Check if a prompt exists\r\n   */\r\n  has(id: string): boolean {\r\n    return this.prompts.has(id);\r\n  }\r\n\r\n  /**\r\n   * Get all registered prompt IDs\r\n   */\r\n  getIds(): string[] {\r\n    return Array.from(this.prompts.keys());\r\n  }\r\n\r\n  /**\r\n   * Get all prompts matching search criteria\r\n   */\r\n  search(criteria: PromptSearchCriteria): PromptTemplate[] {\r\n    const results: PromptTemplate[] = [];\r\n    \r\n    for (const prompt of this.prompts.values()) {\r\n      if (this.matchesCriteria(prompt, criteria)) {\r\n        results.push({ ...prompt });\r\n      }\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  /**\r\n   * Compile a prompt with variables\r\n   */\r\n  compile(\r\n    id: string, \r\n    variables: Record<string, any>, \r\n    options?: CompilationOptions\r\n  ): CompiledPrompt {\r\n    const startTime = Date.now();\r\n    const opts = { \r\n      validate: this.config.strictValidation, \r\n      useCache: this.config.enableCaching,\r\n      ...options \r\n    };\r\n\r\n    try {\r\n      // Get the prompt template\r\n      const prompt = this.get(id, opts.provider);\r\n      \r\n      // Check cache if enabled\r\n      if (opts.useCache) {\r\n        const cacheKey = this.getCacheKey(id, variables, opts.provider);\r\n        const cached = this.compiledCache.get(cacheKey);\r\n        \r\n        if (cached && this.isCacheValid(cached)) {\r\n          this.updateUsageStats(id, Date.now() - startTime, false);\r\n          return { ...cached };\r\n        }\r\n      }\r\n\r\n      // Validate variables if required\r\n      if (opts.validate) {\r\n        this.validateVariables(prompt, variables);\r\n      }\r\n\r\n      // Compile the prompt\r\n      const compiledText = this.interpolateTemplate(prompt.template, variables, opts);\r\n      \r\n      const compiled: CompiledPrompt = {\r\n        templateId: id,\r\n        text: compiledText,\r\n        provider: opts.provider,\r\n        variables: { ...variables },\r\n        metadata: {\r\n          compiledAt: new Date(),\r\n          templateVersion: prompt.version,\r\n          estimatedTokens: this.estimateTokens(compiledText)\r\n        }\r\n      };\r\n\r\n      // Cache the result if enabled\r\n      if (opts.useCache) {\r\n        const cacheKey = this.getCacheKey(id, variables, opts.provider);\r\n        this.compiledCache.set(cacheKey, compiled);\r\n      }\r\n\r\n      // Update usage statistics\r\n      this.updateUsageStats(id, Date.now() - startTime, false);\r\n\r\n      if (this.config.enableLogging) {\r\n        console.debug(`\u2705 Compiled prompt '${id}' (${Date.now() - startTime}ms)`);\r\n      }\r\n\r\n      return compiled;\r\n    } catch (error) {\r\n      this.updateUsageStats(id, Date.now() - startTime, true);\r\n      \r\n      if (error instanceof PromptError) {\r\n        throw error;\r\n      }\r\n      \r\n      throw new PromptCompilationError(\r\n        `Failed to compile prompt '${id}': ${error}`,\r\n        id,\r\n        { variables, options: opts, originalError: error }\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get usage statistics for a prompt\r\n   */\r\n  getUsageStats(id: string): PromptUsageStats | null {\r\n    const stats = this.usageStats.get(id);\r\n    return stats ? { ...stats } : null;\r\n  }\r\n\r\n  /**\r\n   * Get all usage statistics\r\n   */\r\n  getAllUsageStats(): Map<string, PromptUsageStats> {\r\n    return new Map(this.usageStats);\r\n  }\r\n\r\n  /**\r\n   * Clear compiled cache\r\n   */\r\n  clearCache(): void {\r\n    this.compiledCache.clear();\r\n    if (this.config.enableLogging) {\r\n      console.debug('\uD83E\uDDF9 Cleared prompt compilation cache');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove a prompt from the registry\r\n   */\r\n  unregister(id: string): boolean {\r\n    const removed = this.prompts.delete(id);\r\n    if (removed) {\r\n      this.usageStats.delete(id);\r\n      this.clearCacheForPrompt(id);\r\n      \r\n      if (this.config.enableLogging) {\r\n        console.debug(`\uD83D\uDDD1\uFE0F Unregistered prompt template: ${id}`);\r\n      }\r\n    }\r\n    return removed;\r\n  }\r\n\r\n  /**\r\n   * Update registry configuration\r\n   */\r\n  updateConfig(config: Partial<PromptRegistryConfig>): void {\r\n    this.config = { ...this.config, ...config };\r\n    \r\n    if (!config.enableCaching) {\r\n      this.clearCache();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get registry statistics\r\n   */\r\n  getRegistryStats(): {\r\n    totalPrompts: number;\r\n    totalCompilations: number;\r\n    cacheSize: number;\r\n    categories: Record<string, number>;\r\n    mostUsed: Array<{ id: string; usageCount: number }>;\r\n  } {\r\n    const categories: Record<string, number> = {};\r\n    let totalCompilations = 0;\r\n\r\n    for (const prompt of this.prompts.values()) {\r\n      categories[prompt.category] = (categories[prompt.category] || 0) + 1;\r\n    }\r\n\r\n    for (const stats of this.usageStats.values()) {\r\n      totalCompilations += stats.usageCount;\r\n    }\r\n\r\n    const mostUsed = Array.from(this.usageStats.values())\r\n      .sort((a, b) => b.usageCount - a.usageCount)\r\n      .slice(0, 10)\r\n      .map(stats => ({ id: stats.templateId, usageCount: stats.usageCount }));\r\n\r\n    return {\r\n      totalPrompts: this.prompts.size,\r\n      totalCompilations,\r\n      cacheSize: this.compiledCache.size,\r\n      categories,\r\n      mostUsed\r\n    };\r\n  }\r\n\r\n  // Private helper methods\r\n\r\n  private validatePromptTemplate(prompt: PromptTemplate): void {\r\n    if (!prompt.id || typeof prompt.id !== 'string') {\r\n      throw new PromptValidationError('Prompt ID is required and must be a string');\r\n    }\r\n\r\n    if (!prompt.name || typeof prompt.name !== 'string') {\r\n      throw new PromptValidationError('Prompt name is required and must be a string', prompt.id);\r\n    }\r\n\r\n    if (!prompt.template || typeof prompt.template !== 'string') {\r\n      throw new PromptValidationError('Prompt template is required and must be a string', prompt.id);\r\n    }\r\n\r\n    if (!Array.isArray(prompt.variables)) {\r\n      throw new PromptValidationError('Prompt variables must be an array', prompt.id);\r\n    }\r\n\r\n    // Validate that all variables in template are declared\r\n    const templateVars = this.extractVariablesFromTemplate(prompt.template);\r\n    const undeclaredVars = templateVars.filter(v => !prompt.variables.includes(v));\r\n    \r\n    if (undeclaredVars.length > 0) {\r\n      throw new PromptValidationError(\r\n        `Template contains undeclared variables: ${undeclaredVars.join(', ')}`,\r\n        prompt.id,\r\n        { undeclaredVars, templateVars, declaredVars: prompt.variables }\r\n      );\r\n    }\r\n  }\r\n\r\n  private validateVariables(prompt: PromptTemplate, variables: Record<string, any>): void {\r\n    // Check required variables\r\n    const requiredVars = prompt.validation?.required || prompt.variables;\r\n    const missingVars = requiredVars.filter(v => !(v in variables));\r\n    \r\n    if (missingVars.length > 0) {\r\n      throw new PromptValidationError(\r\n        `Missing required variables: ${missingVars.join(', ')}`,\r\n        prompt.id,\r\n        { missingVars, providedVars: Object.keys(variables) }\r\n      );\r\n    }\r\n\r\n    // Apply custom validators if available\r\n    if (prompt.validation?.validators) {\r\n      for (const [varName, validator] of Object.entries(prompt.validation.validators)) {\r\n        if (varName in variables) {\r\n          const result = validator(variables[varName]);\r\n          if (result !== true) {\r\n            const message = typeof result === 'string' ? result : `Validation failed for variable '${varName}'`;\r\n            throw new PromptValidationError(message, prompt.id, { variable: varName, value: variables[varName] });\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private interpolateTemplate(\r\n    template: string, \r\n    variables: Record<string, any>, \r\n    options: CompilationOptions\r\n  ): string {\r\n    let result = template;\r\n\r\n    // Replace {{variable}} patterns\r\n    result = result.replace(/\\{\\{(\\w+)\\}\\}/g, (match, key) => {\r\n      if (key in variables) {\r\n        let value = variables[key];\r\n        \r\n        // Convert to string\r\n        if (typeof value === 'object') {\r\n          value = JSON.stringify(value);\r\n        } else {\r\n          value = String(value);\r\n        }\r\n\r\n        // Escape HTML if requested\r\n        if (options.escapeHtml) {\r\n          value = this.escapeHtml(value);\r\n        }\r\n\r\n        return value;\r\n      }\r\n      return match; // Keep placeholder if variable not found\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  private extractVariablesFromTemplate(template: string): string[] {\r\n    const matches = template.match(/\\{\\{(\\w+)\\}\\}/g);\r\n    if (!matches) return [];\r\n    \r\n    return [...new Set(matches.map(match => match.slice(2, -2)))];\r\n  }\r\n\r\n  private matchesCriteria(prompt: PromptTemplate, criteria: PromptSearchCriteria): boolean {\r\n    if (criteria.category && prompt.category !== criteria.category) {\r\n      return false;\r\n    }\r\n\r\n    if (criteria.tags && !criteria.tags.some(tag => prompt.metadata.tags.includes(tag))) {\r\n      return false;\r\n    }\r\n\r\n    if (criteria.query) {\r\n      const query = criteria.query.toLowerCase();\r\n      const searchText = `${prompt.name} ${prompt.metadata.description}`.toLowerCase();\r\n      if (!searchText.includes(query)) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    if (criteria.author && prompt.metadata.author !== criteria.author) {\r\n      return false;\r\n    }\r\n\r\n    if (criteria.isCritical !== undefined && prompt.metadata.isCritical !== criteria.isCritical) {\r\n      return false;\r\n    }\r\n\r\n    if (criteria.supportedProvider && !prompt.modelSpecific?.[criteria.supportedProvider]) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private getCacheKey(id: string, variables: Record<string, any>, provider?: ModelProvider): string {\r\n    const varsKey = JSON.stringify(variables, Object.keys(variables).sort());\r\n    return `${id}:${provider || 'default'}:${varsKey}`;\r\n  }\r\n\r\n  private isCacheValid(cached: CompiledPrompt): boolean {\r\n    const age = Date.now() - cached.metadata.compiledAt.getTime();\r\n    return age < this.config.cacheTTL;\r\n  }\r\n\r\n  private clearCacheForPrompt(id: string): void {\r\n    for (const [key, value] of this.compiledCache.entries()) {\r\n      if (value.templateId === id) {\r\n        this.compiledCache.delete(key);\r\n      }\r\n    }\r\n  }\r\n\r\n  private updateUsageStats(id: string, compilationTime: number, isError: boolean): void {\r\n    const stats = this.usageStats.get(id);\r\n    if (!stats) return;\r\n\r\n    stats.usageCount++;\r\n    stats.lastUsed = new Date();\r\n    stats.avgCompilationTime = (stats.avgCompilationTime + compilationTime) / 2;\r\n    \r\n    if (isError) {\r\n      stats.errorCount++;\r\n    }\r\n\r\n    this.usageStats.set(id, stats);\r\n  }\r\n\r\n  private estimateTokens(text: string): number {\r\n    // Rough estimation: ~4 characters per token for English text\r\n    return Math.ceil(text.length / 4);\r\n  }\r\n\r\n  private escapeHtml(text: string): string {\r\n    const div = document.createElement('div');\r\n    div.textContent = text;\r\n    return div.innerHTML;\r\n  }\r\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "6f4906f64521204766c169cac2c7b98f40eef746"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2maamjotvn = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2maamjotvn();
cov_2maamjotvn().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2maamjotvn().s[1]++;
exports.PromptRegistry = void 0;
const types_1 =
/* istanbul ignore next */
(cov_2maamjotvn().s[2]++, require("./types"));
/**
 * Central registry for managing prompt templates
 * Provides template storage, compilation, caching, and validation
 */
class PromptRegistry {
  constructor(config) {
    /* istanbul ignore next */
    cov_2maamjotvn().f[0]++;
    cov_2maamjotvn().s[3]++;
    this.prompts = new Map();
    /* istanbul ignore next */
    cov_2maamjotvn().s[4]++;
    this.compiledCache = new Map();
    /* istanbul ignore next */
    cov_2maamjotvn().s[5]++;
    this.usageStats = new Map();
    /* istanbul ignore next */
    cov_2maamjotvn().s[6]++;
    this.config = Object.assign({
      strictValidation: true,
      enableCaching: true,
      cacheTTL: 30 * 60 * 1000,
      enableLogging: true,
      defaultProvider: 'anthropic'
    }, config);
  }
  /**
   * Register a new prompt template
   */
  register(prompt) {
    /* istanbul ignore next */
    cov_2maamjotvn().f[1]++;
    cov_2maamjotvn().s[7]++;
    try {
      /* istanbul ignore next */
      cov_2maamjotvn().s[8]++;
      // Validate prompt structure
      this.validatePromptTemplate(prompt);
      // Check for ID conflicts
      /* istanbul ignore next */
      cov_2maamjotvn().s[9]++;
      if (this.prompts.has(prompt.id)) {
        /* istanbul ignore next */
        cov_2maamjotvn().b[0][0]++;
        cov_2maamjotvn().s[10]++;
        throw new types_1.PromptError(`Prompt with ID '${prompt.id}' already exists`, 'DUPLICATE_ID', prompt.id);
      } else
      /* istanbul ignore next */
      {
        cov_2maamjotvn().b[0][1]++;
      }
      // Register the prompt
      cov_2maamjotvn().s[11]++;
      this.prompts.set(prompt.id, Object.assign({}, prompt));
      // Initialize usage stats
      /* istanbul ignore next */
      cov_2maamjotvn().s[12]++;
      this.usageStats.set(prompt.id, {
        templateId: prompt.id,
        usageCount: 0,
        lastUsed: new Date(),
        avgCompilationTime: 0,
        errorCount: 0,
        commonVariables: {}
      });
      /* istanbul ignore next */
      cov_2maamjotvn().s[13]++;
      if (this.config.enableLogging) {
        /* istanbul ignore next */
        cov_2maamjotvn().b[1][0]++;
        cov_2maamjotvn().s[14]++;
        console.debug(`📝 Registered prompt template: ${prompt.id} (${prompt.name})`);
      } else
      /* istanbul ignore next */
      {
        cov_2maamjotvn().b[1][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_2maamjotvn().s[15]++;
      console.error(`❌ Failed to register prompt '${prompt.id}':`, error);
      /* istanbul ignore next */
      cov_2maamjotvn().s[16]++;
      throw error;
    }
  }
  /**
   * Register multiple prompts at once
   */
  registerBatch(prompts) {
    /* istanbul ignore next */
    cov_2maamjotvn().f[2]++;
    const errors =
    /* istanbul ignore next */
    (cov_2maamjotvn().s[17]++, []);
    /* istanbul ignore next */
    cov_2maamjotvn().s[18]++;
    for (const prompt of prompts) {
      /* istanbul ignore next */
      cov_2maamjotvn().s[19]++;
      try {
        /* istanbul ignore next */
        cov_2maamjotvn().s[20]++;
        this.register(prompt);
      } catch (error) {
        /* istanbul ignore next */
        cov_2maamjotvn().s[21]++;
        errors.push({
          id: prompt.id,
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_2maamjotvn().b[2][0]++, error) :
          /* istanbul ignore next */
          (cov_2maamjotvn().b[2][1]++, new Error(String(error)))
        });
      }
    }
    /* istanbul ignore next */
    cov_2maamjotvn().s[22]++;
    if (errors.length > 0) {
      /* istanbul ignore next */
      cov_2maamjotvn().b[3][0]++;
      cov_2maamjotvn().s[23]++;
      console.warn(`⚠️ Failed to register ${errors.length} prompts:`, errors);
    } else
    /* istanbul ignore next */
    {
      cov_2maamjotvn().b[3][1]++;
    }
    cov_2maamjotvn().s[24]++;
    if (this.config.enableLogging) {
      /* istanbul ignore next */
      cov_2maamjotvn().b[4][0]++;
      cov_2maamjotvn().s[25]++;
      console.log(`📝 Registered ${prompts.length - errors.length}/${prompts.length} prompt templates`);
    } else
    /* istanbul ignore next */
    {
      cov_2maamjotvn().b[4][1]++;
    }
  }
  /**
   * Get a prompt template by ID
   */
  get(id, provider) {
    /* istanbul ignore next */
    cov_2maamjotvn().f[3]++;
    var _a;
    const prompt =
    /* istanbul ignore next */
    (cov_2maamjotvn().s[26]++, this.prompts.get(id));
    /* istanbul ignore next */
    cov_2maamjotvn().s[27]++;
    if (!prompt) {
      /* istanbul ignore next */
      cov_2maamjotvn().b[5][0]++;
      cov_2maamjotvn().s[28]++;
      throw new types_1.PromptNotFoundError(id);
    } else
    /* istanbul ignore next */
    {
      cov_2maamjotvn().b[5][1]++;
    }
    // Return model-specific version if available and requested
    cov_2maamjotvn().s[29]++;
    if (
    /* istanbul ignore next */
    (cov_2maamjotvn().b[7][0]++, provider) &&
    /* istanbul ignore next */
    (cov_2maamjotvn().b[7][1]++,
    /* istanbul ignore next */
    (cov_2maamjotvn().b[9][0]++, (_a = prompt.modelSpecific) === null) ||
    /* istanbul ignore next */
    (cov_2maamjotvn().b[9][1]++, _a === void 0) ?
    /* istanbul ignore next */
    (cov_2maamjotvn().b[8][0]++, void 0) :
    /* istanbul ignore next */
    (cov_2maamjotvn().b[8][1]++, _a[provider]))) {
      /* istanbul ignore next */
      cov_2maamjotvn().b[6][0]++;
      cov_2maamjotvn().s[30]++;
      return Object.assign(Object.assign({}, prompt), {
        template: prompt.modelSpecific[provider]
      });
    } else
    /* istanbul ignore next */
    {
      cov_2maamjotvn().b[6][1]++;
    }
    cov_2maamjotvn().s[31]++;
    return Object.assign({}, prompt);
  }
  /**
   * Check if a prompt exists
   */
  has(id) {
    /* istanbul ignore next */
    cov_2maamjotvn().f[4]++;
    cov_2maamjotvn().s[32]++;
    return this.prompts.has(id);
  }
  /**
   * Get all registered prompt IDs
   */
  getIds() {
    /* istanbul ignore next */
    cov_2maamjotvn().f[5]++;
    cov_2maamjotvn().s[33]++;
    return Array.from(this.prompts.keys());
  }
  /**
   * Get all prompts matching search criteria
   */
  search(criteria) {
    /* istanbul ignore next */
    cov_2maamjotvn().f[6]++;
    const results =
    /* istanbul ignore next */
    (cov_2maamjotvn().s[34]++, []);
    /* istanbul ignore next */
    cov_2maamjotvn().s[35]++;
    for (const prompt of this.prompts.values()) {
      /* istanbul ignore next */
      cov_2maamjotvn().s[36]++;
      if (this.matchesCriteria(prompt, criteria)) {
        /* istanbul ignore next */
        cov_2maamjotvn().b[10][0]++;
        cov_2maamjotvn().s[37]++;
        results.push(Object.assign({}, prompt));
      } else
      /* istanbul ignore next */
      {
        cov_2maamjotvn().b[10][1]++;
      }
    }
    /* istanbul ignore next */
    cov_2maamjotvn().s[38]++;
    return results;
  }
  /**
   * Compile a prompt with variables
   */
  compile(id, variables, options) {
    /* istanbul ignore next */
    cov_2maamjotvn().f[7]++;
    const startTime =
    /* istanbul ignore next */
    (cov_2maamjotvn().s[39]++, Date.now());
    const opts =
    /* istanbul ignore next */
    (cov_2maamjotvn().s[40]++, Object.assign({
      validate: this.config.strictValidation,
      useCache: this.config.enableCaching
    }, options));
    /* istanbul ignore next */
    cov_2maamjotvn().s[41]++;
    try {
      // Get the prompt template
      const prompt =
      /* istanbul ignore next */
      (cov_2maamjotvn().s[42]++, this.get(id, opts.provider));
      // Check cache if enabled
      /* istanbul ignore next */
      cov_2maamjotvn().s[43]++;
      if (opts.useCache) {
        /* istanbul ignore next */
        cov_2maamjotvn().b[11][0]++;
        const cacheKey =
        /* istanbul ignore next */
        (cov_2maamjotvn().s[44]++, this.getCacheKey(id, variables, opts.provider));
        const cached =
        /* istanbul ignore next */
        (cov_2maamjotvn().s[45]++, this.compiledCache.get(cacheKey));
        /* istanbul ignore next */
        cov_2maamjotvn().s[46]++;
        if (
        /* istanbul ignore next */
        (cov_2maamjotvn().b[13][0]++, cached) &&
        /* istanbul ignore next */
        (cov_2maamjotvn().b[13][1]++, this.isCacheValid(cached))) {
          /* istanbul ignore next */
          cov_2maamjotvn().b[12][0]++;
          cov_2maamjotvn().s[47]++;
          this.updateUsageStats(id, Date.now() - startTime, false);
          /* istanbul ignore next */
          cov_2maamjotvn().s[48]++;
          return Object.assign({}, cached);
        } else
        /* istanbul ignore next */
        {
          cov_2maamjotvn().b[12][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_2maamjotvn().b[11][1]++;
      }
      // Validate variables if required
      cov_2maamjotvn().s[49]++;
      if (opts.validate) {
        /* istanbul ignore next */
        cov_2maamjotvn().b[14][0]++;
        cov_2maamjotvn().s[50]++;
        this.validateVariables(prompt, variables);
      } else
      /* istanbul ignore next */
      {
        cov_2maamjotvn().b[14][1]++;
      }
      // Compile the prompt
      const compiledText =
      /* istanbul ignore next */
      (cov_2maamjotvn().s[51]++, this.interpolateTemplate(prompt.template, variables, opts));
      const compiled =
      /* istanbul ignore next */
      (cov_2maamjotvn().s[52]++, {
        templateId: id,
        text: compiledText,
        provider: opts.provider,
        variables: Object.assign({}, variables),
        metadata: {
          compiledAt: new Date(),
          templateVersion: prompt.version,
          estimatedTokens: this.estimateTokens(compiledText)
        }
      });
      // Cache the result if enabled
      /* istanbul ignore next */
      cov_2maamjotvn().s[53]++;
      if (opts.useCache) {
        /* istanbul ignore next */
        cov_2maamjotvn().b[15][0]++;
        const cacheKey =
        /* istanbul ignore next */
        (cov_2maamjotvn().s[54]++, this.getCacheKey(id, variables, opts.provider));
        /* istanbul ignore next */
        cov_2maamjotvn().s[55]++;
        this.compiledCache.set(cacheKey, compiled);
      } else
      /* istanbul ignore next */
      {
        cov_2maamjotvn().b[15][1]++;
      }
      // Update usage statistics
      cov_2maamjotvn().s[56]++;
      this.updateUsageStats(id, Date.now() - startTime, false);
      /* istanbul ignore next */
      cov_2maamjotvn().s[57]++;
      if (this.config.enableLogging) {
        /* istanbul ignore next */
        cov_2maamjotvn().b[16][0]++;
        cov_2maamjotvn().s[58]++;
        console.debug(`✅ Compiled prompt '${id}' (${Date.now() - startTime}ms)`);
      } else
      /* istanbul ignore next */
      {
        cov_2maamjotvn().b[16][1]++;
      }
      cov_2maamjotvn().s[59]++;
      return compiled;
    } catch (error) {
      /* istanbul ignore next */
      cov_2maamjotvn().s[60]++;
      this.updateUsageStats(id, Date.now() - startTime, true);
      /* istanbul ignore next */
      cov_2maamjotvn().s[61]++;
      if (error instanceof types_1.PromptError) {
        /* istanbul ignore next */
        cov_2maamjotvn().b[17][0]++;
        cov_2maamjotvn().s[62]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_2maamjotvn().b[17][1]++;
      }
      cov_2maamjotvn().s[63]++;
      throw new types_1.PromptCompilationError(`Failed to compile prompt '${id}': ${error}`, id, {
        variables,
        options: opts,
        originalError: error
      });
    }
  }
  /**
   * Get usage statistics for a prompt
   */
  getUsageStats(id) {
    /* istanbul ignore next */
    cov_2maamjotvn().f[8]++;
    const stats =
    /* istanbul ignore next */
    (cov_2maamjotvn().s[64]++, this.usageStats.get(id));
    /* istanbul ignore next */
    cov_2maamjotvn().s[65]++;
    return stats ?
    /* istanbul ignore next */
    (cov_2maamjotvn().b[18][0]++, Object.assign({}, stats)) :
    /* istanbul ignore next */
    (cov_2maamjotvn().b[18][1]++, null);
  }
  /**
   * Get all usage statistics
   */
  getAllUsageStats() {
    /* istanbul ignore next */
    cov_2maamjotvn().f[9]++;
    cov_2maamjotvn().s[66]++;
    return new Map(this.usageStats);
  }
  /**
   * Clear compiled cache
   */
  clearCache() {
    /* istanbul ignore next */
    cov_2maamjotvn().f[10]++;
    cov_2maamjotvn().s[67]++;
    this.compiledCache.clear();
    /* istanbul ignore next */
    cov_2maamjotvn().s[68]++;
    if (this.config.enableLogging) {
      /* istanbul ignore next */
      cov_2maamjotvn().b[19][0]++;
      cov_2maamjotvn().s[69]++;
      console.debug('🧹 Cleared prompt compilation cache');
    } else
    /* istanbul ignore next */
    {
      cov_2maamjotvn().b[19][1]++;
    }
  }
  /**
   * Remove a prompt from the registry
   */
  unregister(id) {
    /* istanbul ignore next */
    cov_2maamjotvn().f[11]++;
    const removed =
    /* istanbul ignore next */
    (cov_2maamjotvn().s[70]++, this.prompts.delete(id));
    /* istanbul ignore next */
    cov_2maamjotvn().s[71]++;
    if (removed) {
      /* istanbul ignore next */
      cov_2maamjotvn().b[20][0]++;
      cov_2maamjotvn().s[72]++;
      this.usageStats.delete(id);
      /* istanbul ignore next */
      cov_2maamjotvn().s[73]++;
      this.clearCacheForPrompt(id);
      /* istanbul ignore next */
      cov_2maamjotvn().s[74]++;
      if (this.config.enableLogging) {
        /* istanbul ignore next */
        cov_2maamjotvn().b[21][0]++;
        cov_2maamjotvn().s[75]++;
        console.debug(`🗑️ Unregistered prompt template: ${id}`);
      } else
      /* istanbul ignore next */
      {
        cov_2maamjotvn().b[21][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2maamjotvn().b[20][1]++;
    }
    cov_2maamjotvn().s[76]++;
    return removed;
  }
  /**
   * Update registry configuration
   */
  updateConfig(config) {
    /* istanbul ignore next */
    cov_2maamjotvn().f[12]++;
    cov_2maamjotvn().s[77]++;
    this.config = Object.assign(Object.assign({}, this.config), config);
    /* istanbul ignore next */
    cov_2maamjotvn().s[78]++;
    if (!config.enableCaching) {
      /* istanbul ignore next */
      cov_2maamjotvn().b[22][0]++;
      cov_2maamjotvn().s[79]++;
      this.clearCache();
    } else
    /* istanbul ignore next */
    {
      cov_2maamjotvn().b[22][1]++;
    }
  }
  /**
   * Get registry statistics
   */
  getRegistryStats() {
    /* istanbul ignore next */
    cov_2maamjotvn().f[13]++;
    const categories =
    /* istanbul ignore next */
    (cov_2maamjotvn().s[80]++, {});
    let totalCompilations =
    /* istanbul ignore next */
    (cov_2maamjotvn().s[81]++, 0);
    /* istanbul ignore next */
    cov_2maamjotvn().s[82]++;
    for (const prompt of this.prompts.values()) {
      /* istanbul ignore next */
      cov_2maamjotvn().s[83]++;
      categories[prompt.category] = (
      /* istanbul ignore next */
      (cov_2maamjotvn().b[23][0]++, categories[prompt.category]) ||
      /* istanbul ignore next */
      (cov_2maamjotvn().b[23][1]++, 0)) + 1;
    }
    /* istanbul ignore next */
    cov_2maamjotvn().s[84]++;
    for (const stats of this.usageStats.values()) {
      /* istanbul ignore next */
      cov_2maamjotvn().s[85]++;
      totalCompilations += stats.usageCount;
    }
    const mostUsed =
    /* istanbul ignore next */
    (cov_2maamjotvn().s[86]++, Array.from(this.usageStats.values()).sort((a, b) => {
      /* istanbul ignore next */
      cov_2maamjotvn().f[14]++;
      cov_2maamjotvn().s[87]++;
      return b.usageCount - a.usageCount;
    }).slice(0, 10).map(stats => {
      /* istanbul ignore next */
      cov_2maamjotvn().f[15]++;
      cov_2maamjotvn().s[88]++;
      return {
        id: stats.templateId,
        usageCount: stats.usageCount
      };
    }));
    /* istanbul ignore next */
    cov_2maamjotvn().s[89]++;
    return {
      totalPrompts: this.prompts.size,
      totalCompilations,
      cacheSize: this.compiledCache.size,
      categories,
      mostUsed
    };
  }
  // Private helper methods
  validatePromptTemplate(prompt) {
    /* istanbul ignore next */
    cov_2maamjotvn().f[16]++;
    cov_2maamjotvn().s[90]++;
    if (
    /* istanbul ignore next */
    (cov_2maamjotvn().b[25][0]++, !prompt.id) ||
    /* istanbul ignore next */
    (cov_2maamjotvn().b[25][1]++, typeof prompt.id !== 'string')) {
      /* istanbul ignore next */
      cov_2maamjotvn().b[24][0]++;
      cov_2maamjotvn().s[91]++;
      throw new types_1.PromptValidationError('Prompt ID is required and must be a string');
    } else
    /* istanbul ignore next */
    {
      cov_2maamjotvn().b[24][1]++;
    }
    cov_2maamjotvn().s[92]++;
    if (
    /* istanbul ignore next */
    (cov_2maamjotvn().b[27][0]++, !prompt.name) ||
    /* istanbul ignore next */
    (cov_2maamjotvn().b[27][1]++, typeof prompt.name !== 'string')) {
      /* istanbul ignore next */
      cov_2maamjotvn().b[26][0]++;
      cov_2maamjotvn().s[93]++;
      throw new types_1.PromptValidationError('Prompt name is required and must be a string', prompt.id);
    } else
    /* istanbul ignore next */
    {
      cov_2maamjotvn().b[26][1]++;
    }
    cov_2maamjotvn().s[94]++;
    if (
    /* istanbul ignore next */
    (cov_2maamjotvn().b[29][0]++, !prompt.template) ||
    /* istanbul ignore next */
    (cov_2maamjotvn().b[29][1]++, typeof prompt.template !== 'string')) {
      /* istanbul ignore next */
      cov_2maamjotvn().b[28][0]++;
      cov_2maamjotvn().s[95]++;
      throw new types_1.PromptValidationError('Prompt template is required and must be a string', prompt.id);
    } else
    /* istanbul ignore next */
    {
      cov_2maamjotvn().b[28][1]++;
    }
    cov_2maamjotvn().s[96]++;
    if (!Array.isArray(prompt.variables)) {
      /* istanbul ignore next */
      cov_2maamjotvn().b[30][0]++;
      cov_2maamjotvn().s[97]++;
      throw new types_1.PromptValidationError('Prompt variables must be an array', prompt.id);
    } else
    /* istanbul ignore next */
    {
      cov_2maamjotvn().b[30][1]++;
    }
    // Validate that all variables in template are declared
    const templateVars =
    /* istanbul ignore next */
    (cov_2maamjotvn().s[98]++, this.extractVariablesFromTemplate(prompt.template));
    const undeclaredVars =
    /* istanbul ignore next */
    (cov_2maamjotvn().s[99]++, templateVars.filter(v => {
      /* istanbul ignore next */
      cov_2maamjotvn().f[17]++;
      cov_2maamjotvn().s[100]++;
      return !prompt.variables.includes(v);
    }));
    /* istanbul ignore next */
    cov_2maamjotvn().s[101]++;
    if (undeclaredVars.length > 0) {
      /* istanbul ignore next */
      cov_2maamjotvn().b[31][0]++;
      cov_2maamjotvn().s[102]++;
      throw new types_1.PromptValidationError(`Template contains undeclared variables: ${undeclaredVars.join(', ')}`, prompt.id, {
        undeclaredVars,
        templateVars,
        declaredVars: prompt.variables
      });
    } else
    /* istanbul ignore next */
    {
      cov_2maamjotvn().b[31][1]++;
    }
  }
  validateVariables(prompt, variables) {
    /* istanbul ignore next */
    cov_2maamjotvn().f[18]++;
    var _a, _b;
    // Check required variables
    const requiredVars =
    /* istanbul ignore next */
    (cov_2maamjotvn().s[103]++,
    /* istanbul ignore next */
    (cov_2maamjotvn().b[32][0]++,
    /* istanbul ignore next */
    (cov_2maamjotvn().b[34][0]++, (_a = prompt.validation) === null) ||
    /* istanbul ignore next */
    (cov_2maamjotvn().b[34][1]++, _a === void 0) ?
    /* istanbul ignore next */
    (cov_2maamjotvn().b[33][0]++, void 0) :
    /* istanbul ignore next */
    (cov_2maamjotvn().b[33][1]++, _a.required)) ||
    /* istanbul ignore next */
    (cov_2maamjotvn().b[32][1]++, prompt.variables));
    const missingVars =
    /* istanbul ignore next */
    (cov_2maamjotvn().s[104]++, requiredVars.filter(v => {
      /* istanbul ignore next */
      cov_2maamjotvn().f[19]++;
      cov_2maamjotvn().s[105]++;
      return !(v in variables);
    }));
    /* istanbul ignore next */
    cov_2maamjotvn().s[106]++;
    if (missingVars.length > 0) {
      /* istanbul ignore next */
      cov_2maamjotvn().b[35][0]++;
      cov_2maamjotvn().s[107]++;
      throw new types_1.PromptValidationError(`Missing required variables: ${missingVars.join(', ')}`, prompt.id, {
        missingVars,
        providedVars: Object.keys(variables)
      });
    } else
    /* istanbul ignore next */
    {
      cov_2maamjotvn().b[35][1]++;
    }
    // Apply custom validators if available
    cov_2maamjotvn().s[108]++;
    if (
    /* istanbul ignore next */
    (cov_2maamjotvn().b[38][0]++, (_b = prompt.validation) === null) ||
    /* istanbul ignore next */
    (cov_2maamjotvn().b[38][1]++, _b === void 0) ?
    /* istanbul ignore next */
    (cov_2maamjotvn().b[37][0]++, void 0) :
    /* istanbul ignore next */
    (cov_2maamjotvn().b[37][1]++, _b.validators)) {
      /* istanbul ignore next */
      cov_2maamjotvn().b[36][0]++;
      cov_2maamjotvn().s[109]++;
      for (const [varName, validator] of Object.entries(prompt.validation.validators)) {
        /* istanbul ignore next */
        cov_2maamjotvn().s[110]++;
        if (varName in variables) {
          /* istanbul ignore next */
          cov_2maamjotvn().b[39][0]++;
          const result =
          /* istanbul ignore next */
          (cov_2maamjotvn().s[111]++, validator(variables[varName]));
          /* istanbul ignore next */
          cov_2maamjotvn().s[112]++;
          if (result !== true) {
            /* istanbul ignore next */
            cov_2maamjotvn().b[40][0]++;
            const message =
            /* istanbul ignore next */
            (cov_2maamjotvn().s[113]++, typeof result === 'string' ?
            /* istanbul ignore next */
            (cov_2maamjotvn().b[41][0]++, result) :
            /* istanbul ignore next */
            (cov_2maamjotvn().b[41][1]++, `Validation failed for variable '${varName}'`));
            /* istanbul ignore next */
            cov_2maamjotvn().s[114]++;
            throw new types_1.PromptValidationError(message, prompt.id, {
              variable: varName,
              value: variables[varName]
            });
          } else
          /* istanbul ignore next */
          {
            cov_2maamjotvn().b[40][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_2maamjotvn().b[39][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_2maamjotvn().b[36][1]++;
    }
  }
  interpolateTemplate(template, variables, options) {
    /* istanbul ignore next */
    cov_2maamjotvn().f[20]++;
    let result =
    /* istanbul ignore next */
    (cov_2maamjotvn().s[115]++, template);
    // Replace {{variable}} patterns
    /* istanbul ignore next */
    cov_2maamjotvn().s[116]++;
    result = result.replace(/\{\{(\w+)\}\}/g, (match, key) => {
      /* istanbul ignore next */
      cov_2maamjotvn().f[21]++;
      cov_2maamjotvn().s[117]++;
      if (key in variables) {
        /* istanbul ignore next */
        cov_2maamjotvn().b[42][0]++;
        let value =
        /* istanbul ignore next */
        (cov_2maamjotvn().s[118]++, variables[key]);
        // Convert to string
        /* istanbul ignore next */
        cov_2maamjotvn().s[119]++;
        if (typeof value === 'object') {
          /* istanbul ignore next */
          cov_2maamjotvn().b[43][0]++;
          cov_2maamjotvn().s[120]++;
          value = JSON.stringify(value);
        } else {
          /* istanbul ignore next */
          cov_2maamjotvn().b[43][1]++;
          cov_2maamjotvn().s[121]++;
          value = String(value);
        }
        // Escape HTML if requested
        /* istanbul ignore next */
        cov_2maamjotvn().s[122]++;
        if (options.escapeHtml) {
          /* istanbul ignore next */
          cov_2maamjotvn().b[44][0]++;
          cov_2maamjotvn().s[123]++;
          value = this.escapeHtml(value);
        } else
        /* istanbul ignore next */
        {
          cov_2maamjotvn().b[44][1]++;
        }
        cov_2maamjotvn().s[124]++;
        return value;
      } else
      /* istanbul ignore next */
      {
        cov_2maamjotvn().b[42][1]++;
      }
      cov_2maamjotvn().s[125]++;
      return match; // Keep placeholder if variable not found
    });
    /* istanbul ignore next */
    cov_2maamjotvn().s[126]++;
    return result;
  }
  extractVariablesFromTemplate(template) {
    /* istanbul ignore next */
    cov_2maamjotvn().f[22]++;
    const matches =
    /* istanbul ignore next */
    (cov_2maamjotvn().s[127]++, template.match(/\{\{(\w+)\}\}/g));
    /* istanbul ignore next */
    cov_2maamjotvn().s[128]++;
    if (!matches) {
      /* istanbul ignore next */
      cov_2maamjotvn().b[45][0]++;
      cov_2maamjotvn().s[129]++;
      return [];
    } else
    /* istanbul ignore next */
    {
      cov_2maamjotvn().b[45][1]++;
    }
    cov_2maamjotvn().s[130]++;
    return [...new Set(matches.map(match => {
      /* istanbul ignore next */
      cov_2maamjotvn().f[23]++;
      cov_2maamjotvn().s[131]++;
      return match.slice(2, -2);
    }))];
  }
  matchesCriteria(prompt, criteria) {
    /* istanbul ignore next */
    cov_2maamjotvn().f[24]++;
    var _a;
    /* istanbul ignore next */
    cov_2maamjotvn().s[132]++;
    if (
    /* istanbul ignore next */
    (cov_2maamjotvn().b[47][0]++, criteria.category) &&
    /* istanbul ignore next */
    (cov_2maamjotvn().b[47][1]++, prompt.category !== criteria.category)) {
      /* istanbul ignore next */
      cov_2maamjotvn().b[46][0]++;
      cov_2maamjotvn().s[133]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_2maamjotvn().b[46][1]++;
    }
    cov_2maamjotvn().s[134]++;
    if (
    /* istanbul ignore next */
    (cov_2maamjotvn().b[49][0]++, criteria.tags) &&
    /* istanbul ignore next */
    (cov_2maamjotvn().b[49][1]++, !criteria.tags.some(tag => {
      /* istanbul ignore next */
      cov_2maamjotvn().f[25]++;
      cov_2maamjotvn().s[135]++;
      return prompt.metadata.tags.includes(tag);
    }))) {
      /* istanbul ignore next */
      cov_2maamjotvn().b[48][0]++;
      cov_2maamjotvn().s[136]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_2maamjotvn().b[48][1]++;
    }
    cov_2maamjotvn().s[137]++;
    if (criteria.query) {
      /* istanbul ignore next */
      cov_2maamjotvn().b[50][0]++;
      const query =
      /* istanbul ignore next */
      (cov_2maamjotvn().s[138]++, criteria.query.toLowerCase());
      const searchText =
      /* istanbul ignore next */
      (cov_2maamjotvn().s[139]++, `${prompt.name} ${prompt.metadata.description}`.toLowerCase());
      /* istanbul ignore next */
      cov_2maamjotvn().s[140]++;
      if (!searchText.includes(query)) {
        /* istanbul ignore next */
        cov_2maamjotvn().b[51][0]++;
        cov_2maamjotvn().s[141]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_2maamjotvn().b[51][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2maamjotvn().b[50][1]++;
    }
    cov_2maamjotvn().s[142]++;
    if (
    /* istanbul ignore next */
    (cov_2maamjotvn().b[53][0]++, criteria.author) &&
    /* istanbul ignore next */
    (cov_2maamjotvn().b[53][1]++, prompt.metadata.author !== criteria.author)) {
      /* istanbul ignore next */
      cov_2maamjotvn().b[52][0]++;
      cov_2maamjotvn().s[143]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_2maamjotvn().b[52][1]++;
    }
    cov_2maamjotvn().s[144]++;
    if (
    /* istanbul ignore next */
    (cov_2maamjotvn().b[55][0]++, criteria.isCritical !== undefined) &&
    /* istanbul ignore next */
    (cov_2maamjotvn().b[55][1]++, prompt.metadata.isCritical !== criteria.isCritical)) {
      /* istanbul ignore next */
      cov_2maamjotvn().b[54][0]++;
      cov_2maamjotvn().s[145]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_2maamjotvn().b[54][1]++;
    }
    cov_2maamjotvn().s[146]++;
    if (
    /* istanbul ignore next */
    (cov_2maamjotvn().b[57][0]++, criteria.supportedProvider) &&
    /* istanbul ignore next */
    (cov_2maamjotvn().b[57][1]++, !(
    /* istanbul ignore next */
    (cov_2maamjotvn().b[59][0]++, (_a = prompt.modelSpecific) === null) ||
    /* istanbul ignore next */
    (cov_2maamjotvn().b[59][1]++, _a === void 0) ?
    /* istanbul ignore next */
    (cov_2maamjotvn().b[58][0]++, void 0) :
    /* istanbul ignore next */
    (cov_2maamjotvn().b[58][1]++, _a[criteria.supportedProvider])))) {
      /* istanbul ignore next */
      cov_2maamjotvn().b[56][0]++;
      cov_2maamjotvn().s[147]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_2maamjotvn().b[56][1]++;
    }
    cov_2maamjotvn().s[148]++;
    return true;
  }
  getCacheKey(id, variables, provider) {
    /* istanbul ignore next */
    cov_2maamjotvn().f[26]++;
    const varsKey =
    /* istanbul ignore next */
    (cov_2maamjotvn().s[149]++, JSON.stringify(variables, Object.keys(variables).sort()));
    /* istanbul ignore next */
    cov_2maamjotvn().s[150]++;
    return `${id}:${
    /* istanbul ignore next */
    (cov_2maamjotvn().b[60][0]++, provider) ||
    /* istanbul ignore next */
    (cov_2maamjotvn().b[60][1]++, 'default')}:${varsKey}`;
  }
  isCacheValid(cached) {
    /* istanbul ignore next */
    cov_2maamjotvn().f[27]++;
    const age =
    /* istanbul ignore next */
    (cov_2maamjotvn().s[151]++, Date.now() - cached.metadata.compiledAt.getTime());
    /* istanbul ignore next */
    cov_2maamjotvn().s[152]++;
    return age < this.config.cacheTTL;
  }
  clearCacheForPrompt(id) {
    /* istanbul ignore next */
    cov_2maamjotvn().f[28]++;
    cov_2maamjotvn().s[153]++;
    for (const [key, value] of this.compiledCache.entries()) {
      /* istanbul ignore next */
      cov_2maamjotvn().s[154]++;
      if (value.templateId === id) {
        /* istanbul ignore next */
        cov_2maamjotvn().b[61][0]++;
        cov_2maamjotvn().s[155]++;
        this.compiledCache.delete(key);
      } else
      /* istanbul ignore next */
      {
        cov_2maamjotvn().b[61][1]++;
      }
    }
  }
  updateUsageStats(id, compilationTime, isError) {
    /* istanbul ignore next */
    cov_2maamjotvn().f[29]++;
    const stats =
    /* istanbul ignore next */
    (cov_2maamjotvn().s[156]++, this.usageStats.get(id));
    /* istanbul ignore next */
    cov_2maamjotvn().s[157]++;
    if (!stats) {
      /* istanbul ignore next */
      cov_2maamjotvn().b[62][0]++;
      cov_2maamjotvn().s[158]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2maamjotvn().b[62][1]++;
    }
    cov_2maamjotvn().s[159]++;
    stats.usageCount++;
    /* istanbul ignore next */
    cov_2maamjotvn().s[160]++;
    stats.lastUsed = new Date();
    /* istanbul ignore next */
    cov_2maamjotvn().s[161]++;
    stats.avgCompilationTime = (stats.avgCompilationTime + compilationTime) / 2;
    /* istanbul ignore next */
    cov_2maamjotvn().s[162]++;
    if (isError) {
      /* istanbul ignore next */
      cov_2maamjotvn().b[63][0]++;
      cov_2maamjotvn().s[163]++;
      stats.errorCount++;
    } else
    /* istanbul ignore next */
    {
      cov_2maamjotvn().b[63][1]++;
    }
    cov_2maamjotvn().s[164]++;
    this.usageStats.set(id, stats);
  }
  estimateTokens(text) {
    /* istanbul ignore next */
    cov_2maamjotvn().f[30]++;
    cov_2maamjotvn().s[165]++;
    // Rough estimation: ~4 characters per token for English text
    return Math.ceil(text.length / 4);
  }
  escapeHtml(text) {
    /* istanbul ignore next */
    cov_2maamjotvn().f[31]++;
    const div =
    /* istanbul ignore next */
    (cov_2maamjotvn().s[166]++, document.createElement('div'));
    /* istanbul ignore next */
    cov_2maamjotvn().s[167]++;
    div.textContent = text;
    /* istanbul ignore next */
    cov_2maamjotvn().s[168]++;
    return div.innerHTML;
  }
}
/* istanbul ignore next */
cov_2maamjotvn().s[169]++;
exports.PromptRegistry = PromptRegistry;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,