{"version":3,"names":["require","isContentEditable","selection","updateSelectionOnFocus","element","selection$1","ownerDocument","getSelection","undefined","focusNode","hasOwnSelection","contenteditable","getContentEditable","isCollapsed","_contenteditable_firstChild","firstChild","nodeType","setBaseAndExtent","exports"],"sources":["updateSelectionOnFocus.js"],"sourcesContent":["'use strict';\n\nrequire('../../utils/dataTransfer/Clipboard.js');\nvar isContentEditable = require('../../utils/edit/isContentEditable.js');\nvar selection = require('../../utils/focus/selection.js');\n\n// The browser implementation seems to have changed.\n// When focus is inside <input type=\"text\"/>,\n// Chrome updates Selection to be collapsed at the position of the input element.\n// TODO: update implementation to match that of current browsers\n/**\n * Reset the Document Selection when moving focus into an element\n * with own selection implementation.\n */ function updateSelectionOnFocus(element) {\n    const selection$1 = element.ownerDocument.getSelection();\n    /* istanbul ignore if */ if (!(selection$1 === null || selection$1 === undefined ? undefined : selection$1.focusNode)) {\n        return;\n    }\n    // If the focus moves inside an element with own selection implementation,\n    // the document selection will be this element.\n    // But if the focused element is inside a contenteditable,\n    // 1) a collapsed selection will be retained.\n    // 2) other selections will be replaced by a cursor\n    //  2.a) at the start of the first child if it is a text node\n    //  2.b) at the start of the contenteditable.\n    if (selection.hasOwnSelection(element)) {\n        const contenteditable = isContentEditable.getContentEditable(selection$1.focusNode);\n        if (contenteditable) {\n            if (!selection$1.isCollapsed) {\n                var _contenteditable_firstChild;\n                const focusNode = ((_contenteditable_firstChild = contenteditable.firstChild) === null || _contenteditable_firstChild === undefined ? undefined : _contenteditable_firstChild.nodeType) === 3 ? contenteditable.firstChild : contenteditable;\n                selection$1.setBaseAndExtent(focusNode, 0, focusNode, 0);\n            }\n        } else {\n            selection$1.setBaseAndExtent(element, 0, element, 0);\n        }\n    }\n}\n\nexports.updateSelectionOnFocus = updateSelectionOnFocus;\n"],"mappings":"AAAA,YAAY;;AAEZA,OAAO,CAAC,uCAAuC,CAAC;AAChD,IAAIC,iBAAiB,GAAGD,OAAO,CAAC,uCAAuC,CAAC;AACxE,IAAIE,SAAS,GAAGF,OAAO,CAAC,gCAAgC,CAAC;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAI,SAASG,sBAAsBA,CAACC,OAAO,EAAE;EACzC,MAAMC,WAAW,GAAGD,OAAO,CAACE,aAAa,CAACC,YAAY,CAAC,CAAC;EACxD;EAAyB,IAAI,EAAEF,WAAW,KAAK,IAAI,IAAIA,WAAW,KAAKG,SAAS,GAAGA,SAAS,GAAGH,WAAW,CAACI,SAAS,CAAC,EAAE;IACnH;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAIP,SAAS,CAACQ,eAAe,CAACN,OAAO,CAAC,EAAE;IACpC,MAAMO,eAAe,GAAGV,iBAAiB,CAACW,kBAAkB,CAACP,WAAW,CAACI,SAAS,CAAC;IACnF,IAAIE,eAAe,EAAE;MACjB,IAAI,CAACN,WAAW,CAACQ,WAAW,EAAE;QAC1B,IAAIC,2BAA2B;QAC/B,MAAML,SAAS,GAAG,CAAC,CAACK,2BAA2B,GAAGH,eAAe,CAACI,UAAU,MAAM,IAAI,IAAID,2BAA2B,KAAKN,SAAS,GAAGA,SAAS,GAAGM,2BAA2B,CAACE,QAAQ,MAAM,CAAC,GAAGL,eAAe,CAACI,UAAU,GAAGJ,eAAe;QAC5ON,WAAW,CAACY,gBAAgB,CAACR,SAAS,EAAE,CAAC,EAAEA,SAAS,EAAE,CAAC,CAAC;MAC5D;IACJ,CAAC,MAAM;MACHJ,WAAW,CAACY,gBAAgB,CAACb,OAAO,EAAE,CAAC,EAAEA,OAAO,EAAE,CAAC,CAAC;IACxD;EACJ;AACJ;AAEAc,OAAO,CAACf,sBAAsB,GAAGA,sBAAsB","ignoreList":[]}