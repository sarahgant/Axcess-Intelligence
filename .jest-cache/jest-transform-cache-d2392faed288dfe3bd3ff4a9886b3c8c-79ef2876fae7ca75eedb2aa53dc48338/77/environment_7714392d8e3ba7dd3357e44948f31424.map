{"file":"C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\src\\config\\environment.ts","mappings":"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","names":[],"sources":["C:\\Users\\sarah\\Repos\\CCH Axcess Intelligence Vibed\\src\\config\\environment.ts"],"sourcesContent":["import { z } from 'zod';\r\nimport { logger } from '../core/logging/logger';\r\n\r\n/**\r\n * Environment schema with validation and defaults\r\n */\r\nconst envSchema = z.object({\r\n  // API Configuration\r\n  API_BASE_URL: z.string().url().default('http://localhost:3001'),\r\n  API_TIMEOUT: z.number().min(1000).max(30000).default(5000),\r\n  \r\n  // AI Providers\r\n  ANTHROPIC_API_KEY: z.string().optional(),\r\n  OPENAI_API_KEY: z.string().optional(),\r\n  AI_PROVIDER: z.enum(['anthropic', 'openai', 'azure']).default('anthropic'),\r\n  \r\n  // Security\r\n  CORS_ORIGIN: z.string().default('http://localhost:5173'),\r\n  RATE_LIMIT_REQUESTS: z.number().min(1).max(1000).default(100),\r\n  RATE_LIMIT_WINDOW: z.number().min(1000).max(3600000).default(60000), // 1 minute\r\n  \r\n  // Features\r\n  ENABLE_LOGGING: z.boolean().default(true),\r\n  ENABLE_MONITORING: z.boolean().default(false),\r\n  ENABLE_CACHE: z.boolean().default(true),\r\n  \r\n  // Performance\r\n  MAX_FILE_SIZE: z.number().min(1024 * 1024).max(100 * 1024 * 1024).default(20 * 1024 * 1024), // 20MB\r\n  MAX_CONCURRENT_REQUESTS: z.number().min(1).max(50).default(5),\r\n  CACHE_TTL: z.number().min(60).max(86400).default(3600), // 1 hour\r\n  \r\n  // Development\r\n  NODE_ENV: z.enum(['development', 'production', 'test']).default('development'),\r\n  DEBUG: z.boolean().default(false),\r\n  \r\n  // Retry Configuration\r\n  RETRY_MAX_ATTEMPTS: z.number().min(1).max(10).default(3),\r\n  RETRY_INITIAL_DELAY: z.number().min(100).max(10000).default(1000),\r\n  RETRY_MAX_DELAY: z.number().min(1000).max(60000).default(10000),\r\n  \r\n  // Circuit Breaker Configuration\r\n  CIRCUIT_BREAKER_FAILURE_THRESHOLD: z.number().min(1).max(20).default(5),\r\n  CIRCUIT_BREAKER_RESET_TIMEOUT: z.number().min(1000).max(300000).default(60000), // 1 minute\r\n  CIRCUIT_BREAKER_SUCCESS_THRESHOLD: z.number().min(1).max(10).default(2),\r\n});\r\n\r\nexport type Environment = z.infer<typeof envSchema>;\r\n\r\n/**\r\n * Load and validate environment configuration\r\n */\r\nexport function loadEnvironment(): Environment {\r\n  // Get environment variables with fallback for testing\r\n  const getEnvVar = (key: string): string | undefined => {\r\n    if (typeof import.meta !== 'undefined' && import.meta.env) {\r\n      return import.meta.env[key];\r\n    }\r\n    // Fallback for testing environment\r\n    return process.env[key];\r\n  };\r\n\r\n  const env = {\r\n    API_BASE_URL: getEnvVar('VITE_API_BASE_URL'),\r\n    API_TIMEOUT: Number(getEnvVar('VITE_API_TIMEOUT')),\r\n    ANTHROPIC_API_KEY: getEnvVar('VITE_ANTHROPIC_API_KEY'),\r\n    OPENAI_API_KEY: getEnvVar('VITE_OPENAI_API_KEY'),\r\n    AI_PROVIDER: getEnvVar('VITE_AI_PROVIDER'),\r\n    CORS_ORIGIN: getEnvVar('VITE_CORS_ORIGIN'),\r\n    RATE_LIMIT_REQUESTS: Number(getEnvVar('VITE_RATE_LIMIT_REQUESTS')),\r\n    RATE_LIMIT_WINDOW: Number(getEnvVar('VITE_RATE_LIMIT_WINDOW')),\r\n    ENABLE_LOGGING: getEnvVar('VITE_ENABLE_LOGGING') === 'true',\r\n    ENABLE_MONITORING: getEnvVar('VITE_ENABLE_MONITORING') === 'true',\r\n    ENABLE_CACHE: getEnvVar('VITE_ENABLE_CACHE') === 'true',\r\n    MAX_FILE_SIZE: Number(getEnvVar('VITE_MAX_FILE_SIZE')),\r\n    MAX_CONCURRENT_REQUESTS: Number(getEnvVar('VITE_MAX_CONCURRENT_REQUESTS')),\r\n    CACHE_TTL: Number(getEnvVar('VITE_CACHE_TTL')),\r\n    NODE_ENV: getEnvVar('MODE') || 'development',\r\n    DEBUG: getEnvVar('VITE_DEBUG') === 'true',\r\n    RETRY_MAX_ATTEMPTS: Number(getEnvVar('VITE_RETRY_MAX_ATTEMPTS')),\r\n    RETRY_INITIAL_DELAY: Number(getEnvVar('VITE_RETRY_INITIAL_DELAY')),\r\n    RETRY_MAX_DELAY: Number(getEnvVar('VITE_RETRY_MAX_DELAY')),\r\n    CIRCUIT_BREAKER_FAILURE_THRESHOLD: Number(getEnvVar('VITE_CIRCUIT_BREAKER_FAILURE_THRESHOLD')),\r\n    CIRCUIT_BREAKER_RESET_TIMEOUT: Number(getEnvVar('VITE_CIRCUIT_BREAKER_RESET_TIMEOUT')),\r\n    CIRCUIT_BREAKER_SUCCESS_THRESHOLD: Number(getEnvVar('VITE_CIRCUIT_BREAKER_SUCCESS_THRESHOLD')),\r\n  };\r\n\r\n  try {\r\n    const validatedEnv = envSchema.parse(env);\r\n    \r\n    logger.info('Environment configuration loaded successfully', {\r\n      nodeEnv: validatedEnv.NODE_ENV,\r\n      apiBaseUrl: validatedEnv.API_BASE_URL,\r\n      aiProvider: validatedEnv.AI_PROVIDER,\r\n      enableLogging: validatedEnv.ENABLE_LOGGING,\r\n      enableCache: validatedEnv.ENABLE_CACHE,\r\n      debug: validatedEnv.DEBUG\r\n    });\r\n    \r\n    return validatedEnv;\r\n  } catch (error) {\r\n    logger.error('Environment validation failed', { \r\n      error: error instanceof Error ? error.message : String(error),\r\n      env: Object.keys(env).filter(key => env[key as keyof typeof env] !== undefined)\r\n    });\r\n    throw new Error(`Invalid environment configuration: ${error instanceof Error ? error.message : String(error)}`);\r\n  }\r\n}\r\n\r\n/**\r\n * Get environment configuration with validation\r\n */\r\nexport const config = loadEnvironment();\r\n\r\n/**\r\n * Environment configuration helpers\r\n */\r\nexport const env = {\r\n  /**\r\n   * Check if running in development mode\r\n   */\r\n  isDevelopment: () => config.NODE_ENV === 'development',\r\n  \r\n  /**\r\n   * Check if running in production mode\r\n   */\r\n  isProduction: () => config.NODE_ENV === 'production',\r\n  \r\n  /**\r\n   * Check if running in test mode\r\n   */\r\n  isTest: () => config.NODE_ENV === 'test',\r\n  \r\n  /**\r\n   * Check if debug mode is enabled\r\n   */\r\n  isDebug: () => config.DEBUG,\r\n  \r\n  /**\r\n   * Get API configuration\r\n   */\r\n  api: {\r\n    baseUrl: () => config.API_BASE_URL,\r\n    timeout: () => config.API_TIMEOUT,\r\n  },\r\n  \r\n  /**\r\n   * Get AI provider configuration\r\n   */\r\n  ai: {\r\n    provider: () => config.AI_PROVIDER,\r\n    anthropicKey: () => config.ANTHROPIC_API_KEY,\r\n    openaiKey: () => config.OPENAI_API_KEY,\r\n  },\r\n  \r\n  /**\r\n   * Get security configuration\r\n   */\r\n  security: {\r\n    corsOrigin: () => config.CORS_ORIGIN,\r\n    rateLimitRequests: () => config.RATE_LIMIT_REQUESTS,\r\n    rateLimitWindow: () => config.RATE_LIMIT_WINDOW,\r\n  },\r\n  \r\n  /**\r\n   * Get feature flags\r\n   */\r\n  features: {\r\n    logging: () => config.ENABLE_LOGGING,\r\n    monitoring: () => config.ENABLE_MONITORING,\r\n    cache: () => config.ENABLE_CACHE,\r\n  },\r\n  \r\n  /**\r\n   * Get performance configuration\r\n   */\r\n  performance: {\r\n    maxFileSize: () => config.MAX_FILE_SIZE,\r\n    maxConcurrentRequests: () => config.MAX_CONCURRENT_REQUESTS,\r\n    cacheTTL: () => config.CACHE_TTL,\r\n  },\r\n  \r\n  /**\r\n   * Get retry configuration\r\n   */\r\n  retry: {\r\n    maxAttempts: () => config.RETRY_MAX_ATTEMPTS,\r\n    initialDelay: () => config.RETRY_INITIAL_DELAY,\r\n    maxDelay: () => config.RETRY_MAX_DELAY,\r\n  },\r\n  \r\n  /**\r\n   * Get circuit breaker configuration\r\n   */\r\n  circuitBreaker: {\r\n    failureThreshold: () => config.CIRCUIT_BREAKER_FAILURE_THRESHOLD,\r\n    resetTimeout: () => config.CIRCUIT_BREAKER_RESET_TIMEOUT,\r\n    successThreshold: () => config.CIRCUIT_BREAKER_SUCCESS_THRESHOLD,\r\n  },\r\n};\r\n\r\n/**\r\n * Validate required environment variables for production\r\n */\r\nexport function validateProductionEnvironment(): void {\r\n  if (env.isProduction()) {\r\n    const requiredVars = [\r\n      'API_BASE_URL',\r\n      'ANTHROPIC_API_KEY',\r\n      'OPENAI_API_KEY',\r\n      'CORS_ORIGIN'\r\n    ];\r\n    \r\n    const missingVars = requiredVars.filter(varName => {\r\n      const value = config[varName as keyof Environment];\r\n      return value === undefined || value === '';\r\n    });\r\n    \r\n    if (missingVars.length > 0) {\r\n      throw new Error(`Missing required environment variables for production: ${missingVars.join(', ')}`);\r\n    }\r\n    \r\n    logger.info('Production environment validation passed');\r\n  }\r\n}\r\n\r\n/**\r\n * Get environment summary for debugging\r\n */\r\nexport function getEnvironmentSummary(): Record<string, unknown> {\r\n  return {\r\n    nodeEnv: config.NODE_ENV,\r\n    debug: config.DEBUG,\r\n    apiBaseUrl: config.API_BASE_URL,\r\n    aiProvider: config.AI_PROVIDER,\r\n    features: {\r\n      logging: config.ENABLE_LOGGING,\r\n      monitoring: config.ENABLE_MONITORING,\r\n      cache: config.ENABLE_CACHE,\r\n    },\r\n    performance: {\r\n      maxFileSize: `${config.MAX_FILE_SIZE / (1024 * 1024)}MB`,\r\n      maxConcurrentRequests: config.MAX_CONCURRENT_REQUESTS,\r\n      cacheTTL: `${config.CACHE_TTL}s`,\r\n    },\r\n    retry: {\r\n      maxAttempts: config.RETRY_MAX_ATTEMPTS,\r\n      initialDelay: `${config.RETRY_INITIAL_DELAY}ms`,\r\n      maxDelay: `${config.RETRY_MAX_DELAY}ms`,\r\n    },\r\n    circuitBreaker: {\r\n      failureThreshold: config.CIRCUIT_BREAKER_FAILURE_THRESHOLD,\r\n      resetTimeout: `${config.CIRCUIT_BREAKER_RESET_TIMEOUT}ms`,\r\n      successThreshold: config.CIRCUIT_BREAKER_SUCCESS_THRESHOLD,\r\n    },\r\n  };\r\n}\r\n"],"version":3}