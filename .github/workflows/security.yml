name: Security Scan

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  security:
    name: üîí Security Analysis
    runs-on: ubuntu-latest
    
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        cd server && npm ci
        
    - name: Run npm audit (Frontend)
      run: |
        echo "üîç Frontend security audit..."
        npm audit --audit-level moderate || echo "Frontend audit completed with warnings"
        
    - name: Run npm audit (Backend)
      run: |
        echo "üîç Backend security audit..."
        cd server && npm audit --audit-level moderate || echo "Backend audit completed with warnings"
        
    - name: Check for hardcoded secrets
      run: |
        echo "üîç Scanning for hardcoded secrets..."
        
        # Check for common secret patterns
        SECRETS_FOUND=false
        
        # API Keys
        if grep -r "sk-[a-zA-Z0-9]" . --exclude-dir=node_modules --exclude-dir=.git --exclude="*.yml" --exclude="*.md" | grep -v "test-key" | grep -v "example"; then
          echo "‚ö†Ô∏è Potential API keys found!"
          SECRETS_FOUND=true
        fi
        
        # Database URLs
        if grep -r "postgresql://\|mysql://\|mongodb://" . --exclude-dir=node_modules --exclude-dir=.git --exclude="*.yml" --exclude="*.md" | grep -v "example"; then
          echo "‚ö†Ô∏è Potential database URLs found!"
          SECRETS_FOUND=true
        fi
        
        # Private keys
        if grep -r "BEGIN.*PRIVATE KEY" . --exclude-dir=node_modules --exclude-dir=.git; then
          echo "‚ö†Ô∏è Potential private keys found!"
          SECRETS_FOUND=true
        fi
        
        if [ "$SECRETS_FOUND" = true ]; then
          echo "‚ùå Security scan failed - secrets detected"
          exit 1
        else
          echo "‚úÖ No hardcoded secrets found"
        fi
        
    - name: Check environment configuration
      run: |
        echo "üîç Checking environment configuration..."
        
        # Verify .gitignore protects sensitive files
        if grep -q "\.env" .gitignore && grep -q "server/\.env" .gitignore; then
          echo "‚úÖ Environment files properly ignored"
        else
          echo "‚ö†Ô∏è Environment files may not be properly ignored"
        fi
        
        # Check for exposed config files
        if find . -name "*.env" -not -path "./node_modules/*" -not -name "*.example" | grep -q .; then
          echo "‚ö†Ô∏è Environment files found in repository!"
          find . -name "*.env" -not -path "./node_modules/*" -not -name "*.example"
        else
          echo "‚úÖ No environment files in repository"
        fi
        
    - name: Check Docker security
      run: |
        echo "üîç Checking Docker configuration..."
        
        # Check Dockerfile security practices
        if grep -q "USER" Dockerfile; then
          echo "‚úÖ Dockerfile uses non-root user"
        else
          echo "‚ö†Ô∏è Dockerfile should specify non-root user"
        fi
        
        if grep -q "COPY.*package" Dockerfile; then
          echo "‚úÖ Dockerfile copies package files first (good for caching)"
        fi
        
    - name: Check dependencies for known vulnerabilities
      run: |
        echo "üîç Checking for vulnerable dependencies..."
        
        # Frontend dependencies
        npx npm-audit-html --output frontend-audit.html || echo "Frontend audit report generated"
        
        # Backend dependencies  
        cd server && npx npm-audit-html --output ../backend-audit.html || echo "Backend audit report generated"
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          frontend-audit.html
          backend-audit.html
        retention-days: 30
        
    - name: Security summary
      run: |
        echo "üîí Security Scan Summary:"
        echo "‚úÖ Hardcoded secrets check: Passed"
        echo "‚úÖ Environment configuration: Verified"
        echo "‚úÖ Docker security: Checked"
        echo "‚úÖ Dependency vulnerabilities: Scanned"
        echo ""
        echo "üìä View detailed reports in the artifacts section"