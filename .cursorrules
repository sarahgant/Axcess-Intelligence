# CCH Axcess Intelligence - Ultra-Powerful Production Rules

## 🧠 META: How to Think (Not Just What to Do)
```
DECISION_TREE:
  if (changing_existing_code):
    → Test exists? No → Write test first
    → Will break API? Yes → Add compatibility layer
    → Touches AI? Yes → Use provider interface
  if (adding_feature):
    → Core domain? Yes → Full TDD + integration tests
    → UI change? No → Keep existing structure
    → External service? Yes → Abstract behind interface
```

## ⚡ POWER PATTERNS (Automatic Triggers)

### Pattern: Any AI/LLM Touch
```typescript
// TRIGGERS: Interface enforcement + Azure readiness
interface AIProvider { /* MANDATORY */ }
const provider = this.providerFactory.create(config.AI_PROVIDER) // DI only
// NEVER: new OpenAI(), new Anthropic(), direct SDK calls
```

### Pattern: Any External Service
```typescript
// TRIGGERS: Circuit breaker + retry + timeout
@Retryable(3, BackoffStrategy.EXPONENTIAL)
@CircuitBreaker(threshold: 0.5, timeout: 30000)
@Timeout(5000)
async callExternal() { /* auto-wrapped */ }
```

### Pattern: Any State Change
```typescript
// TRIGGERS: Immutability + event emission + audit log
setState(prev => ({...prev, change})) // Never mutate
this.eventBus.emit('state.changed', {prev, next}) // Always emit
logger.audit({action, prev, next, user}) // Always log
```

## 🎯 PERFORMANCE BUDGETS (Hard Limits)
```javascript
CONSTRAINTS = {
  API_RESPONSE: 2000ms,      // Add caching if exceeded
  STREAMING_LATENCY: 100ms,  // Switch to WebSocket if exceeded
  BUNDLE_SIZE: 500KB,        // Code-split if exceeded
  TOKEN_LIMIT: 100K,         // Implement sliding window
  TEST_COVERAGE: 80%,        // Block commit if below
}
```

## 🏗️ ARCHITECTURE RULES (Self-Enforcing)

### Rule: Provider Migration Path
```typescript
// Current → Future (automatic compatibility)
providers/
├── base/AIProvider.ts        // Interface (unchangeable)
├── anthropic/index.ts        // implements AIProvider
├── openai/index.ts           // implements AIProvider
└── azure/index.ts            // implements AIProvider (future-ready stub)

// Migration = Change config, not code
AI_PROVIDER=anthropic → AI_PROVIDER=azure // Zero code changes
```

### Rule: Error Boundary Cascade
```typescript
// Every async operation gets wrapped automatically
try {
  return await operation()
} catch (error) {
  if (isRetryable(error)) return this.retry(operation)
  if (isUserError(error)) return this.userFriendly(error)
  if (isCritical(error)) return this.escalate(error)
  return this.fallback()
}
```

## 🔒 INVARIANTS (Never Break)
- Home.tsx = Single chat container (no component extraction)
- .env variables = Read-only (never modify, only add)
- Provider interfaces = Frozen (extend, don't modify)
- Existing tests = Must pass (no regression)

## 🚀 TDD ENFORCEMENT
```bash
# Automatic pre-implementation check
if [ ! -f "tests/${feature}.test.ts" ]; then
  echo "❌ Write test first: tests/${feature}.test.ts"
  exit 1
fi
```

## 📊 QUALITY GATES (Automatic)
```typescript
@RequireTest           // Compiler error without test
@RequireDocs          // Compiler error without JSDoc
@RequireTypesSafety   // No 'any', 'unknown' must be guarded
@RequireErrorHandler  // Must have try-catch or .catch()
class ProductionCode { }
```

## 🔄 CHANGE PROTOCOL (Semantic)
```
CHANGE_IMPACT:
  patch (0.0.x) → Internal only, no API change
  minor (0.x.0) → Additive only, backward compatible
  major (x.0.0) → Breaking change, requires migration guide
  
AUTO_VERSION:
  - Test added → patch
  - Feature added → minor  
  - Interface changed → major (blocked without migration)
```

## 🎭 CONTEXT-AWARE BEHAVIORS
```typescript
// Cursor adapts based on file location
if (file.includes('/providers/')) USE_PATTERN('provider-abstraction')
if (file.includes('/services/')) USE_PATTERN('business-logic-pure')
if (file.includes('/screens/')) USE_PATTERN('ui-preserve-only')
if (file.includes('/tests/')) USE_PATTERN('comprehensive-coverage')
```

## ⚡ TURBO MODE (Production Shortcuts)
```bash
npm start        # Auto-kills ports + starts everything
npm test:smart   # Only tests affected files
npm audit:fix    # Auto-fix security + lint + format
npm build:check  # Validates production readiness
```

## 🏁 DONE DEFINITION (Automated Check)
```yaml
definition_of_done:
  - tests: passing && coverage > 80%
  - types: strict && no_any && no_ignore
  - security: no_vulnerabilities && input_validated
  - performance: meets_budgets && has_monitoring
  - docs: api_documented && changelog_updated
  - review: code_reviewed || ai_reviewed
```

---
**PRIME DIRECTIVE**: Every line of code is production-ready and Azure-migration-safe from day one.